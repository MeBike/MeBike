[
  {
    "role": "user",
    "parts": [
      {
        "text": "This is the Gemini CLI. We are setting up the context for our chat.\nToday's date is Friday, October 17, 2025 (formatted according to the user's locale).\nMy operating system is: linux\nI'm currently working in the directory: /home/nguyentuanan/Desktop/workspace/MeBike\nHere is the folder structure of the current working directories:\n\nShowing up to 200 items (files + folders). Folders or files indicated with ... contain more items not shown, were ignored, or the display limit (200 items) was reached.\n\n/home/nguyentuanan/Desktop/workspace/MeBike/\n├───.dockerignore\n├───.gitignore\n├───eslint.config.mjs\n├───LICENSE\n├───orval.config.ts\n├───package.json\n├───pnpm-lock.yaml\n├───pnpm-workspace.yaml\n├───tsconfig.json\n├───turbo.json\n├───.git/...\n├───.github/\n│   └───workflows/\n│       └───ci.yml\n├───.pnpm-store/\n│   └───v10/\n│       ├───files/\n│       │   ├───00/\n│       │   ├───01/\n│       │   ├───02/\n│       │   ├───03/\n│       │   ├───04/\n│       │   ├───05/\n│       │   ├───06/\n│       │   ├───07/\n│       │   ├───08/\n│       │   ├───09/\n│       │   ├───0a/\n│       │   ├───0b/\n│       │   ├───0c/\n│       │   ├───0d/\n│       │   ├───0e/\n│       │   ├───0f/\n│       │   ├───10/\n│       │   ├───11/\n│       │   ├───12/\n│       │   ├───13/\n│       │   ├───14/\n│       │   ├───15/\n│       │   ├───16/\n│       │   ├───17/\n│       │   ├───18/\n│       │   ├───19/\n│       │   ├───1a/\n│       │   ├───1b/\n│       │   ├───1c/\n│       │   ├───1d/\n│       │   ├───1e/\n│       │   ├───1f/\n│       │   ├───20/\n│       │   ├───21/\n│       │   ├───22/\n│       │   ├───23/\n│       │   ├───24/\n│       │   ├───25/\n│       │   ├───26/\n│       │   ├───27/\n│       │   ├───28/\n│       │   ├───29/\n│       │   ├───2a/\n│       │   ├───2b/\n│       │   ├───2c/\n│       │   ├───2d/\n│       │   ├───2e/\n│       │   ├───2f/\n│       │   ├───30/\n│       │   ├───31/\n│       │   ├───32/\n│       │   ├───33/\n│       │   ├───34/\n│       │   ├───35/\n│       │   ├───36/\n│       │   ├───37/\n│       │   ├───38/\n│       │   ├───39/\n│       │   ├───3a/\n│       │   ├───3b/\n│       │   ├───3c/\n│       │   ├───3d/\n│       │   ├───3e/\n│       │   ├───3f/\n│       │   ├───40/\n│       │   ├───41/\n│       │   ├───42/\n│       │   ├───43/\n│       │   ├───44/\n│       │   ├───45/\n│       │   ├───46/\n│       │   ├───47/\n│       │   ├───48/\n│       │   ├───49/\n│       │   ├───4a/\n│       │   ├───4b/\n│       │   ├───4c/\n│       │   ├───4d/\n│       │   └───...\n│       └───index/\n├───.turbo/...\n├───.vscode/\n│   └───settings.json\n├───apps/\n│   ├───backend/\n│   │   ├───.editorconfig\n│   │   ├───.eslintignore\n│   │   ├───.eslintrc.cjs\n│   │   ├───.gitignore\n│   │   ├───.prettierignore\n│   │   ├───.prettierrc\n│   │   ├───nodemon.json\n│   │   ├───package.json\n│   │   ├───tsconfig.json\n│   │   ├───.turbo/...\n│   │   ├───dist/...\n│   │   ├───node_modules/...\n│   │   ├───public/\n│   │   └───src/\n│   ├───frontend/\n│   │   ├───.gitignore\n│   │   ├───components.json\n│   │   ├───eslint.config.mjs\n│   │   ├───next.config.ts\n│   │   ├───package.json\n│   │   ├───postcss.config.mjs\n│   │   ├───README.md\n│   │   ├───tailwind.config.ts\n│   │   ├───tsconfig.json\n│   │   ├───.next/\n│   │   ├───.turbo/...\n│   │   ├───node_modules/...\n│   │   ├───public/\n│   │   └───src/\n│   ├───iot/\n│   │   ├───.gitignore\n│   │   ├───platformio.ini\n│   │   ├───.pio/...\n│   │   ├───.vscode/\n│   │   ├───data/\n│   │   ├───docs/\n│   │   ├───include/\n│   │   ├───lib/\n│   │   ├───problems/\n│   │   ├───src/\n│   │   └───test/\n│   ├───iot-service/\n│   │   ├───.gitignore\n│   │   ├───docker-compose.dev.yml\n│   │   ├───eslint.config.js\n│   │   ├───jest.config.ts\n│   │   ├───package.json\n│   │   ├───tsconfig.json\n│   │   ├───tsconfig.test.json\n│   │   ├───.turbo/...\n│   │   ├───dist/...\n│   │   ├───docs/\n│   │   ├───node_modules/...\n│   │   ├───scripts/\n│   │   ├───src/\n│   │   └───tests/\n│   └───mobile/\n│       ├───.gitignore\n│       ├───.npmrc\n│       ├───app.json\n│       ├───App.tsx\n│       ├───eas.json\n│       ├───index.ts\n│       ├───package.json\n│       ├───tsconfig.json\n│       ├───.expo/\n│       ├───android/...\n│       ├───assets/\n│       ├───components/\n│       ├───constants/\n│       ├───contexts/\n│       ├───data/\n│       ├───node_modules/...\n│       ├───screen/\n│       ├───styles/\n│       └───types/\n├───hono/...\n├───node_modules/...\n├───openapi/\n│   └───iot-service.json\n└───packages/\n    ├───eslint-config/\n    │   ├───create-config.d.ts\n    │   ├───create-config.js\n    │   ├───eslint.config.js\n    │   ├───package.json\n    │   └───node_modules/...\n    ├───shared/\n    │   ├───package.json\n    │   ├───README.md\n    │   ├───tsconfig.build.json\n    │   ├───tsconfig.json\n    │   ├───.turbo/...\n    │   ├───dist/...\n    │   ├───node_modules/...\n    │   └───src/\n    └───tsconfig/\n        ├───package.json\n        └───tsconfig.base.json\n\nReminder: Do not return an empty response when a tool call is required.\n\nMy setup is complete. I will provide my first command in the next turn."
      }
    ]
  },
  {
    "role": "user",
    "parts": [
      {
        "text": "I need a progess report for this whole project @apps/backend/src/** @apps/iot/src/** @apps/iot-service/src/** @apps/frontend/src/** according those there specfication think deeply and carefully it couldd cause job lost if you are not carefull 1. users: \n(USERS) Chức năng của users(liên quan đến users):\n1. đăng nhập\n- Bằng email + password\n- Bằng Google account (OAuth)\n2. Đăng ký tài khoản\n- Nhập full_name, email, phone_number (verify OTP), password, confirm_password\n- Sau khi đăng ký → gửi OTP qua SMS để verify số điện thoại.\n3. Đăng xuất (Logout)\n4. Quên mật khẩu (Forgot password)\n- Nhập email → gửi link hoặc OTP reset password.\n- Cập nhật lại mật khẩu mới.\n5. Đổi mật khẩu (Change password)\n- Khi đã đăng nhập → nhập mật khẩu cũ + mật khẩu mới.\n6. Xem profile (Get profile)\n- Hiển thị thông tin cá nhân: full_name, email, phone, lịch sử thuê xe, điểm tích lũy (nếu có).\n7. Cập nhật profile (Update profile)\n8. verify số điệnthoại gửi OTP (bắt buộc trước khi đặt xe, vì đăng ký đã yêu cầu bắt buộc verify rồi)\n(ADMIN) Chức năng của users(liên quan đến admin):\n1. Quản lý danh sách người dùng\n- Xem tất cả users (lọc theo active/inactive).\n- Tìm kiếm người dùng theo email, số điện thoại.\n2. Xem chi tiết người dùng\n- Thông tin cá nhân.\n- Lịch sử mượn/trả xe (rentals).\n- Lịch sử thanh toán (payments).\n3. Cập nhật trạng thái người dùng\n- Khóa/mở tài khoản (ban/unban user).\n- Reset mật khẩu thủ công nếu cần hỗ trợ.\n4. Báo cáo & thống kê người dùng\n- Tổng số người dùng đã đăng ký.\n- Số người dùng active hàng ngày/tháng.\n- Top người thuê xe nhiều nhất.\n(STAFFS) Chức năng của users(liên quan đến staffs):\nStaff không có chức năng quản lý trực tiếp tài khoản người dùng.\nNhưng Staff có thể:\n1. Tra cứu nhanh thông tin người dùng tại trạm để hỗ trợ (ví dụ khi khách không trả được xe, staff nhập số điện thoại/email để check tài khoản).\n2. Xác nhận hỗ trợ thủ công khi hệ thống chưa nhận OTP hoặc chưa xác nhận trả xe đúng cách.\n2. stations (Trạm xe đạp):\n(USERS) Chức năng của trạm xe (liên quan đến users):\n1. hiển thị danh sách các trạm xe có trên hệ thống\n2. Hiển thị được thông tin của trạm xe \n- tên gì\n- ở đâu\n- Số xe có sẵn để thuê (AVAILABLE).\n- Số chỗ trống có thể trả xe (capacity - số xe đang có).\n- Địa chỉ, hướng dẫn đường đi.\n3. Tìm trạm xe gần nhất \n- Người dùng mở app, hệ thống lấy vị trí GPS hiện tại.\n- Trả về danh sách trạm gần nhất (theo bán kính, sắp xếp theo khoảng cách).\n4. Bản đồ và chỉ đường\n- Tích hợp bản đồ (Google Maps, OpenStreetMap).\n- Tính toán quãng đường ngắn nhất tới trạm.\n5. Thuê xe tại trạm\n- Người dùng chọn trạm\n- quét QR code của xe ở trạm.\n- Hệ thống kiểm tra xem trạm còn xe không trước khi cho thuê.\n6. Trả xe tại trạm\n- Khi trả xe, hệ thống ghi nhận xe được đưa về trạm.\n- Nếu chưa đặt đúng chỗ (chip NFC chưa nhận), có thể nhờ nhân viên trạm hỗ trợ.\n7. Đặt trước xe tại trạm\n- Người dùng chọn trạm, đặt xe trước (theo giờ/ngày).\n- Hệ thống phải đảm bảo có xe “dự trữ” ở trạm.\n(ADMIN) Chức năng của trạm xe (liên quan đến Admin):\n1. Quản lý thông tin trạm:\n- Thêm, sửa, xóa trạm.\n- Cập nhật sức chứa (capacity).\n- Quản lý địa chỉ, tọa độ GPS.\n2. Theo dõi tình trạng trạm\n- Số xe đang có ở trạm.\n- Số xe đang được thuê ra ngoài.\n- Số chỗ trống.\n3. Điều phối xe giữa các trạm\n- Khi một trạm quá tải hoặc thiếu xe, hệ thống có cảnh báo.\n- Admin điều phối staff di chuyển xe.\n4. Báo cáo & thống kê trạm\n- Lượng thuê/trả xe theo từng trạm.\n- Doanh thu của từng trạm.\n- Tỷ lệ hỏng hóc/báo cáo xe từ trạm.\n5. Hỗ trợ trả xe thủ công tại trạm\n- Khi hệ thống chưa ghi nhận (chip chưa khớp, xe chưa khóa đúng vị trí).\n- Nhân viên có quyền xác nhận thủ công để tránh lỗi cho người dùng.\n(STAFFS) Chức năng của trạm xe (liên quan đến staffs):\n1. Theo dõi tình trạng trạm (real-time)\n- Số xe tại trạm.\n- Chỗ trống còn lại.\n2. Hỗ trợ trả xe thủ công tại trạm\n- Khi chip chưa ghi nhận hoặc xe chưa vào đúng dock.\n- Có quyền xác nhận trả xe thủ công.\n3. Di chuyển xe giữa các trạm\n- Theo điều phối của Admin.\n- Cập nhật lại dữ liệu khi xe được chuyển.\n4. Báo cáo tình trạng trạm\n- Thông báo khi trạm quá tải/thiếu xe.\n- Đề xuất điều phối xe.\n3. bikes (Xe đạp)\n(USERS) Chức năng của xe đạp (liên quan đến users):\n1. Xem thông tin xe tại trạm\n- Danh sách xe đang AVAILABLE ở một trạm.\n- Thông tin cơ bản: mã xe/QR code, tình trạng (có thể mượn được hay không).\n2. Thuê xe (Rent bike)\n- Quét QR code để mở khóa xe.\n- Hệ thống kiểm tra:\n+ Xe đang AVAILABLE không?\n+ Xe không bị báo hỏng?\n- Sau đó gán xe vào phiên thuê (rentals).\n3. Trả xe (Return bike)\n- Đưa xe vào trạm, hệ thống tự động ghi nhận.\n- Nếu chip chưa nhận, có thể nhờ staff hỗ trợ xác nhận trả xe.\n4. Báo hỏng xe\n- Khi phát hiện xe có vấn đề (phanh, yên, xích, bánh xe).\n- Xe sẽ chuyển trạng thái sang BROKEN, staff/admin tiếp nhận xử lý.\n5. Đánh giá xe sau chuyến đi\n- Cho điểm (rating) và bình luận chất lượng xe.\n(ADMIN) Chức năng của xe đạp (liên quan đến admin):\n1. Quản lý danh sách xe\n- Thêm mới xe (gán vào trạm ban đầu, liên kết với nhà cung cấp).\n- Sửa thông tin xe (QR code, tình trạng ban đầu, đổi trạm).\n- Xóa xe (chỉ khi chưa từng phát sinh giao dịch).\n2. Quản lý trạng thái xe\n- Cập nhật tình trạng: AVAILABLE, IN_USE, BROKEN, RESERVED.\n- Chuyển xe từ trạm này sang trạm khác.\n3. Theo dõi hoạt động xe\n- Xem lịch sử mượn/trả xe.\n- Xem số km tổng, số giờ hoạt động, số lần báo hỏng.\n- Xem doanh thu mang lại từ mỗi xe.\n4. Quản lý liên kết nhà cung cấp (supplier)\n- Gán xe cho nhà cung cấp nào.\n- Quản lý tỷ lệ chia lợi nhuận theo từng xe.\n5. Báo cáo & phân tích\n- Xe nào hoạt động nhiều nhất/ít nhất.\n- Xe nào hay bị hỏng.\n- Xe nào sắp cần bảo trì định kỳ.\n(STAFFS) Chức năng của xe đạp (liên quan đến staff):\n1. Xác nhận trả xe thủ công\n- Khi người dùng đưa xe vào nhưng hệ thống chưa ghi nhận.\n- Staff có quyền ghi nhận thủ công xe đã trả.\n2. Kiểm tra & bảo trì xe\n- Thực hiện checklist tình trạng xe tại trạm.\n- Cập nhật trạng thái (OK, BROKEN).\n3. Di chuyển xe giữa các trạm\n- Khi trạm quá đông hoặc thiếu xe.\n- Staff có quyền chuyển xe từ trạm này sang trạm khác theo điều phối của admin.\n4. Xử lý báo hỏng xe\n- Nhận yêu cầu báo hỏng từ User.\n- Kiểm tra thực tế và xác nhận xe BROKEN hoặc sửa chữa, trả lại AVAILABLE.\n\n\n4. rentals (Phiên mượn/trả xe)\n(USERS) Chức năng của phiên mượn/trả xe (liên quan đến users):\n1. Thuê xe (Create Rental)\n- Người dùng chọn trạm, quét QR code xe.\n- Hệ thống kiểm tra: xe AVAILABLE, trạm còn xe.\n- Tạo phiên thuê với trạng thái RENTED, ghi nhận thời gian bắt đầu, vị trí.\n2. Trả xe (Return Rental)\n- Người dùng đưa xe về trạm, gắn vào dock/NFC.\n- Hệ thống ghi nhận xe được trả, cập nhật trạng thái xe → AVAILABLE, cập nhật rental → COMPLETED.\n- Nếu không khớp (NFC chưa nhận), nhờ staff hỗ trợ.\n3. Hủy thuê xe (Cancel Reservation)\n- Trường hợp đã đặt trước (reservation) nhưng chưa lấy xe.\n- Hệ thống cập nhật trạng thái rental → CANCELLED.\n4. Đặt trước xe (Reserve Bike)\n- Người dùng chọn trạm, đặt xe trước theo giờ/ngày.\n- Hệ thống giữ chỗ xe (RESERVED) trong một khoảng thời gian.\n- Có thể hủy hoặc hết hạn thì tự động giải phóng.\n5. Xem lịch sử thuê xe\n- Danh sách các rental đã thực hiện (đang thuê, đã trả, đã hủy).\n- Thông tin: thời gian bắt đầu, thời gian kết thúc, trạm thuê/trả, chi phí.\n6. Theo dõi phiên thuê đang hoạt động\n- Xem tình trạng chuyến đi hiện tại (đang thuê).\n- Hiển thị thời gian, chi phí tạm tính, quãng đường (nếu có GPS trên xe).\n7. Thanh toán phiên thuê\n- Thanh toán khi kết thúc rental.\n- Hỗ trợ các phương thức: ví điện tử, thẻ, tiền mặt tại trạm (nếu có).\n(ADMIN) Chức năng của phiên mượn/trả xe (liên quan đến admin):\n1. Quản lý tất cả rentals\n- Xem, tìm kiếm, lọc theo user, theo trạm, theo xe.\n- Trạng thái: RENTED, RESERVED, COMPLETED, CANCELLED.\n2. Thống kê & báo cáo rentals\n- Doanh thu theo ngày/tháng/năm.\n- Tỷ lệ sử dụng xe, lượt thuê/trả theo trạm.\n- Thống kê số lần hủy, số lần đặt trước thành công.\n3. Điều chỉnh phiên thuê trong trường hợp đặc biệt\n- Hủy/điều chỉnh rental nếu hệ thống ghi nhận sai (ví dụ xe trả nhưng chưa cập nhật).\n- Cập nhật thủ công chi phí/giảm giá.\n4. Quản lý chính sách rental\n- Cấu hình phí thuê, phí đặt trước, phí trễ hạn.\n- Thiết lập thời gian giữ xe khi đặt trước.\n- Quy định xử phạt khi trả xe sai trạm.\n(STAFFS) Chức năng của phiên mượn/trả xe (liên quan đến staffs):\n1. Xác nhận trả xe thủ công\n- Khi hệ thống chưa ghi nhận xe đã gắn dock, staff có thể xác nhận để tránh lỗi cho user.\n2. Hỗ trợ xử lý sự cố rental\n- Xe bị hỏng khi đang thuê.\n- Xe trả sai trạm hoặc không vào dock.\n- Người dùng không thể kết thúc rental → staff có quyền đóng phiên thuê thủ công.\n3. Theo dõi rental tại trạm phụ trách\n- Xem danh sách xe đang được thuê từ trạm.\n- Xem xe nào sắp hết thời gian đặt trước.\n4. Điều phối xe liên quan rental\n- Khi nhiều xe bị giữ lâu tại trạm (do đặt trước) → staff có thể giải phóng hoặc điều phối sang trạm khác (nếu được quyền).\n\n\n  5. payments\n(USERS) Chức năng của thanh toán (liên quan đến users):\n1. Thanh toán phiên thuê xe\n- Thanh toán khi kết thúc rental.\n- Tính toán chi phí dựa trên thời gian/loại xe/chính sách giá.\n- Hỗ trợ nhiều phương thức: ví điện tử, thẻ ngân hàng, QR Pay, tiền mặt tại trạm (nếu có)\n2. Thanh toán đặt trước xe\n- Trả phí giữ xe trước khi đến lấy.\n- Nếu hủy đúng hạn → hoàn tiền theo chính sách.\n3. Quản lý ví điện tử trong hệ thống (nếu có tích hợp)\n- Nạp tiền vào ví.\n- Rút tiền ra ngân hàng.\n- Xem số dư.\n4. Xem lịch sử thanh toán\n- Danh sách hóa đơn: số tiền, thời gian, phương thức.\n- Liên kết với phiên thuê xe (rental_id).\n5. Nhận hóa đơn/biên lai\n- Sau mỗi giao dịch thanh toán → hệ thống xuất biên lai.\n- Tùy chọn gửi email/SMS hoặc tải file PDF.\n6. Xử lý khiếu nại thanh toán\n- Báo lỗi nếu bị trừ tiền nhưng chưa ghi nhận rental.\n- Gửi yêu cầu hoàn tiền.\n(ADMIN) Chức năng của thanh toán (liên quan đến admin):\n1. Quản lý tất cả giao dịch thanh toán\n- Xem danh sách thanh toán, lọc theo user, theo thời gian, theo phương thức.\n- Trạng thái: thành công, thất bại, pending, refund.\n2. Xử lý hoàn tiền (Refund)\n- Trường hợp hủy thuê xe, hủy đặt trước, hoặc sự cố hệ thống.\n- Thực hiện refund qua kênh thanh toán ban đầu hoặc ví nội bộ.\n3. Cấu hình cổng thanh toán\n- Kết nối/đồng bộ với các cổng: VNPay, Momo, ZaloPay, Stripe, PayPal…\n- Thiết lập API key, callback URL.\n4. Thiết lập chính sách phí\n- Định nghĩa bảng giá thuê xe (theo giờ, theo loại xe).\n- Phí giữ xe, phí hủy, phí trễ hạn.\n- Phí hoàn tiền (nếu có).\n5. Theo dõi & báo cáo tài chính\n- Doanh thu theo ngày/tháng/năm.\n- Doanh thu theo trạm, theo loại xe.\n- Tỷ lệ giao dịch thất bại.\n- Dòng tiền nạp/rút ví người dùng.\n6. Tích hợp kế toán\n- Xuất báo cáo chi tiết cho bộ phận kế toán.\n- Xuất dữ liệu sang Excel/CSV/PDF.\n(STAFFS) Chức năng của thanh toán (liên quan đến staffs):\n1. Hỗ trợ thanh toán tại trạm\n- Thu tiền mặt từ người dùng.\n- Xác nhận giao dịch thủ công trên hệ thống.\n2. Hỗ trợ người dùng sự cố thanh toán\n- Trường hợp người dùng bị lỗi trừ tiền nhưng chưa có rental.\n- Ghi nhận và báo cáo admin để xử lý refund.\n3. Xác nhận miễn phí / giảm phí trong trường hợp đặc biệt\n- Ví dụ: xe hỏng giữa đường, người dùng không thể tiếp tục thuê.\n- Staff có thể xác nhận “không tính phí” hoặc báo admin duyệt.\n\n\n\n6. reservations (Đặt trước xe)\n(USERS) Chức năng của đặt trước xe(liên quan đến users):\n1. Tạo đặt trước xe\n- Chọn trạm muốn đặt.\n- Chọn thời gian đặt trước (giờ/ngày).\n- Thanh toán trước (100% theo chính sách).\n2. Xem danh sách đặt trước\n- Xem tất cả reservation đã tạo.\n- Thông tin gồm: mã đặt trước, trạm, loại xe, thời gian, trạng thái (active/expired/canceled).\n3. Hủy đặt trước\n- Người dùng có thể hủy (nếu trong khung thời gian cho phép).\n- Nếu hủy muộn hoặc sát giờ → xử lý theo chính sách (không hoàn tiền).\n4. Xác nhận nhận xe đã đặt\n- Đến trạm, quét QR hoặc nhập mã đặt trước.\n- Hệ thống kiểm tra xe có sẵn và chuyển thành phiên rental.\n5. Thông báo & nhắc nhở\n- Nhắc khi gần đến giờ nhận xe.\n- Cảnh báo khi reservation sắp hết hiệu lực (ví dụ: 15 phút trước khi hủy tự động).\n6. Lịch sử đặt trước\n- Xem các booking cũ: thành công, đã hủy, hết hạn.\n(ADMIN) Chức năng của đặt trước xe(liên quan đến admin):\n1. Quản lý tất cả đặt trước\n- Xem danh sách reservation theo user, theo trạm, theo ngày.\n- Lọc theo trạng thái: pending, active, canceled, expired.\n2. Cấu hình chính sách đặt trước\n- Thời hạn đặt tối đa (ví dụ 6 tháng, 1 tháng, 1 tuần, 1 ngày).\n- Chính sách hủy (hoàn tiền trong thời gian cho phép trong chính sách).\n- Quy định số xe được phép đặt giữ tại trạm (reserve quota, thường là 50% tổng số xe).\n3. Điều phối xe theo đặt trước\n- Khi có quá nhiều đặt trước tại một trạm → cảnh báo thiếu xe.\n- Cho phép admin phân bổ xe từ trạm khác\n4. Báo cáo đặt trước\n- Thống kê số lượng reservation theo tháng.\n- Tỷ lệ thành công vs hủy.\n- Doanh thu từ đặt trước.\n(STAFFS) Chức năng của đặt trước xe(liên quan đến staffs):\n1. Hỗ trợ người dùng nhận xe đặt trước\n- Nếu người dùng gặp lỗi khi check-in/QR code không hoạt động.\n- Staff có thể xác nhận thủ công để chuyển reservation → rental.\n2. Hỗ trợ hủy đặt trước tại trạm\n- Khi người dùng yêu cầu hủy tại chỗ (nhưng vẫn phải theo chính sách hủy của hệ thống).\n- Staff có quyền xác nhận và báo hệ thống.\n3. Theo dõi số xe dự trữ tại trạm\n- Xem danh sách reservation gắn với trạm.\n- Biết được bao nhiêu xe đang được giữ chỗ.\n7. reports (Báo hỏng, SOS)\n(USERS) Chức năng của báo hỏng, SOS(liên quan đến users):\n1. Báo hỏng xe\n- Khi đang thuê hoặc sau khi trả xe, người dùng có thể báo xe hỏng.\n- Thông tin gồm: mô tả lỗi, hình ảnh/video, vị trí.\n- Hệ thống gắn report với bike_id + rental_id (nếu có).\n2. Báo sự cố tại trạm\n- Báo lỗi liên quan đến trạm: trạm đầy, trạm không nhận xe, trạm offline.\n3. Gửi SOS khẩn cấp\n- Nút SOS trong app.\n- Gửi vị trí GPS hiện tại + thông tin người dùng cho nhân viên hỗ trợ.\n- Có thể gọi hotline trực tiếp.\n4. Theo dõi trạng thái report \n- Xem danh sách báo hỏng/SOS đã gửi.\n- Trạng thái: pending, in_progress, resolved.\n- Nhận thông báo khi staff/admin cập nhật xử lý.\n(ADMIN) Chức năng của báo hỏng, SOS(liên quan đến admin):\n1. Quản lý tất cả reports\n- Xem toàn bộ báo cáo từ users.\n- Lọc theo loại (bike issue, station issue, SOS), theo thời gian, theo user.\n2. Điều phối xử lý\n- Gán report cho staff tại trạm hoặc nhóm bảo trì.\n- Thay đổi trạng thái: pending → in_progress → resolved.\n- Đặt mức độ ưu tiên (thường, cao, khẩn cấp).\n3. Quản lý SOS\n- Tiếp nhận báo cáo SOS khẩn cấp.\n- Xem vị trí GPS của user để điều động nhân viên/xe cứu hộ.\n4. Báo cáo & thống kê\n- Thống kê số lượng reports theo loại.\n- Tỷ lệ xử lý thành công, thời gian trung bình để xử lý.\n- Theo dõi xe hỏng nhiều lần → quyết định bảo dưỡng/thay thế.\n(STAFFS) Chức năng của báo hỏng, SOS(liên quan đến staffs):\n1. Tiếp nhận & xử lý báo cáo\n- Nhận báo cáo được gán từ admin.\n- Cập nhật tiến trình xử lý: xác minh, sửa chữa, hoàn tất.\n- Ghi chú, upload hình ảnh sau khi sửa xe.\n2. Hỗ trợ SOS khẩn cấp\n- Nhận thông tin người dùng gặp sự cố (tai nạn, khẩn cấp).\n- Liên hệ trực tiếp với user hoặc điều phối cứu hộ.\n- Cập nhật trạng thái SOS sau khi hỗ trợ.\n3. Báo cáo ngược lại cho admin\n- Sau khi xử lý, staff cập nhật chi tiết (xe đã sửa, đổi xe mới, người dùng an toàn…).\n- Chuyển trạng thái report sang resolved.\n\n\n\n8. ratings\n(USERS) Chức năng của đánh giá(liên quan đến users):\n1. Đánh giá sau chuyến đi\n- Sau khi kết thúc rental, user có thể đánh giá hành trình (1–5 sao).\n- Nội dung đánh giá: chất lượng xe, trạm, dịch vụ, trải nghiệm tổng thể.\n- Có thể viết bình luận (optional).\n2. Đánh giá xe\n- User có thể để lại review riêng cho bike (ví dụ: xe êm, xe hỏng phanh…). \n- Hệ thống liên kết rating với bike_id.\n3. Đánh giá dịch vụ hỗ trợ/staff\n- Nếu user có tương tác với staff (hỗ trợ tại trạm, SOS) → có thể để lại feedback.\n4. Quản lý đánh giá cá nhân\n- Xem lại các đánh giá đã gửi.\n- Sửa hoặc xóa đánh giá trong thời gian cho phép (ví dụ: 24h sau khi gửi).\n(ADMIN) Chức năng của đánh giá(liên quan đến admin):\n1. Quản lý đánh giá toàn hệ thống\n- Xem tất cả ratings (theo user, theo xe, theo trạm, theo staff).\n- Lọc theo thời gian, số sao, loại đánh giá.\n2. Moderation (kiểm duyệt nội dung)\n- Ẩn hoặc xóa đánh giá có nội dung vi phạm (spam, ngôn ngữ thô tục).\n- Khóa quyền đánh giá của user vi phạm nhiều lần.\n3. Báo cáo & thống kê đánh giá\n- Điểm trung bình của từng trạm, từng xe, từng nhân viên.\n- Thống kê xu hướng theo tháng, quý, năm.\n- Tỷ lệ đánh giá tích cực vs tiêu cực.\n4. Liên kết với KPI & chất lượng dịch vụ\n- Sử dụng ratings để chấm điểm hiệu suất staff.\n- Quyết định thay thế/bảo dưỡng xe nếu nhận nhiều đánh giá xấu.\n(STAFFS) Chức năng của đánh giá(liên quan đến staffs):\n1. Xem đánh giá liên quan đến mình\n- Staff có thể xem feedback người dùng sau khi hỗ trợ.\n- Biết được mức độ hài lòng để cải thiện dịch vụ.\n2. Xem đánh giá xe/trạm mình quản lý\n- Nhận thông tin xe bị đánh giá thấp để kiểm tra bảo trì.\n- Theo dõi trạm có nhiều phản hồi xấu để cải thiện vận hành.\n\n\n\n9. suppliers (Nhà cung cấp xe đạp)\n(ADMIN) Chức năng của nhà cung cấp(liên quan đến admin):\n1. Quản lý thông tin nhà cung cấp\n- Thêm, sửa, xóa nhà cung cấp.\n- Quản lý thông tin cơ bản: tên, địa chỉ, số điện thoại, email, hợp đồng.\n2. Quản lý hợp đồng & thỏa thuận\n- Lưu trữ hợp đồng hợp tác (thời hạn, số lượng xe cung cấp, điều khoản).\n- Gia hạn hoặc kết thúc hợp đồng.\n3. Theo dõi số lượng xe do từng nhà cung cấp cung cấp\n- Thống kê số lượng xe đang hoạt động, xe hỏng, xe hết hạn bảo hành.\n- Liên kết với bảng bikes theo supplier_id.\n4. Quản lý chi phí & thanh toán cho nhà cung cấp\n- Theo dõi số tiền phải trả cho supplier theo hợp đồng (mua/thuê/hoa hồng).\n- Quản lý lịch sử thanh toán với supplier.\n5. Đánh giá chất lượng nhà cung cấp\n- Dựa trên phản hồi của user & tình trạng xe.\n- Xếp hạng nhà cung cấp theo độ tin cậy, chất lượng dịch vụ.\n6. Báo cáo & thống kê\n- Tổng số xe từng supplier đang cung cấp.\n- Doanh thu mang lại từ xe của từng supplier.\n- Tỷ lệ xe hỏng, tỷ lệ bảo trì theo supplier.\n(STAFFS) Chức năng của nhà cung cấp(liên quan đến staffs):\n1. Báo cáo tình trạng xe về supplier\n- Khi xe hỏng nghiêm trọng, staff có thể báo cáo để yêu cầu bảo hành/đổi xe.\n- Tích hợp quy trình gửi yêu cầu tới admin hoặc trực tiếp supplier (nếu cho phép).\n2. Theo dõi xe theo supplier tại trạm mình quản lý\n- Biết được những xe thuộc supplier nào.\n- Hỗ trợ admin trong việc kiểm kê, bảo trì.\n\n\n10. bike_supplier (Xe thuộc nhà cung cấp nào)\n(ADMIN) Chức năng của xe thuộc nhà cung cấp nào(liên quan đến admin):\n1. Quản lý liên kết xe với nhà cung cấp\n- Khi thêm mới xe → chọn supplier cung cấp.\n- Chỉnh sửa thông tin xe để thay đổi supplier (nếu có chuyển giao).\n- Xóa liên kết khi xe ngừng hợp tác hoặc thanh lý.\n2. Theo dõi số lượng xe theo supplier\n- Báo cáo số xe của từng supplier.\n- Trạng thái: đang hoạt động, đang bảo trì, hỏng, đã thu hồi.\n- Báo cáo hiệu suất xe theo suppli er\n- Tổng số lượt thuê, tổng doanh thu do xe của từng supplier mang lại.\n- Tỷ lệ hỏng hóc, bảo trì.\n4. Đối soát chi phí với supplier\n- Tính toán tiền chia sẻ doanh thu/tiền thuê dựa trên xe thuộc supplier.\n- Xuất báo cáo chi tiết theo từng xe hoặc tổng hợp theo supplier.\n(STAFFS) Chức năng của xe thuộc nhà cung cấp nào(liên quan đến staffs):\n1. Theo dõi xe theo supplier tại trạm quản lý\n- Biết được xe nào trong trạm thuộc nhà cung cấp nào.\n- Hỗ trợ khi admin yêu cầu kiểm kê theo supplier.\n2. Báo cáo tình trạng xe cho đúng supplier\n- Khi phát hiện xe hỏng nặng hoặc hết niên hạn → gửi báo cáo để admin liên hệ supplier."
      },
      {
        "text": "\n--- Content from referenced files ---"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/constants/enums.ts:\n"
      },
      {
        "text": "export enum UserVerifyStatus {\n  Unverified = 'UNVERIFIED',\n  Verified = 'VERIFIED',\n  Banned = 'BANNED'\n}\n\nexport enum TokenType {\n  AccessToken = 'ACCESS_TOKEN',\n  RefreshToken = 'REFRESH_TOKEN',\n  ForgotPasswordToken = 'FORGOT_PASSWORD_TOKEN',\n  EmailVerificationToken = 'EMAIL_VERIFICATION_TOKEN'\n}\n\nexport enum Role {\n  User = 'USER',\n  Staff = 'STAFF',\n  Admin = 'ADMIN'\n}\n\nexport enum ReportStatus {\n  Pending = 'ĐANG CHỜ XỬ LÝ',\n  InProgress = 'ĐANG XỬ LÝ',\n  Resolved = 'ĐÃ GIẢI QUYẾT',\n  Cancel = 'ĐÃ HỦY'\n}\n\nexport enum ReportTypeEnum {\n  BikeDamage = 'XE HƯ HỎNG',\n  BikeDirty = 'XE BẨN',\n\n  StationFull = 'TRẠM ĐẦY',\n  StationNotAccepting = 'TRẠM KHÔNG NHẬN XE',\n  StationOffline = 'TRẠM NGOẠI TUYẾN',\n\n  SosAccident = 'CẤP CỨU TAI NẠN',\n  SosHealth = 'CẤP CỨU SỨC KHỎE',\n  SosThreat = 'CẤP CỨU NGUY HIỂM',\n  Other = 'KHÁC'\n}\n\nexport enum RentalStatus {\n  Rented = 'ĐANG THUÊ',\n  Completed = 'HOÀN THÀNH',\n  Cancelled = 'ĐÃ HỦY',\n  Reserved = 'ĐÃ ĐẶT TRƯỚC'\n}\n\nexport enum GroupByOptions {\n  Day = 'DAY',\n  Month = 'MONTH',\n  Year = 'YEAR'\n}\n\nexport enum ReservationStatus {\n  Pending = 'ĐANG CHỜ XỬ LÍ',\n  Active = 'ĐANG HOẠT ĐỘNG',\n  Cancelled = 'ĐÃ HUỶ',\n  Expired = 'ĐÃ HẾT HẠN'\n}\n\nexport enum BikeStatus {\n  Available = 'CÓ SẴN',\n  Booked = 'ĐANG ĐƯỢC THUÊ',\n  Broken = 'BỊ HỎNG',\n  Reserved = 'ĐÃ ĐẶT TRƯỚC',\n  Maintained = 'ĐANG BẢO TRÌ',\n  Unavailable = 'KHÔNG CÓ SẴN'\n}\n\nexport enum SupplierStatus {\n  ACTIVE = 'HOẠT ĐỘNG',\n  INACTIVE = 'NGƯNG HOẠT ĐỘNG',\n  TERMINATE = 'CHẤM DỨT HỢP ĐỒNG'\n}\n\nexport enum ReportPriority {\n  LOW = 'THẤP',\n  NORMAL = 'BÌNH THƯỜNG',\n  HIGH = 'CAO',\n  URGENT = 'KHẨN CẤP'\n}\n\nexport enum PaymentStatus {\n  Pending = 'ĐANG CHỜ XỬ LÝ',\n  Success = 'THÀNH CÔNG',\n  Failed = 'THẤT BẠI'\n}\n\nexport enum PaymentMethod {\n  Momo = 'MOMO',\n  Bank = 'NGÂN HÀNG',\n  Vnpt = 'VNPTMONEY',\n  Wallet = 'VÍ'\n}\n\nexport enum WalletStatus {\n  Active = 'ĐANG HOẠT ĐỘNG',\n  Frozen = 'ĐÃ BỊ ĐÓNG BĂNG'\n}\n\nexport enum TransactionStaus {\n  Pending = 'ĐANG CHỜ XỬ LÝ',\n  Success = 'THÀNH CÔNG',\n  Failed = 'THẤT BẠI',\n  Cancelled = 'ĐÃ HỦY'\n}\n\nexport enum TransactionTypeEnum {\n  Deposit = 'NẠP TIỀN',\n  PAYMENT = 'THANH TOÁN',\n  WithDrawal = 'RÚT TIỀN',\n  Refund = 'HOÀN TIỀN'\n}\n\nexport enum RefundStatus {\n  Pending = 'ĐANG CHỜ XỬ LÝ',\n  Approved = 'ĐÃ DUYỆT',\n  Rejected = 'TỪ CHỐI',\n  Completed = 'ĐÃ HOÀN THÀNH'\n}\n\nexport enum WithDrawalStatus {\n  Pending = 'ĐANG CHỜ XỬ LÝ',\n  Approved = 'ĐÃ DUYỆT',\n  Rejected = 'TỪ CHỐI',\n  Completed = 'ĐÃ HOÀN THÀNH'\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/constants/http-status.ts:\n"
      },
      {
        "text": "const HTTP_STATUS = {\n  OK: 200,\n  CREATED: 201,\n  ACCEPTED: 202,\n  NO_CONTENT: 204,\n  UNPROCESSABLE_ENTITY: 422,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  INTERNAL_SERVER_ERROR: 500,\n  BAD_REQUEST: 400,\n  PARTIAL_CONTENT: 206,\n} as const;\n\nexport default HTTP_STATUS;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/constants/messages.ts:\n"
      },
      {
        "text": "export const USERS_MESSAGES = {\n  // đăng ký messages\n  VALIDATION_ERROR: 'Lỗi xác thực',\n  FULL_NAME_IS_REQUIRED: 'Họ và tên là bắt buộc',\n  FULL_NAME_MUST_BE_A_STRING: 'Họ và tên phải là chuỗi',\n  FULL_NAME_LENGTH_MUST_BE_FROM_1_TO_50: 'Họ và tên phải có độ dài từ 1 đến 50 ký tự',\n  EMAIL_ALREADY_EXISTS: 'Email đã tồn tại',\n  EMAIL_IS_REQUIRED: 'Email là bắt buộc',\n  EMAIL_IS_INVALID: 'Email không hợp lệ',\n  PASSWORD_IS_REQUIRED: 'Mật khẩu là bắt buộc',\n  PASSWORD_MUST_BE_A_STRING: 'Mật khẩu phải là chuỗi',\n  PASSWORD_LENGTH_MUST_BE_FROM_8_TO_30: 'Mật khẩu phải có độ dài từ 8 đến 30 ký tự',\n  CONFIRM_PASSWORD_IS_REQUIRED: 'Xác nhận mật khẩu là bắt buộc',\n  CONFIRM_PASSWORD_MUST_BE_A_STRING: 'Xác nhận mật khẩu phải là chuỗi',\n  CONFIRM_PASSWORD_LENGTH_MUST_BE_FROM_8_TO_30: 'Xác nhận mật khẩu phải có độ dài từ 8 đến 30 ký tự',\n  CONFIRM_PASSWORD_MUST_BE_THE_SAME_AS_PASSWORD: 'Mật khẩu xác nhận không khớp',\n  REGISTER_SUCCESS: 'Đăng ký thành công',\n  IMAGE_URL_MUST_BE_A_STRING: 'URL hình ảnh phải là chuỗi',\n  IMAGE_URL_MUST_BE_VALID: 'URL hình ảnh không hợp lệ',\n  // đăng nhập messages\n  EMAIL_OR_PASSWORD_IS_INCORRECT: 'Email hoặc mật khẩu không chính xác',\n  LOGIN_SUCCESS: 'Đăng nhập thành công',\n  // logout messages\n  ACCESS_TOKEN_IS_REQUIRED: 'Access token là bắt buộc',\n  USED_REFRESH_TOKEN_OR_NOT_EXIST: 'Refresh token đã được sử dụng hoặc không tồn tại',\n  LOGOUT_SUCCESS: 'Đăng xuất thành công',\n  // forgot password messages\n  USER_NOT_FOUND: 'Không tìm thấy người dùng',\n  CHECK_EMAIL_TO_RESET_PASSWORD: 'Vui lòng kiểm tra email để đặt lại mật khẩu',\n  // verify forgot password token messages\n  FORGOT_PASSWORD_TOKEN_IS_REQUIRED: 'Forgot password token là bắt buộc',\n  FORGOT_PASSWORD_TOKEN_IS_INCORRECT: 'Forgot password token không chính xác',\n  VERIFY_FORGOT_PASSWORD_TOKEN_SUCCESS: 'Xác thực forgot password token thành công',\n  // reset password messages\n  NEW_PASSWORD_CANNOT_BE_THE_SAME_AS_OLD_PASSWORD: 'Mật khẩu mới không được trùng với mật khẩu cũ',\n  RESET_PASSWORD_SUCCESS: 'Đặt lại mật khẩu thành công',\n  // verify email messages\n  EMAIL_VERIFY_TOKEN_IS_REQUIRED: 'Email verify token là bắt buộc',\n  EMAIL_ALREADY_VERIFIED_BEFORE: 'Email đã được xác thực trước đó',\n  EMAIL_VERIFY_TOKEN_IS_INCORRECT: 'Email verify token không chính xác',\n  VERIFY_EMAIL_SUCCESS: 'Xác thực email thành công',\n  // resend verify email messages\n  USER_BANNED: 'Người dùng đã bị cấm',\n  RESEND_EMAIL_VERIFY_SUCCESS: 'Gửi lại email xác thực thành công',\n  // change password messages\n  USER_IS_NOT_VERIFIED: 'Người dùng chưa được xác thực',\n  OLD_PASSWORD_NOT_MATCH: 'Mật khẩu cũ không khớp',\n  NEW_PASSWORD_MUST_BE_DIFFERENT_FROM_OLD_PASSWORD: 'Mật khẩu mới phải khác với mật khẩu cũ',\n  CHANGE_PASSWORD_SUCCESS: 'Đổi mật khẩu thành công',\n  // get me messages\n  GET_ME_SUCCESS: 'Lấy thông tin người dùng thành công',\n  UPDATE_ME_ERROR: 'Cập nhật thông tin người dùng thất bại',\n  // update me messages\n  LOCATION_MUST_BE_A_STRING: 'Vị trí phải là chuỗi',\n  LOCATION_LENGTH_MUST_BE_LESS_THAN_200: 'Vị trí phải có độ dài nhỏ hơn 200 ký tự',\n  USERNAME_MUST_BE_A_STRING: 'Tên người dùng phải là chuỗi',\n  USERNAME_ALREADY_EXISTS: 'Tên người dùng đã tồn tại',\n  UPDATE_ME_SUCCESS: 'Cập nhật thông tin người dùng thành công',\n  // refresh token messages\n  REFRESH_TOKEN_SUCCESS: 'Làm mới token thành công',\n  // check admin role messages\n  ACCESS_DENIED_ADMIN_ONLY: 'Quyền truy cập bị từ chối. Chỉ dành cho quản trị viên',\n  // check staff role messages\n  ACCESS_DENIED_STAFF_ONLY: 'Quyền truy cập bị từ chối. Chỉ dành cho nhân viên',\n  // check admin and staff role messages\n  ACCESS_DENIED_ADMIN_AND_STAFF_ONLY: 'Quyền truy cập bị từ chối. Chỉ dành cho quản trị viên và nhân viên'\n} as const\n\nexport const REPORTS_MESSAGES = {\n  REPORT_NOT_FOUND: 'Không tìm thấy report với ID %s',\n  INVALID_NEW_STATUS: 'Trạng thái mới không hợp lệ!',\n  INVALID_STATUS: 'Trạng thái không hợp lệ!',\n  CREATE_SUCCESS: 'Tạo report thành công',\n  UPDATE_SUCCESS: 'Update trạng thái report thành công!',\n  INVALID_REPORT_ID: 'Report ID không hợp lệ!',\n  REPORT_ID_IS_REQUIRED: 'Report ID là bắt buộc',\n  NOT_ACTIVE: 'Report này hiện không tồn tại!',\n  STATUS_IS_REQUIRED: 'Trạng thái mới là bắt buộc!',\n  BIKE_ID_IS_REQUIRED: 'ID Xe đạp là bắt buộc!',\n  INVALID_BIKE_ID: 'ID Xe đạp không hợp lệ!',\n  BIKE_NOT_FOUND: 'Không tìm thấy xe đạp với ID %s',\n  TYPE_IS_REQUIRED: 'Loại report là bắt buộc!',\n  INVALID_TYPE: 'Loại report không hợp lệ!',\n  MESSAGE_MUST_BE_STRING: 'Mô tả không hợp lệ!',\n  MESSAGE_TOO_LONG: 'Mô tả chỉ chỉ khoảng 250 từ',\n  BIKE_NOT_IN_RENTAL: 'Xe với ID %s không nằm trong phiên thuê',\n  STATION_ID_IS_REQUIRED: 'ID của trạm là bắt buộc',\n  INVALID_STATION_ID: 'ID của trạm không hợp lệ!',\n  RENTAL_NOT_FOUND: 'Không tìm thấy thông tin của phiên thuê %s',\n  INVALID_RENTAL_ID: 'ID của phiên thuê không hợp lệ!',\n  STATION_NOT_FOUND: 'Không tìm thấy trạm với ID %s',\n  LOCATION_IS_REQUIRED: 'Vị trí là bắt buộc!',\n  GET_BY_ID_SUCCESS: 'Lấy report với ID %s thành công',\n  GET_USER_REPORT_SUCCESS: 'Lấy report của user ID %s thành công',\n  GET_ALL_SUCCESS: 'Lấy repport thành công',\n  USER_ID_IS_REQUIRED: 'User ID là bắt buộc',\n  USER_ID_INVALID: 'User ID không hợp lệ',\n  DATE_IN_VALID: 'Ngày không hợp lệ',\n  STAFF_ID_IS_REQUIRED: 'ID của nhân viên điều phối là bắt buộc',\n  PRIORITY_IS_REQUIRED: 'Độ ưu tiên của report là bắt buộc',\n  INVALID_PRIORITY: 'Độ ưu tiên không hợp lệ!'\n}\n\nexport const SUPPLIER_MESSAGE = {\n  CREATE_SUCCESS: 'Tạo nhà cung cấp thành công!',\n  NAME_IS_REQUIRED: 'Tên nhà cung cấp là bắt buộc!',\n  NAME_IN_VALID: 'Tên nhà cung cấp phải là chuỗi!',\n  NAME_TOO_LONG: 'Tên nhà cung cấp không vượt quá 30 ký tự',\n  ADDRESS_IN_VALID: 'Địa chỉ nhà cung cấp phải là chuỗi!',\n  ADDRESS_TOO_LONG: 'Tên nhà cung cấp không vượt quá 250 ký tự',\n  PHONE_IN_VALID: 'Số điện thoại nhà cung cấp phải là chuỗi!',\n  PHONE_NUMBER_INVALID: 'Số điện thoại phải có 10 số',\n  FEE_IN_VALID: 'Phí hợp đồng nhà cung cấp phải là số thập phân với 2 số sau dấu phẩy!',\n  START_DATE_IN_VALID: 'Ngày bắt đầu hợp đồng nhà cung cấp phải là kiểu DATE',\n  START_DATE_AFTER: 'Ngày bắt đầu hợp đồng phải trước ngày kết thúc của hợp đồng',\n  START_DATE_IN_PAST: 'Ngày bắt đầu hợp đồng phải trước ngày hôm nay',\n  END_DATE_IN_VALID: 'Ngày kết thúc hợp đồng nhà cung cấp phải là kiểu DATE',\n  END_DATE_1_MONTH: 'Ngày kết thúc hợp đồng phải sau ngày bắt đầu hợp đồng 1 tháng',\n  CONTRACT_IMAGE_IS_REQUIRED: 'Hình ảnh hợp đồng là bắt buộc',\n  UPDATE_SUCCESS: 'Cập nhật thông tin nhà cung cấp thành công',\n  SUPPLIER_ID_IN_VALID: 'ID nhà cung cấp không hợp lệ',\n  SUPPLIER_NOT_FOUND: 'Không tìm thấy nhà cung cấp với ID %s',\n  SUPPLIER_ID_IS_REQUIRED: 'ID nhà cung cấp là bắt buộc!',\n  STATUS_INVALID: 'Trạng thái mới không hợp lệ!',\n  STATUS_IS_REQUIRED: 'Trạng thái mới bắt buộc',\n  STATUS_MUST_BE_STRING: 'Trạng thái mới phải là chuỗi ký tự',\n  GET_BY_ID_SUCCESS: 'Lấy thông tin nhà cung cấp với ID %s thành công',\n  GET_STATS_SUCCESS: 'Lấy thống kế của nhà cung cấp thành công',\n  GET_STATS_SUCCESS_BY_ID: 'Lấy thống kế của nhà cung cấp với ID %s thành công'\n}\n\nexport const BIKES_MESSAGES = {\n  CREATE_BIKE_SUCCESS: 'Tạo xe đạp mới thành công',\n  GET_BIKES_SUCCESS: 'Lấy danh sách xe đạp thành công',\n  BIKE_NOT_FOUND: 'Không tìm thấy xe đạp',\n  STATUS_IS_REQUIRED: 'Trạng thái là bắt buộc',\n  INVALID_STATUS: 'Trạng thái không hợp lệ',\n  STATION_ID_IS_REQUIRED: 'ID của trạm là bắt buộc',\n  INVALID_STATION_ID: 'ID của trạm không hợp lệ',\n  STATION_NOT_FOUND: 'Không tìm thấy trạm với ID được cung cấp',\n  FORBIDDEN: 'Không có quyền truy cập',\n  INVALID_SUPPLIER_ID: 'ID của nhà cung cấp không hợp lệ',\n  SUPPLIER_NOT_FOUND: 'Không tìm thấy nhà cung cấp với ID được cung cấp',\n  // get bikes by id\n  GET_BIKE_SUCCESS: 'Lấy thông tin xe đạp thành công',\n  BIKE_ID_IS_REQUIRED: 'ID của xe đạp là bắt buộc',\n  INVALID_BIKE_ID: 'ID của xe đạp không hợp lệ',\n  // delete bike\n  DELETE_BIKE_SUCCESS: \"Xóa xe đạp thành công\",\n  // history rental of bike\n  GET_BIKE_RENTALS_SUCCESS: \"Lấy lịch sử thuê xe thành công\",\n  // stats of bikes\n  GET_BIKE_STATS_SUCCESS: \"Lấy thống kê xe thành công\",\n  // update info bike\n  UPDATE_BIKE_SUCCESS: 'Cập nhật thông tin xe đạp thành công',\n  UPDATE_NOT_ALLOWED: 'Bạn không được phép cập nhật trường này',\n  USER_CAN_ONLY_REPORT_BROKEN: 'Người dùng chỉ được phép báo hỏng xe',\n  AT_LEAST_ONE_FIELD_IS_REQUIRED: 'Cần ít nhất một trường để cập nhật',\n  CANNOT_REPORT_BIKE_NOT_RENTING: 'Bạn chỉ có thể báo hỏng chiếc xe bạn đang thuê',\n  REPORT_BROKEN_BIKE_SUCCESS: 'Báo hỏng xe thành công',\n  // thêm chip_id messages cho create and update bike\n  CHIP_ID_IS_REQUIRED: 'Chip ID là bắt buộc',\n  CHIP_ID_MUST_BE_A_STRING: 'Chip ID phải là chuỗi',\n  CHIP_ID_ALREADY_EXISTS: 'Chip ID đã tồn tại',\n  CHIP_ID_ALREADY_EXISTS_ON_ANOTHER_BIKE: 'Chip ID đã tồn tại trên một xe đạp khác'\n} as const\n\nexport const RENTALS_MESSAGE = {\n  // Success action\n  CREATE_SESSION_SUCCESS: 'Tạo phiên thuê xe thành công',\n  END_SESSION_SUCCESS: 'Kết thúc phiên thuê xe thành công',\n  GET_DETAIL_SUCCESS: 'Xem chi tiết 1 phiên thuê xe thành công',\n  GET_REVENUE_SUCCESS: 'Xem thống kê doanh thu thành công',\n  GET_STATION_ACTIVITY_SUCCESS: 'Xem thống kê hoạt động trạm xe thành công',\n  GET_RESERVATIONS_STATISTIC_SUCCESS: 'Xem thống kê số lượt đặt/huỷ thành công',\n  GET_STATION_TRAFFIC_SUCCESS: 'Xem thống kê số lượt thuê/trả theo trạm thành công',\n  UPDATE_DETAIL_SUCCESS: 'Cập nhật phiên thuê thành công',\n  CANCEL_RENTAL_SUCCESS: 'Huỷ phiên thuê thành công',\n  TRACKING_RENTAL_IN_STATION_SUCCESS: 'Xem danh sách các phiên thuê tại trạm thành công',\n  // Fail action\n  CREATE_SESSION_FAIL: 'Tạo phiên thuê xe không thành công',\n  // Required data\n  REQUIRED_USER_ID: 'Vui lòng nhập Id người dùng',\n  REQUIRED_BIKE_ID: 'Vui lòng nhập Id xe đạp',\n  REQUIRED_START_STATION: 'Vui lòng nhập trạm bắt đầu',\n  REQUIRED_END_STATION: 'Vui lòng nhập trạm kết thúc',\n  REQUIRED_ID: 'Vui lòng nhập Id của phiên thuê',\n  REQUIRED_CANCELLED_REASON: 'Vui lòng nhập lí do huỷ phiên thuê',\n  REQUIRED_UPDATED_REASON: 'Vui lòng nhập lí do thay đổi phiên thuê',\n  // Invalid data\n  INVALID_OBJECT_ID: '%s phải là 1 ObjectId hợp lệ',\n  INVALID_DURATION: 'Khoảng thời gian không hợp lệ (phải là số nguyên dương)',\n  INVALID_TOTAL_PRICE: 'Tổng tiền không hợp lệ (phải là 1 số không âm)',\n  INVALID_REASON: 'Lí do không hợp lệ (phải là 1 chuỗi)',\n  REASON_TOO_LONG: 'Lí do quá dài (chuỗi tối đa 255 kí tự)',\n  INVALID_RENTAL_STATUS: 'Trạng thái phiên thuê không hợp lệ',\n  INVALID_END_TIME_FORMAT: 'Thời gian kết thúc không hợp lệ (phải theo mẫu ISO8601)',\n  END_TIME_MUST_GREATER_THAN_START_TIME: 'Thời gian kết thúc phải lớn hơn hoặc bằng thời gian bắt đầu',\n  END_DATE_CANNOT_BE_IN_FUTURE: 'Thời gian kết thúc không thể là thời điểm ở tương lai',\n  INVALID_MEDIA_URLS: 'Danh sách media_urls không hợp lệ, phải là một mảng URL hợp lệ.',\n  INVALID_URL_FORMAT: 'Định dạng URL không hợp lệ: %s.',\n  INVALID_STATUS: 'Trạng thái phiên thuê không hợp lệ',\n  // Not found object\n  USER_NOT_FOUND: 'Không tìm thấy người dùng với Id %s',\n  BIKE_NOT_FOUND: 'Không tìm thấy xe đạp với Id %s',\n  STATION_NOT_FOUND: 'Không tìm thấy trạm với Id %s',\n  BIKE_NOT_FOUND_IN_STATION: 'Xe với Id %s không tồn tại trong trạm %s',\n  NOT_FOUND_RENTED_RENTAL: 'Không tìm thấy phiên thuê nào với Id %s đang diễn ra ở thời điểm hiện tại',\n  NOT_FOUND: 'Không tìm thấy phiên thuê nào với Id %s',\n  // Not available\n  NOT_AVAILABLE_BIKE: 'Xe chưa sẵn sàng để sử dụng',\n  // Not allowed action\n  CANNOT_END_OTHER_RENTAL: 'Bạn không có quyền kết thúc phiên thuê của người khác',\n  CANNOT_EDIT_THIS_RENTAL_WITH_STATUS: 'Không thể chỉnh sửa phiên thuê đang ở trạng thái %s',\n  CANNOT_CANCEL_THIS_RENTAL_WITH_STATUS: 'Không thể huỷ phiên thuê đang ở trạng thái %s (Rented, Reserved only)',\n  CANNOT_END_WITHOUT_END_STATION: 'Vui lòng nhập trạm kết thúc để kết thúc phiên',\n  CANNOT_END_WITHOUT_END_TIME: 'Vui lòng nhập thời điểm kết thúc để kết thúc phiên',\n  UPDATED_STATUS_NOT_ALLOWED: 'Bạn không thể cập nhật phiên thuê sang trạng thái %s (Completed, Cancelled only)',\n  CANNOT_CANCEL_WITH_BIKE_STATUS: 'Bạn không thể huỷ phiên thuê với xe đang ở trạng thái %s (Booked, Reserved only)',\n  CANNOT_EDIT_BIKE_STATUS_TO:\n    'Bạn không thể cập nhật trạng thái xe thành %s khi huỷ phiên thuê (Available, Broken only)',\n  // Not allowed body fields\n  NOT_ALLOWED_CREATED_FIELD: '%s không nằm trong các trường được cho phép để tạo',\n  NOT_ALLOWED_UPDATED_FIELD: '%s không nằm trong các trường được cho phép để cập nhật',\n  NOT_ALLOWED_CANCELLED_FIELD: '%s không nằm trong các trường được cho phép để huỷ',\n  // default message\n  NO_REASON: 'Không có nguyên nhân',\n  // bike\n  BIKE_IN_USE: 'Xe đang được sử dụng',\n  BIKE_IS_BROKEN: 'Xe đang bị hư hỏng, chưa sẵn sàng để sử dụng',\n  BIKE_IS_MAINTAINED: 'Xe đang được bảo trì, chưa sẵn sàng để sử dụng',\n  BIKE_IS_RESERVED: 'Xe đã được đặt trước',\n  UNAVAILABLE_BIKE: 'Xe chưa sẵn sàng để sử dụng',\n  INVALID_BIKE_STATUS: 'Trạng thái xe không hợp lệ'\n} as const\n\nexport const COMMON_MESSAGE = {\n  CREATE_SESSION_FAIL: 'Tạo phiên thất bại: '\n}\n\nexport const AUTH_MESSAGE = {\n  ACCESS_DENIED: 'Bạn không có quyền truy cập tài nguyên này',\n  ACCESS_DENIED_ADMIN_ONLY: 'Bạn không có quyền truy cập tài nguyên này (chỉ dành cho Admin)',\n  ACCESS_DENIED_ADMIN_AND_STAFF_ONLY: 'Bạn không có quyền truy cập tài nguyên này (chỉ dành cho Staff và Admin)'\n}\n\nexport const WALLETS_MESSAGE = {\n  USER_ALREADY_HAVE_WALLET: 'Người dùng với ID %s đã có ví',\n  USER_NOT_HAVE_WALLET: 'Người dùng với ID %s chưa có ví',\n  TRANSACTION_TYPE_INVALID: 'Loại giao dịch %s không hợp lệ',\n  AMOUNT_NEGATIVE: 'Số tiền giao dịch phải lớn hơn 0',\n  INSUFFICIENT_BALANCE: 'Số dư trong ví của người dùng %s không đủ để thực hiện giao dịch',\n  CREATE_SUCCESS: 'Tạo ví thành công',\n  INCREASE_BALANCE_SUCCESS: 'Đã cộng %s vào ví của người dùng %s',\n  DECRESE_BALANCE_SUCCESS: 'Đã trừ %s vào ví của người dùng %s',\n  AMOUNT_IS_REQUIRED: 'Số tiền giao dịch là bắt buộc',\n  AMOUNT_NUMERIC: 'Số tiền giao dịch là số thực',\n  TYPE_IS_REQUIRED: 'Loại giao dịch là bắt buộc',\n  TYPE_INVALID: 'Loại giao dịch không hợp lệ',\n  FEE_IS_REQUIRED: 'Phí giao dịch là bắt buộc',\n  FEE_NEGATIVE: 'Phí giao dịch phải lớn hơn 0',\n  DESCRIPTION_IS_REQUIED: 'Mô tả giao dịch là bắt buộc',\n  DESCRIPTION_INVALID: 'Mô tả giao dịch là chuỗi ký tự',\n  TRANSACRION_HASH_REQUIRED: 'Mã giao dịch là bắt buộc',\n  TRANSACRION_HASH_INVALID: 'Mã giao dịch là chuỗi ký tự',\n  MESSAGE_IS_REQUIED: 'Lời nhắn là bắt buộc',\n  MESSAGE_INVALID: 'Lời nhắn là chuỗi ký tự',\n  STATUS_IS_REQUIED: 'Trạng thái là bắt buộc',\n  STATUS_INVALID: 'Trạng thái không hợp lệ',\n  CHANGE_STATUS_SUCCESS: 'Đổi trạng thái ví của người dùng thành công',\n  GET_USER_WALLET_SUCCESS: 'Lấy thông tin ví của người dùng %s thành công',\n  FORBIDDEN: 'Không có quyền truy cập vào giao dịch của người khác',\n  TRANSACTION_NOT_FOUND: 'Không tìm thấy giao dịch',\n  TRANSACTION_DETAIL_SUCCESS: 'Lấy chi tiết giao dịch thành công',\n  CREATE_REFUND_SUCCESS: 'Tạo yêu cầu hoàn tiền thành công',\n  REFUND_NOT_FOUND: 'Không tìm thấy yêu cầu giao dịch %s',\n  INVALID_NEW_STATUS: 'Trạng thái mới không hợp lệ',\n  UPDATE_REFUND_SUCCESS: 'Cập nhật trạng thái yêu cầu hoàn tiền thành công',\n  CREATE_WITHDRAWL_SUCCESS: 'Tạo yêu cầu rút về tài khoản thành công',\n  REFUND_DETAIL_SUCCESS: 'Lấy chi tiết yêu cầu hoàn tiền thành công',\n  FORBIDDEN_ACCESS: 'Bạn không có quyền truy cập vào yêu cầu hoàn tiền này',\n  FORBIDDEN_WITHDRAW_ACCESS: 'Bạn không có quyền truy cập vào yêu cầu rút tiền này',\n  WALLET_HAS_BEEN_FROZEN: 'Ví của người dùng này đã bị đóng băng',\n  NOTE_IN_VALID: 'Ghi chú phải là chuỗi ký tự',\n  NOTE_TOO_LONG: 'Ghi chú không được vượt quá 500 ký tự',\n  USER_ID_IS_REQUIRED: 'User ID là bắt buộc',\n  USER_ID_INVALID: 'User ID không hợp lệ',\n  WALLET_ID_IS_REQUIED: 'Wallet ID là bắt buộc',\n  WALLET_ID_INVALID: 'Wallet ID không hợp lệ',\n  WALLET_NOT_FOUND: 'Không tìm thấy ví với ID %s',\n  REASON_INVALID: 'Lý do không hợp lệ',\n  REASON_TOO_LONG: 'Lý do không được vượt quá 500 ký tự',\n}\n\nexport const WITHDRAWLS_MESSAGE = {\n  WITHDRAWL_NOT_FOUND: 'Khong tìm thấy yêu cầu rút tiền với ID %s',\n  REASON_IS_REQUIRED: 'Vui lòng nhập nguyên nhân từ chối yêu cầu',\n  UPDATE_SUCCESS: 'Cập nhật trạng thái yêu cầu rút tiền %s thành công',\n  GET_DETAIL_SUCCESS: 'Lấy chi tiết yêu cầu rút tiền thành công'\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/constants/regex.ts:\n"
      },
      {
        "text": "export const REGEX_USERNAME = /^(?!\\d+$)\\w{4,50}$/;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/controllers/bikes.controllers.ts:\n"
      },
      {
        "text": "import type { NextFunction, Request, Response } from \"express\";\nimport type { ParamsDictionary } from \"express-serve-static-core\";\n\nimport type { CreateBikeReqBody, GetBikesReqQuery, UpdateBikeReqBody } from \"~/models/requests/bikes.request\";\nimport type { TokenPayLoad } from \"~/models/requests/users.requests\";\n\nimport { BikeStatus, RentalStatus, Role } from \"~/constants/enums\";\nimport HTTP_STATUS from \"~/constants/http-status\";\nimport { BIKES_MESSAGES, USERS_MESSAGES } from \"~/constants/messages\";\nimport bikesService from \"~/services/bikes.services\";\nimport { ErrorWithStatus } from \"~/models/errors\";\nimport databaseService from \"~/services/database.services\";\nimport { ObjectId } from \"mongodb\";\n\nexport async function createBikeController(req: Request<ParamsDictionary, any, CreateBikeReqBody>, res: Response) {\n  const result = await bikesService.createBike(req.body);\n  return res.status(HTTP_STATUS.CREATED).json({\n    message: BIKES_MESSAGES.CREATE_BIKE_SUCCESS,\n    result,\n  });\n}\n\nexport async function getBikesController(\n  req: Request<ParamsDictionary, any, any, GetBikesReqQuery>,\n  res: Response,\n  next: NextFunction,\n) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n  const user = await databaseService.users.findOne({ _id: new ObjectId(user_id) });\n  if(!user){\n    throw new ErrorWithStatus({\n      message: USERS_MESSAGES.USER_NOT_FOUND,\n      status: HTTP_STATUS.NOT_FOUND\n    })\n  }\n\n  const { role } = user\n  const query = req.query;\n\n  // Nếu là user, chỉ cho phép xem xe có sẵn (AVAILABLE)\n  if (role === Role.User) {\n    query.status = BikeStatus.Available;\n  }\n  await bikesService.getAllBikes(res, next, query);\n}\n\nexport async function getBikeByIdController(req: Request, res: Response) {\n  const { _id } = req.params;\n  const result = await bikesService.getBikeById(_id);\n  return res.json({\n    message: BIKES_MESSAGES.GET_BIKE_SUCCESS,\n    result,\n  });\n}\n\nexport async function reportBrokenBikeController(req: Request, res: Response) {\n  const { _id: bikeId } = req.params\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  // Kiểm tra xem user có đang thuê xe này không\n  const rental = await databaseService.rentals.findOne({\n    user_id: new ObjectId(user_id),\n    bike_id: new ObjectId(bikeId),\n    status: RentalStatus.Rented\n  })\n\n  if (!rental) {\n    throw new ErrorWithStatus({\n      message: BIKES_MESSAGES.CANNOT_REPORT_BIKE_NOT_RENTING,\n      status: HTTP_STATUS.FORBIDDEN\n    })\n  }\n\n  const result = await bikesService.updateBike(bikeId, { status: BikeStatus.Broken })\n\n  return res.json({\n    message: BIKES_MESSAGES.REPORT_BROKEN_BIKE_SUCCESS,\n    result\n  })\n}\n\n// admin/staff cập nhật bike\nexport async function adminUpdateBikeController(req: Request<ParamsDictionary, any, UpdateBikeReqBody>, res: Response) {\n  const { _id: bikeId } = req.params\n  const payload = req.body\n\n  const result = await bikesService.updateBike(bikeId, payload)\n\n  return res.json({\n    message: BIKES_MESSAGES.UPDATE_BIKE_SUCCESS,\n    result\n  })\n}\n\nexport async function deleteBikeController(req: Request, res: Response) {\n  const { _id: bikeId } = req.params;\n  const result = await bikesService.deleteBike(bikeId);\n  return res.json({\n    message: BIKES_MESSAGES.DELETE_BIKE_SUCCESS,\n    result,\n  });\n}\n\nexport async function getRentalsByBikeIdController(\n  req: Request<ParamsDictionary, any, any, GetBikesReqQuery>,\n  res: Response,\n  next: NextFunction\n) {\n  const { _id: bikeId } = req.params;\n  await bikesService.getRentalsByBikeId(res, next, bikeId, req.query);\n}\n\nexport async function getBikesStatsController(req: Request, res: Response) {\n  const result = await bikesService.getBikesStats();\n  return res.json({\n    message: BIKES_MESSAGES.GET_BIKE_STATS_SUCCESS,\n    result,\n  });\n}\n\nexport async function getBikeStatsByIdController(req: Request, res: Response) {\n  const { _id: bikeId } = req.params;\n  const result = await bikesService.getBikeStatsById(bikeId);\n  return res.json({\n    message: BIKES_MESSAGES.GET_BIKE_STATS_SUCCESS,\n    result,\n  });\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/controllers/rentals.controllers.ts:\n"
      },
      {
        "text": "import type { Request, Response } from 'express'\nimport type { NextFunction, ParamsDictionary } from 'express-serve-static-core'\nimport type { Filter, ObjectId } from 'mongodb'\n\nimport { GroupByOptions, RentalStatus } from '~/constants/enums'\nimport type {\n  CancelRentalReqBody,\n  CreateRentalReqBody,\n  EndRentalByAdminOrStaffReqBody,\n  RentalParams,\n  UpdateRentalReqBody\n} from '~/models/requests/rentals.requests'\nimport type Bike from '~/models/schemas/bike.schema'\nimport type Rental from '~/models/schemas/rental.schema'\nimport type Station from '~/models/schemas/station.schema'\n\nimport { RENTALS_MESSAGE } from '~/constants/messages'\nimport databaseService from '~/services/database.services'\nimport rentalsService from '~/services/rentals.services'\nimport { sendPaginatedAggregationResponse, sendPaginatedResponse } from '~/utils/pagination.helper'\nimport { toObjectId } from '~/utils/string'\nimport { TokenPayLoad } from '~/models/requests/users.requests'\n\nexport async function createRentalSessionController(\n  req: Request<ParamsDictionary, any, CreateRentalReqBody>,\n  res: Response\n) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n  const station = req.station as Station\n  const bike = req.bike as Bike\n\n  const result = await rentalsService.createRentalSession({\n    user_id,\n    start_station: station._id as ObjectId,\n    bike_id: bike._id as ObjectId\n  })\n  res.json({\n    message: RENTALS_MESSAGE.CREATE_SESSION_SUCCESS,\n    result\n  })\n}\n\nexport async function endRentalSessionController(req: Request<RentalParams>, res: Response) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  const rental = req.rental! as Rental\n\n  const result = await rentalsService.endRentalSession({ user_id: toObjectId(user_id), rental })\n  res.json({\n    message: RENTALS_MESSAGE.END_SESSION_SUCCESS,\n    result\n  })\n}\n\nexport async function endRentalByAdminOrStaffController(\n  req: Request<RentalParams, any, EndRentalByAdminOrStaffReqBody>,\n  res: Response\n) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  const rental = req.rental! as Rental\n\n  const result = await rentalsService.endRentalByAdminOrStaff({\n    user_id: toObjectId(user_id),\n    rental,\n    payload: req.body\n  })\n  res.json({\n    message: RENTALS_MESSAGE.END_SESSION_SUCCESS,\n    result\n  })\n}\n\nexport async function getMyRentalsController(req: Request, res: Response, next: NextFunction) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  const filters: Filter<Rental> = {}\n  filters.user_id = toObjectId(user_id)\n  if (req.query.start_station) {\n    filters.start_station = toObjectId(req.query.start_station.toString())\n  }\n  if (req.query.end_station) {\n    filters.end_station = toObjectId(req.query.end_station.toString())\n  }\n  if (req.query.status) {\n    filters.status = req.query.status as RentalStatus\n  }\n  await sendPaginatedResponse(res, next, databaseService.rentals, req.query, filters)\n}\n\nexport async function getMyDetailRentalController(req: Request<RentalParams>, res: Response) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  const result = await rentalsService.getMyDetailRental({ user_id: toObjectId(user_id), rental_id: req.params.id })\n  res.json({\n    message: RENTALS_MESSAGE.GET_DETAIL_SUCCESS,\n    result\n  })\n}\n\nexport async function getMyCurrentRentalsController(req: Request<RentalParams>, res: Response, next: NextFunction) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n  const filter: Filter<Rental> = {\n    user_id: toObjectId(user_id),\n    status: RentalStatus.Rented\n  }\n\n  await sendPaginatedResponse(res, next, databaseService.rentals, req.query, filter)\n}\n\n// staff/admin only\nexport async function getAllRentalsController(req: Request, res: Response, next: NextFunction) {\n  const filters: Filter<Rental> = {}\n  if (req.query.start_station) {\n    filters.start_station = toObjectId(req.query.start_station.toString())\n  }\n  if (req.query.end_station) {\n    filters.end_station = toObjectId(req.query.end_station.toString())\n  }\n  if (req.query.status) {\n    filters.status = req.query.status as RentalStatus\n  }\n  await sendPaginatedResponse(res, next, databaseService.rentals, req.query, filters)\n}\n\nexport async function getDetailRentalController(req: Request<RentalParams>, res: Response) {\n  const result = await rentalsService.getDetailRental({ rental_id: req.params.id })\n  res.json({\n    message: RENTALS_MESSAGE.GET_DETAIL_SUCCESS,\n    result\n  })\n}\n\nexport async function updateDetailRentalController(\n  req: Request<RentalParams, any, UpdateRentalReqBody>,\n  res: Response\n) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n  const result = await rentalsService.updateDetailRental({\n    rental_id: req.params.id,\n    admin_id: user_id,\n    payload: req.body\n  })\n  res.json({\n    message: RENTALS_MESSAGE.UPDATE_DETAIL_SUCCESS,\n    result\n  })\n}\n\nexport async function cancelRentalController(req: Request<RentalParams, any, CancelRentalReqBody>, res: Response) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n  const result = await rentalsService.cancelRental({ rental_id: req.params.id, admin_id: user_id, payload: req.body })\n  res.json({\n    message: RENTALS_MESSAGE.CANCEL_RENTAL_SUCCESS,\n    result\n  })\n}\n\nexport async function getRentalRevenueController(req: Request, res: Response) {\n  const { from, to, groupBy } = req.query\n  const result = await rentalsService.getRentalRevenue({\n    from: from as string,\n    to: to as string,\n    groupBy: groupBy as GroupByOptions\n  })\n  res.json({\n    message: RENTALS_MESSAGE.GET_REVENUE_SUCCESS,\n    result\n  })\n}\n\nexport async function getStationActivityController(req: Request, res: Response) {\n  const { from, to, stationId } = req.query\n  const result = await rentalsService.getStationActivity({\n    from: from as string,\n    to: to as string,\n    stationId: stationId as string\n  })\n  res.json({\n    message: RENTALS_MESSAGE.GET_STATION_ACTIVITY_SUCCESS,\n    result\n  })\n}\n\nexport async function getReservationsStatisticController(req: Request, res: Response) {\n  const { from, to, groupBy } = req.query\n  const result = await rentalsService.getReservationsStatistic({\n    from: from as string,\n    to: to as string,\n    groupBy: groupBy as GroupByOptions\n  })\n  res.json({\n    message: RENTALS_MESSAGE.GET_RESERVATIONS_STATISTIC_SUCCESS,\n    result\n  })\n}\n\nexport async function getRentalsByStationIdController(req: Request, res: Response, next: NextFunction) {\n  const { id: stationId } = req.params\n  const { status, expired_within } = req.query\n  const pipeline = await rentalsService.getRentalsByStationIdPipeline({\n    stationId,\n    status: status as RentalStatus,\n    expired_within: (expired_within as string) ?? '60'\n  })\n  return sendPaginatedAggregationResponse(res, next, databaseService.rentals, req.query, pipeline)\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/controllers/reports.controllers.ts:\n"
      },
      {
        "text": "import type { NextFunction, Request, Response } from 'express'\nimport type { ParamsDictionary } from 'express-serve-static-core'\nimport type { Filter } from 'mongodb'\n\nimport { ObjectId } from 'mongodb'\n\nimport type { ReportStatus, ReportTypeEnum } from '~/constants/enums'\nimport type { CreateReportReqBody } from '~/models/requests/reports.requests'\nimport type Report from '~/models/schemas/report.schema'\n\nimport HTTP_STATUS from '~/constants/http-status'\nimport { REPORTS_MESSAGES } from '~/constants/messages'\nimport { ErrorWithStatus } from '~/models/errors'\nimport databaseService from '~/services/database.services'\nimport reportService from '~/services/report.services'\nimport { sendPaginatedResponse } from '~/utils/pagination.helper'\nimport { TokenPayLoad } from '~/models/requests/users.requests'\n\nexport async function createReportController(req: Request<ParamsDictionary, any, CreateReportReqBody>, res: Response) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  const result = await reportService.createReport({\n    userID: user_id,\n    payload: req.body,\n    files: req.files as Express.Multer.File[]\n  })\n\n  res.json({\n    message: REPORTS_MESSAGES.CREATE_SUCCESS,\n    result: { acknowledged: true, insertedId: result._id }\n  })\n}\n\nexport async function updateReportStatusController(req: Request<ParamsDictionary, any, any>, res: Response) {\n  const { reportID } = req.params\n  const newStatus = req.body.newStatus\n  const assignee_id = req.body.staff_id || ''\n  const priority = req.body.priority || ''\n\n  const result = await reportService.updateReportStatus({\n    reportID: reportID.toString(),\n    newStatus,\n    assignee_id,\n    priority\n  })\n\n  res.json({\n    message: REPORTS_MESSAGES.UPDATE_SUCCESS,\n    result\n  })\n}\n\nexport async function getByIdController(req: Request<ParamsDictionary, any, any>, res: Response) {\n  const reportID = req.params.reportID\n\n  const result = await databaseService.reports.findOne({ _id: new ObjectId(reportID) })\n  if (!result) {\n    throw new ErrorWithStatus({\n      message: REPORTS_MESSAGES.REPORT_NOT_FOUND.replace('%s', reportID),\n      status: HTTP_STATUS.NOT_FOUND\n    })\n  }\n\n  res.json({\n    message: REPORTS_MESSAGES.GET_BY_ID_SUCCESS.replace('%s', reportID),\n    result\n  })\n}\n\nexport async function getAllUserReportController(req: Request, res: Response, next: NextFunction) {\n  try {\n    const { user_id } = req.decoded_authorization as TokenPayLoad\n\n    const filter = {\n      user_id: new ObjectId(user_id),\n      status: req.query.status as ReportStatus\n    }\n\n    await sendPaginatedResponse(res, next, databaseService.reports, req.query, filter, {})\n  } catch (error) {\n    next(error)\n  }\n}\n\nexport async function getAllReportController(req: Request<any, any, any>, res: Response, next: NextFunction) {\n  const filter: Filter<Report> = {}\n  if (req.query.type) {\n    filter.type = req.query.type as ReportTypeEnum\n  }\n\n  if (req.query.userID) {\n    filter.user_id = new ObjectId(req.query.userID as string)\n  }\n\n  if (req.query.date) {\n    const start = new Date(req.query.date as string)\n    const end = new Date(start)\n    end.setUTCHours(23, 59, 59, 999)\n\n    filter.created_at = { $gte: start, $lte: end }\n  }\n\n  await sendPaginatedResponse(res, next, databaseService.reports, req.query, filter)\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/controllers/suppliers.controllers.ts:\n"
      },
      {
        "text": "import type { NextFunction, Request, Response } from 'express'\nimport type { ParamsDictionary } from 'express-serve-static-core'\n\nimport { ObjectId } from 'mongodb'\n\nimport { SupplierStatus } from '~/constants/enums'\nimport type {\n  CreateSupplierReqBody,\n  GetSupplierReqQuery,\n  UpdateSupplierReqBody\n} from '~/models/requests/suppliers.request'\n\nimport HTTP_STATUS from '~/constants/http-status'\nimport { SUPPLIER_MESSAGE } from '~/constants/messages'\nimport { ErrorWithStatus } from '~/models/errors'\nimport databaseService from '~/services/database.services'\nimport supplierService from '~/services/supplier.services'\n\nexport async function createSupplierController(req: Request<any, any, CreateSupplierReqBody>, res: Response) {\n  const result = await supplierService.createSupplier({\n    payload: req.body\n  })\n\n  res.json({\n    message: SUPPLIER_MESSAGE.CREATE_SUCCESS,\n    result\n  })\n}\n\nexport async function updateSupplierController(\n  req: Request<ParamsDictionary, any, UpdateSupplierReqBody>,\n  res: Response\n) {\n  const supplierID = req.params.id\n\n  const result = await supplierService.updateSupplier({ id: supplierID.toString(), payload: req.body })\n\n  res.json({\n    message: SUPPLIER_MESSAGE.UPDATE_SUCCESS,\n    result\n  })\n}\n\nexport async function changeSupplierStatusController(req: Request<ParamsDictionary, any, any>, res: Response) {\n  const supplierID = req.params.id\n  const { newStatus } = req.body\n\n  const result = await supplierService.updateStatus({\n    id: supplierID.toString(),\n    newStatus: newStatus as SupplierStatus\n  })\n\n  res.json({\n    message: SUPPLIER_MESSAGE.UPDATE_SUCCESS,\n    result\n  })\n}\n\nexport async function getByIdController(req: Request<ParamsDictionary, any, any>, res: Response) {\n  const supplierID = req.params.id\n\n  const result = await databaseService.suppliers.findOne({ _id: new ObjectId(supplierID) })\n  if (!result) {\n    throw new ErrorWithStatus({\n      message: SUPPLIER_MESSAGE.SUPPLIER_NOT_FOUND.replace('%s', supplierID),\n      status: HTTP_STATUS.NOT_FOUND\n    })\n  }\n\n  res.json({\n    message: SUPPLIER_MESSAGE.GET_BY_ID_SUCCESS.replace('%s', supplierID),\n    result\n  })\n}\n\nexport async function getAllSupplierStatController(req: Request<any, any, any>, res: Response) {\n  const result = await supplierService.getAllSupplierBikeStats()\n\n  res.json({\n    message: SUPPLIER_MESSAGE.GET_STATS_SUCCESS,\n    result\n  })\n}\n\nexport async function getSupplierStatController(req: Request<ParamsDictionary, any, any>, res: Response) {\n  const supplierID = req.params.id\n  const result = await supplierService.getSupplierBikeStats(supplierID)\n\n  res.json({\n    message: SUPPLIER_MESSAGE.GET_STATS_SUCCESS_BY_ID.replace('%s', supplierID),\n    result\n  })\n}\n\nexport async function getAllSupplierController(\n  req: Request<ParamsDictionary, any, any, GetSupplierReqQuery>,\n  res: Response,\n  next: NextFunction\n) {\n  const query = req.query\n\n  await supplierService.getAllSupplier(res, next, query)\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/controllers/users.controllers.ts:\n"
      },
      {
        "text": "import type { NextFunction, Request, Response } from \"express\";\nimport type { ParamsDictionary } from \"express-serve-static-core\";\n\nimport { ObjectId } from \"mongodb\";\n\nimport type { ChangePasswordReqBody, LoginReqBody, LogoutReqBody, RefreshTokenReqBody, RegisterReqBody, resetPasswordReqBody, TokenPayLoad, VerifyEmailReqBody } from \"~/models/requests/users.requests\";\nimport type User from \"~/models/schemas/user.schema\";\n\nimport { UserVerifyStatus } from \"~/constants/enums\";\nimport HTTP_STATUS from \"~/constants/http-status\";\nimport { USERS_MESSAGES } from \"~/constants/messages\";\nimport { ErrorWithStatus } from \"~/models/errors\";\nimport databaseService from \"~/services/database.services\";\nimport usersService from \"~/services/users.services\";\n\nexport async function loginController(req: Request<ParamsDictionary, any, LoginReqBody>, res: Response) {\n  const user = req.user as User;\n  const user_id = user._id as ObjectId;\n\n  const result = await usersService.login({\n    user_id: user_id.toString(),\n    verify: user.verify,\n  });\n\n  res.json({\n    message: USERS_MESSAGES.LOGIN_SUCCESS,\n    result,\n  });\n}\n\nexport async function registerController(req: Request<ParamsDictionary, any, RegisterReqBody>, res: Response) {\n  const result = await usersService.register(req.body);\n  res.json({\n    message: USERS_MESSAGES.REGISTER_SUCCESS,\n    result,\n  });\n}\n\nexport async function logoutController(req: Request<ParamsDictionary, any, LogoutReqBody>, res: Response) {\n  const { refresh_token } = req.body;\n  const result = await usersService.logout(refresh_token);\n  res.json(result);\n}\n\nexport async function forgotPasswordController(req: Request, res: Response) {\n  const { _id, email, fullname, verify } = req.user as User;\n  const result = await usersService.forgotPassword({\n    user_id: (_id as ObjectId).toString(),\n    email,\n    fullname,\n    verify,\n  });\n  res.json(result);\n}\n\nexport async function verifyForgotPasswordTokenController(req: Request, res: Response) {\n  res.json({\n    message: USERS_MESSAGES.VERIFY_FORGOT_PASSWORD_TOKEN_SUCCESS,\n  });\n}\n\nexport async function resetPasswordController(req: Request<ParamsDictionary, any, resetPasswordReqBody>, res: Response) {\n  const { user_id } = req.decoded_forgot_password_token as TokenPayLoad;\n  const { password } = req.body;\n  const result = await usersService.resetPassword({ user_id, password });\n  res.json(result);\n}\n\nexport async function emailVerifyTokenController(req: Request<ParamsDictionary, any, VerifyEmailReqBody>, res: Response) {\n  const { user_id } = req.decoded_email_verify_token as TokenPayLoad;\n  const user = await databaseService.users.findOne({ _id: new ObjectId(user_id) });\n  if (user === null) {\n    throw new ErrorWithStatus({\n      message: USERS_MESSAGES.USER_NOT_FOUND,\n      status: 404,\n    });\n  }\n  if (user.verify === UserVerifyStatus.Verified && user.email_verify_token === \"\") {\n    res.json({\n      message: USERS_MESSAGES.EMAIL_ALREADY_VERIFIED_BEFORE,\n    });\n  }\n  if (user.email_verify_token !== (req.body.email_verify_token as string)) {\n    throw new ErrorWithStatus({\n      message: USERS_MESSAGES.EMAIL_VERIFY_TOKEN_IS_INCORRECT,\n      status: HTTP_STATUS.UNAUTHORIZED,\n    });\n  }\n  const result = await usersService.verifyEmail(user_id);\n  res.json({\n    message: USERS_MESSAGES.VERIFY_EMAIL_SUCCESS,\n    result,\n  });\n}\n\nexport async function resendEmailVerifyController(req: Request, res: Response) {\n  const { user_id } = (req as Request).decoded_authorization as TokenPayLoad;\n  const user = await databaseService.users.findOne({ _id: new ObjectId(user_id) });\n  if (user === null) {\n    throw new ErrorWithStatus({\n      message: USERS_MESSAGES.USER_NOT_FOUND,\n      status: 404,\n    });\n  }\n  if (user.verify === UserVerifyStatus.Verified && user.email_verify_token === \"\") {\n    return res.json({\n      message: USERS_MESSAGES.EMAIL_ALREADY_VERIFIED_BEFORE,\n    });\n  }\n  if (user.verify === UserVerifyStatus.Banned) {\n    throw new ErrorWithStatus({\n      message: USERS_MESSAGES.USER_BANNED,\n      status: HTTP_STATUS.FORBIDDEN,\n    });\n  }\n  const result = await usersService.resendEmailVerify(user_id);\n  res.json(result);\n}\n\nexport async function changePasswordController(req: Request<ParamsDictionary, any, ChangePasswordReqBody>, res: Response, _next: NextFunction) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad;\n  const { password } = req.body;\n  const result = await usersService.changePassword(user_id, password);\n  res.json(result);\n}\n\nexport async function getMeController(req: Request, res: Response) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad;\n  const user = await usersService.getMe(user_id);\n  res.json({\n    message: USERS_MESSAGES.GET_ME_SUCCESS,\n    result: user,\n  });\n}\n\nexport async function updateMeController(req: Request, res: Response) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad;\n  const { body } = req;\n  const result = await usersService.updateMe(user_id, body);\n  res.json({\n    message: USERS_MESSAGES.UPDATE_ME_SUCCESS,\n    result,\n  });\n}\n\nexport async function refreshController(req: Request<ParamsDictionary, any, RefreshTokenReqBody>, res: Response, _next: NextFunction) {\n  const { refresh_token } = req.body;\n  const { user_id, verify, exp } = req.decoded_refresh_token as TokenPayLoad;\n  const result = await usersService.refreshToken({ user_id, verify, refresh_token, exp });\n  res.json({\n    message: USERS_MESSAGES.REFRESH_TOKEN_SUCCESS,\n    result,\n  });\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/controllers/wallet.controllers.ts:\n"
      },
      {
        "text": "import type { NextFunction, Request, Response } from 'express'\n\nimport type {\n  CreateWithdrawlReqBody,\n  DecreaseBalanceWalletReqBody,\n  GetAllRefundReqQuery,\n  GetTransactionReqQuery,\n  GetWithdrawReqQuery,\n  IncreaseBalanceWalletReqBody,\n  UpdateWithdrawStatusReqBody\n} from '~/models/requests/wallets.requests'\n\nimport { WALLETS_MESSAGE, WITHDRAWLS_MESSAGE } from '~/constants/messages'\nimport walletService from '~/services/wallets.services'\nimport { ParamsDictionary } from 'express-serve-static-core'\nimport { CreateRefundReqBody } from '~/models/requests/refunds.request'\nimport { TokenPayLoad } from '~/models/requests/users.requests'\n\nexport async function createWalletController(req: Request<any, any, any>, res: Response) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  const result = await walletService.createWallet(user_id)\n\n  res.json({\n    message: WALLETS_MESSAGE.CREATE_SUCCESS,\n    result\n  })\n}\n\nexport async function increateBalanceController(req: Request<any, any, IncreaseBalanceWalletReqBody>, res: Response) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  const result = await walletService.increaseBalance({ payload: req.body })\n\n  res.json({\n    message: WALLETS_MESSAGE.INCREASE_BALANCE_SUCCESS.replace('%s', `${req.body.amount}`).replace('%s', user_id),\n    result\n  })\n}\n\nexport async function decreaseBalanceController(req: Request<any, any, DecreaseBalanceWalletReqBody>, res: Response) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  const result = await walletService.decreaseBalance({ payload: req.body })\n\n  res.json({\n    message: WALLETS_MESSAGE.DECRESE_BALANCE_SUCCESS.replace('%s', `${req.body.amount}`).replace('%s', user_id),\n    result\n  })\n}\n\nexport async function changeStatusController(req: Request<ParamsDictionary, any, any>, res: Response) {\n  const { id } = req.params\n  console.log(id)\n\n  const result = await walletService.changeWalletStatus(id, req.body.newStatus)\n\n  res.json({\n    message: WALLETS_MESSAGE.CHANGE_STATUS_SUCCESS.replace('%s', id),\n    result\n  })\n}\n\nexport async function getUserWalletController(req: Request<any, any, any>, res: Response) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  const result = await walletService.getUserWallet(user_id)\n\n  res.json({\n    message: WALLETS_MESSAGE.GET_USER_WALLET_SUCCESS.replace('%s', user_id),\n    result\n  })\n}\n\nexport async function getUserTransactionWalletController(\n  req: Request<ParamsDictionary, any, any, GetTransactionReqQuery>,\n  res: Response,\n  next: NextFunction\n) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  const query = req.query\n\n  await walletService.getWalletHistory(res, next, query, user_id)\n}\n\nexport async function getTransactionDetailController(req: Request<any, any, any>, res: Response) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  const transaction_id = req.params.id as string\n\n  const result = await walletService.getTransactionDetail(user_id, transaction_id)\n\n  res.json({\n    message: WALLETS_MESSAGE.TRANSACTION_DETAIL_SUCCESS,\n    result\n  })\n}\n\nexport async function refundController(req: Request<any, any, CreateRefundReqBody>, res: Response) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  const result = await walletService.refundTransaction(user_id, req.body)\n\n  res.json({\n    message: WALLETS_MESSAGE.CREATE_REFUND_SUCCESS,\n    result\n  })\n}\n\nexport async function updateRefundController(req: Request<ParamsDictionary, any, any>, res: Response) {\n  const { id } = req.params\n  const newStatus = req.body.newStatus\n\n  const result = await walletService.updateStatusRefund(id.toString(), newStatus)\n\n  res.json({\n    message: WALLETS_MESSAGE.UPDATE_REFUND_SUCCESS,\n    result\n  })\n}\n\nexport async function createWithdrawalRequestController(\n  req: Request<ParamsDictionary, any, CreateWithdrawlReqBody>,\n  res: Response\n) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  const result = await walletService.createWithdrawal(user_id, req.body)\n\n  res.json({\n    message: WALLETS_MESSAGE.CREATE_WITHDRAWL_SUCCESS,\n    result\n  })\n}\n\nexport async function updateWithdrawStatusController(\n  req: Request<ParamsDictionary, any, UpdateWithdrawStatusReqBody>,\n  res: Response\n) {\n  const { id } = req.params\n\n  const result = await walletService.updateWithDrawStatus(id, req.body)\n\n  res.json({\n    message: WITHDRAWLS_MESSAGE.UPDATE_SUCCESS.replace('%s', id),\n    result\n  })\n}\n\nexport async function getWithdrawDetailController(req: Request<ParamsDictionary, any, any>, res: Response) {\n  const { id } = req.params\n  const { role, user_id } = req.decoded_authorization as TokenPayLoad\n\n  const result = await walletService.getWithdrawRequestDetail(id, role, user_id)\n\n  res.json({\n    message: WITHDRAWLS_MESSAGE.GET_DETAIL_SUCCESS,\n    result\n  })\n}\n\nexport async function getAllWithDrawController(\n  req: Request<ParamsDictionary, any, any, GetWithdrawReqQuery>,\n  res: Response,\n  next: NextFunction\n) {\n  const query = req.query\n\n  await walletService.getAllWithDrawRequest(res, next, query)\n}\n\nexport async function getAllUserWithdrawController(\n  req: Request<ParamsDictionary, any, any, GetWithdrawReqQuery>,\n  res: Response,\n  next: NextFunction\n) {\n  const query = req.query\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n\n  await walletService.getAllUserWithDrawRequest(res, next, query, user_id)\n}\n\nexport async function getAllRefundController(\n  req: Request<ParamsDictionary, any, any, GetAllRefundReqQuery>,\n  res: Response,\n  next: NextFunction\n) {\n  const query = req.query\n\n  await walletService.getAllRefund(res, next, query)\n}\n\nexport async function getAllUserRefundController(\n  req: Request<ParamsDictionary, any, any, GetAllRefundReqQuery>,\n  res: Response,\n  next: NextFunction\n) {\n  const { user_id } = req.decoded_authorization as TokenPayLoad\n  const query = req.query\n\n  await walletService.getAllUserRefund(res, next, query, user_id)\n}\n\nexport async function getRefundDetailController(\n  req: Request<ParamsDictionary, any, any, GetAllRefundReqQuery>,\n  res: Response\n) {\n  const { role, user_id } = req.decoded_authorization as TokenPayLoad\n  const { id } = req.params\n\n  const result = await walletService.getRefundDetail(id, role, user_id)\n\n  res.json({\n    message: WALLETS_MESSAGE.REFUND_DETAIL_SUCCESS,\n    result\n  })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/AuthSuccessResponse.yaml:\n"
      },
      {
        "text": "type: object\nproperties:\n  message:\n    type: string\n    example: 'Login successful'\n  result:\n    type: object\n    properties:\n      access_token:\n        type: string\n        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjA5...'\n      refresh_token:\n        type: string\n        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjA5...'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/Bike.yaml:\n"
      },
      {
        "text": "type: object\ndescription: Represents a bike object.\nproperties:\n  _id:\n    type: string\n    format: mongoId\n  station_id:\n    type: string\n    format: mongoId\n    nullable: true\n    description: ID of the station where the bike is located. Null if rented.\n  chip_id:\n    type: string \n    description: \"The unique identifier of the bike's chip.\" \n    example: \"CHIP123456789\"\n  status:\n    type: string\n    enum: [\"AVAILABLE\", \"BOOKED\", \"BROKEN\", \"RESERVED\", \"MAINTAINED\", \"UNAVAILABLE\"]\n    example: \"AVAILABLE\"\n  supplier_id:\n    type: string\n    format: mongoId\n    nullable: true\n    description: ID of the supplier for maintenance.\n  created_at:\n    type: string\n    format: date-time\n  updated_at:\n    type: string\n    format: date-time"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/BikeStatus.yaml:\n"
      },
      {
        "text": "type: string\ndescription: \"Trạng thái của xe đạp\"\nenum: \n  - \"CÓ SẴN\"\n  - \"ĐANG ĐƯỢC THUÊ\"\n  - \"BỊ HỎNG\"\n  - \"ĐÃ ĐẶT TRƯỚC\"\n  - \"ĐANG BẢO TRÌ\"\n  - \"KHÔNG CÓ SẴN\"\nexample: \"CÓ SẴN\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/CancelRentalReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - reason\nproperties:\n  bikeStatus:\n    $ref: './BikeStatus.yaml'\n    description: The new status to set for the bike after cancellation (e.g., 'AVAILABLE', 'BROKEN'). Optional.\n  reason:\n    type: string\n    description: The reason for cancelling the rental.\n    example: \"Customer requested cancellation due to personal emergency.\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/ChangePasswordReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - old_password\n  - password\n  - confirm_password\nproperties:\n  old_password:\n    type: string\n    description: The user's current password.\n    example: 'oldPassword123'\n  password:\n    type: string\n    description: The user's new password (must be strong).\n    example: 'newStrongPassword123!'\n  confirm_password:\n    type: string\n    description: Confirmation of the new password.\n    example: 'newStrongPassword123!'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/ChangeSupplierStatusReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - newStatus\nproperties:\n  newStatus:\n    type: string\n    description: \"The new status for the supplier.\"\n    enum: [\"HOẠT ĐỘNG\", \"NGƯNG HOẠT ĐỘNG\", \"CHẤM DỨT HỢP ĐỒNG\"]\n    example: \"NGƯNG HOẠT ĐỘNG\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/CreateBikeReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - station_id\nproperties:\n  station_id:\n    type: string\n    format: mongoId\n    description: The ID of the station to which the bike belongs.\n  chip_id:\n    type: string\n    description: \"The unique identifier of the bike's chip.\"\n    example: \"CHIP123456789\"\n  status:\n    $ref: './Bike.yaml#/properties/status'\n  supplier_id:\n    type: string\n    format: mongoId\n    description: The ID of the supplier. Optional."
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/CreateRefundReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - transaction_id\n  - amount\nproperties:\n  transaction_id:\n    type: string\n    format: mongoId\n    description: The ID of the transaction for which the refund is requested.\n  amount:\n    type: number\n    description: The amount to be refunded. Must be a positive number.\n    example: 50000.00"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/CreateRentalReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - bike_id\nproperties:\n  bike_id:\n    type: string\n    format: mongoId\n    description: The ID of the bike to be rented."
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/CreateReportReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - type\n  - message\nproperties:\n  type:\n    $ref: './ReportType.yaml'\n  message:\n    type: string\n    maxLength: 250\n    example: \"The bike's front tire is flat.\"\n  bike_id:\n    type: string\n    format: mongoId\n    description: \"Required if type is 'XE HƯ HỎNG' or 'XE BẨN'.\"\n  station_id:\n    type: string\n    format: mongoId\n    description: \"Required for station-related report types.\"\n  rental_id:\n    type: string\n    format: mongoId\n    description: \"Optional, to link the report to a specific rental session.\"\n  location:\n    $ref: './GeoLocation.yaml'\n    description: \"Required for SOS report types.\"\n  files:\n    type: array\n    items:\n      type: string\n      format: binary\n    description: \"Array of files (images/videos) to upload with the report.\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/CreateSupplierReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - name\n  - address\n  - phone_number\n  - contract_fee\nproperties:\n  name:\n    type: string\n    description: \"Name of the supplier.\"\n    maxLength: 255\n    example: \"Công ty TNHH Xe Đạp Toàn Cầu\"\n  address:\n    type: string\n    description: \"Address of the supplier.\"\n    maxLength: 250\n    example: \"456 Đường XYZ, Quận 2, TP.HCM\"\n  phone_number:\n    type: string\n    description: \"Phone number of the supplier (must be 10 digits).\"\n    pattern: '^\\d{10}$'\n    example: \"0912345678\"\n  contract_fee:\n    type: number\n    format: decimal\n    description: \"Contract fee with up to 2 decimal places.\"\n    example: 25000.75"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/CreateWithdrawalReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - amount\n  - account\nproperties:\n  amount:\n    type: number\n    example: 200000\n  account:\n    type: string\n    description: \"Bank account information for withdrawal.\"\n    example: \"Techcombank - 190123456789 - NGUYEN VAN B\"\n  note:\n    type: string\n    nullable: true\n    example: \"Please process quickly.\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/DecreaseBalanceReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - user_id\n  - amount\n  - fee\n  - message\nproperties:\n  user_id:\n    type: string\n    format: mongoId\n  amount:\n    type: number\n    example: 50000\n  fee:\n    type: number\n    example: 0\n  description:\n    type: string\n    nullable: true\n    example: \"Admin adjustment\"\n  transaction_hash:\n    type: string\n    nullable: true\n  message:\n    type: string\n    example: \"Adjustment successful\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/EndRentalByAdminOrStaffReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - end_station\n  - reason\nproperties:\n  end_station:\n    type: string\n    format: mongoId\n    description: The ID of the station where the bike is being returned.\n  end_time:\n    type: string\n    format: date-time\n    description: The time the rental is being ended. Optional, defaults to current time.\n  reason:\n    type: string\n    description: The reason for ending the rental session.\n    example: \"Staff assisted user to end rental session.\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/ErrorServerResponse.yaml:\n"
      },
      {
        "text": "type: object\nproperties:\n  message:\n    type: string\n    example: 'Internal Server Error'\n  errorInfor:\n    type: object\n    nullable: true\n    description: 'Additional error information (excluding stack trace).'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/ErrorStatusResponse.yaml:\n"
      },
      {
        "text": "type: object\nproperties:\n  message:\n    type: string\n    example: 'User not found'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/ErrorValidationResponse.yaml:\n"
      },
      {
        "text": "type: object\nproperties:\n  message:\n    type: string\n    example: 'Validation error'\n  errors:\n    type: object\n    additionalProperties:\n      type: object\n      properties:\n        msg:\n          type: string\n          example: 'Email is required'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/ForgotPasswordReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - email\nproperties:\n  email:\n    type: string\n    format: email\n    example: 'john.doe@example.com'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/GeoLocation.yaml:\n"
      },
      {
        "text": "type: object\ndescription: \"Represents a geographical location with latitude and longitude.\"\nproperties:\n  latitude:\n    type: number\n    format: double\n    example: 10.7769\n  longitude:\n    type: number\n    format: double\n    example: 106.7009"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/GetMeSuccessResponse.yaml:\n"
      },
      {
        "text": "type: object\nproperties:\n  message:\n    type: string\n    example: 'Get my profile successfully'\n  result:\n    $ref: './User.yaml'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/IncreaseBalanceReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - user_id\n  - amount\n  - fee\n  - description\n  - message\nproperties:\n  user_id:\n    type: string\n    format: mongoId\n  amount:\n    type: number\n    example: 100000\n  fee:\n    type: number\n    example: 0\n  description:\n    type: string\n    example: \"Admin top-up for user\"\n  transaction_hash:\n    type: string\n    nullable: true\n  message:\n    type: string\n    example: \"Top-up successful\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/LoginReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - email\n  - password\nproperties:\n  email:\n    type: string\n    format: email\n    example: 'john.doe@example.com'\n  password:\n    type: string\n    format: password\n    minLength: 8\n    maxLength: 30\n    example: 'Str0ngP@sswOrd'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/LoginSuccessResponse.yaml:\n"
      },
      {
        "text": "type: object\nproperties:\n  message:\n    type: string\n    example: \"Login successful\"\n  result:\n    $ref: './AuthSuccessResponse.yaml'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/LogoutReqBody.yaml:\n"
      },
      {
        "text": "type: object\nproperties:\n  refresh_token:\n    type: string\n    description: The refresh token issued to the user during login, which will be invalidated upon logout.\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjZhMTIzNDU2Nzg5MGFiY2RlZjEyMzQ1IiwidG9rZW5fdHlwZSI6InJlZnJlc2hfdG9rZW4iLCJpYXQiOjE3MTg1MjAxMDAsImV4cCI6MTcxOTEyNDkwMH0.abcdefg123456'\nrequired:\n  - refresh_token"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/MessageResponse.yaml:\n"
      },
      {
        "text": "type: object\nproperties:\n  message:\n    type: string\n    example: 'Operation was successful.'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/PaginatedResponse.yaml:\n"
      },
      {
        "text": "type: object\nproperties:\n  pagination:\n    type: object\n    properties:\n      limit:\n        type: integer\n        example: 10\n      currentPage:\n        type: integer\n        example: 1\n      totalPages:\n        type: integer\n        example: 5\n      totalRecords:\n        type: integer\n        example: 48"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/RefreshTokenReqBody.yaml:\n"
      },
      {
        "text": "type: object\nproperties:\n  refresh_token:\n    type: string\n    description: The valid refresh token that was provided upon login.\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjY2NTZkYmRjYj...'\nrequired:\n  - refresh_token"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/RefreshTokenSuccessResponse.yaml:\n"
      },
      {
        "text": "type: object\nproperties:\n  message:\n    type: string\n    example: 'Refresh token successful'\n  result:\n    $ref: './AuthSuccessResponse.yaml'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/Refund.yaml:\n"
      },
      {
        "text": "type: object\ndescription: Represents a refund request object.\nproperties:\n  _id:\n    type: string\n    format: mongoId\n  transaction_id:\n    type: string\n    format: mongoId\n    description: The ID of the transaction being refunded.\n  user_id:\n    type: string\n    format: mongoId\n    description: The ID of the user who requested the refund.\n  amount:\n    type: number\n    format: decimal\n    description: The amount requested for refund.\n    example: 50000.00\n  status:\n    $ref: './RefundStatus.yaml'\n  created_at:\n    type: string\n    format: date-time\n  updated_at:\n    type: string\n    format: date-time"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/RefundStatus.yaml:\n"
      },
      {
        "text": "type: string\ndescription: \"The status of a refund request.\"\nenum:\n  - \"ĐANG CHỜ XỬ LÝ\"\n  - \"ĐÃ DUYỆT\"\n  - \"TỪ CHỐI\"\n  - \"ĐÃ HOÀN THÀNH\"\nexample: \"ĐANG CHỜ XỬ LÝ\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/RegisterReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - fullname\n  - email\n  - password\n  - confirm_password\nproperties:\n  fullname:\n    type: string\n    minLength: 1\n    maxLength: 50\n    example: \"Nguyen Van A\"\n  email:\n    type: string\n    format: email\n    example: \"user@example.com\"\n  password:\n    type: string\n    format: password\n    minLength: 8\n    maxLength: 30\n    example: \"password123\"\n  confirm_password:\n    type: string\n    format: password\n    minLength: 8\n    maxLength: 30\n    example: \"password123\"\n  avatar:\n    type: string\n    format: uri\n    description: \"Optional avatar URL.\"\n    example: \"https://example.com/avatar.jpg\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/RegisterSuccessResponse.yaml:\n"
      },
      {
        "text": "type: object\nproperties:\n  message:\n    type: string\n    example: \"Register successful\"\n  result:\n    type: object\n    properties:\n      access_token:\n        type: string\n        example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjA5...\"\n      refresh_token:\n        type: string\n        example: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjA5...\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/Rental.yaml:\n"
      },
      {
        "text": "type: object\ndescription: Represents a rental session object.\nproperties:\n  _id:\n    type: string\n    format: mongoId\n  user_id:\n    type: string\n    format: mongoId\n  bike_id:\n    type: string\n    format: mongoId\n  start_station:\n    type: string\n    format: mongoId\n  end_station:\n    type: string\n    format: mongoId\n    nullable: true\n  start_time:\n    type: string\n    format: date-time\n  end_time:\n    type: string\n    format: date-time\n    nullable: true\n  duration:\n    type: integer\n    description: Duration of the rental in minutes.\n    example: 60\n  total_price:\n    type: number\n    format: decimal\n    example: 10000.00\n  status:\n    $ref: './RentalStatus.yaml'\n  created_at:\n    type: string\n    format: date-time\n  updated_at:\n    type: string\n    format: date-time"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/RentalStatus.yaml:\n"
      },
      {
        "text": "type: string\ndescription: \"The status of a rental session.\"\nenum:\n  - \"ĐANG THUÊ\"\n  - \"HOÀN THÀNH\"\n  - \"ĐÃ HỦY\"\n  - \"ĐÃ ĐẶT TRƯỚC\"\nexample: \"ĐANG THUÊ\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/Report.yaml:\n"
      },
      {
        "text": "type: object\ndescription: Represents a user-submitted report.\nproperties:\n  _id:\n    type: string\n    format: mongoId\n  user_id:\n    type: string\n    format: mongoId\n    description: The ID of the user who submitted the report.\n  bike_id:\n    type: string\n    format: mongoId\n    nullable: true\n    description: The ID of the bike related to the report, if any.\n  station_id:\n    type: string\n    format: mongoId\n    nullable: true\n    description: The ID of the station related to the report, if any.\n  rental_id:\n    type: string\n    format: mongoId\n    nullable: true\n    description: The ID of the rental session related to the report, if any.\n  assignee_id:\n    type: string\n    format: mongoId\n    nullable: true\n    description: The ID of the staff member assigned to handle the report.\n  media_urls:\n    type: array\n    items:\n      type: string\n      format: uri\n    description: A list of URLs for media files (images/videos) attached to the report.\n  location:\n    $ref: './GeoLocation.yaml'\n    nullable: true\n  priority:\n    $ref: './ReportPriority.yaml'\n  type:\n    $ref: './ReportType.yaml'\n  message:\n    type: string\n    description: The detailed message or description of the report.\n  status:\n    $ref: './ReportStatus.yaml'\n  created_at:\n    type: string\n    format: date-time\n  updated_at:\n    type: string\n    format: date-time"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/ReportPriority.yaml:\n"
      },
      {
        "text": "type: string\ndescription: \"The priority level of the report.\"\nenum:\n  - \"THẤP\"\n  - \"BÌNH THƯỜNG\"\n  - \"CAO\"\n  - \"KHẨN CẤP\"\nexample: \"BÌNH THƯỜNG\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/ReportStatus.yaml:\n"
      },
      {
        "text": "type: string\ndescription: \"The status of a report.\"\nenum:\n  - \"ĐANG CHỜ XỬ LÝ\"\n  - \"ĐANG XỬ LÝ\"\n  - \"ĐÃ GIẢI QUYẾT\"\n  - \"ĐÃ HỦY\"\nexample: \"ĐANG CHỜ XỬ LÝ\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/ReportType.yaml:\n"
      },
      {
        "text": "type: string\ndescription: \"The type or category of the report.\"\nenum:\n  - \"XE HƯ HỎNG\"\n  - \"XE BẨN\"\n  - \"TRẠM ĐẦY\"\n  - \"TRẠM KHÔNG NHẬN XE\"\n  - \"TRẠM NGOẠI TUYẾN\"\n  - \"CẤP CỨU TAI NẠN\"\n  - \"CẤP CỨU SỨC KHỎE\"\n  - \"CẤP CỨU NGUY HIỂM\"\n  - \"KHÁC\"\nexample: \"XE HƯ HỎNG\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/ResetPasswordReqBody.yaml:\n"
      },
      {
        "text": "type: object\ndescription: Requires forgot_password_token alongside new password details.\nrequired:\n  - forgot_password_token\n  - password\n  - confirm_password\nproperties:\n  forgot_password_token:\n    type: string\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'\n  password:\n    type: string\n    format: password\n    minLength: 8\n    maxLength: 30\n    example: 'NewStr0ngP@sswOrd'\n  confirm_password:\n    type: string\n    format: password\n    minLength: 8\n    maxLength: 30\n    example: 'NewStr0ngP@sswOrd'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/Supplier.yaml:\n"
      },
      {
        "text": "type: object\ndescription: Represents a supplier object.\nproperties:\n  _id:\n    type: string\n    format: mongoId\n  name:\n    type: string\n    example: \"Nhà cung cấp Xe Đạp Xanh\"\n  contact_info:\n    type: object\n    properties:\n      address:\n        type: string\n        example: \"123 Đường ABC, Quận 1, TP.HCM\"\n      phone_number:\n        type: string\n        example: \"0987654321\"\n  contract_fee:\n    type: number\n    format: decimal\n    example: 15000.50\n  status:\n    type: string\n    description: \"The status of the supplier contract.\"\n    enum: [\"HOẠT ĐỘNG\", \"NGƯNG HOẠT ĐỘNG\", \"CHẤM DỨT HỢP ĐỒNG\"]\n    example: \"HOẠT ĐỘNG\"\n  created_at:\n    type: string\n    format: date-time"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/Transaction.yaml:\n"
      },
      {
        "text": "type: object\ndescription: \"Represents a wallet transaction.\"\nproperties:\n  _id:\n    type: string\n    format: mongoId\n  wallet_id:\n    type: string\n    format: mongoId\n  amount:\n    type: number\n    format: decimal\n    example: 50000.00\n  fee:\n    type: number\n    format: decimal\n    example: 0\n  description:\n    type: string\n    example: \"Nạp tiền vào ví\"\n  transaction_hash:\n    type: string\n    example: \"TX123456789\"\n  type:\n    $ref: './TransactionType.yaml'\n  status:\n    $ref: './TransactionStatus.yaml'\n  created_at:\n    type: string\n    format: date-time"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/TransactionStatus.yaml:\n"
      },
      {
        "text": "type: string\ndescription: \"The status of a transaction.\"\nenum:\n  - \"ĐANG CHỜ XỬ LÝ\"\n  - \"THÀNH CÔNG\"\n  - \"THẤT BẠI\"\n  - \"ĐÃ HỦY\"\nexample: \"THÀNH CÔNG\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/TransactionType.yaml:\n"
      },
      {
        "text": "type: string\ndescription: \"The type of a transaction.\"\nenum:\n  - \"NẠP TIỀN\"\n  - \"THANH TOÁN\"\n  - \"RÚT TIỀN\"\n  - \"HOÀN TIỀN\"\nexample: \"NẠP TIỀN\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/UpdateBikeReqBody.yaml:\n"
      },
      {
        "text": "type: object\ndescription: \"Fields to update for a bike. All fields are optional.\"\nproperties:\n  chip_id:\n    type: string\n    description: \"The new unique identifier for the bike's chip.\"\n    example: \"CHIP987654321\"\n  station_id:\n    type: string\n    format: mongoId\n    description: The new station ID for the bike.\n  status:\n    $ref: './Bike.yaml#/properties/status'\n  supplier_id:\n    type: string\n    format: mongoId\n    description: The new supplier ID for the bike."
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/UpdateMeReqBody.yaml:\n"
      },
      {
        "text": "type: object\ndescription: \"Fields to update for the user's profile. All fields are optional.\"\nproperties:\n  fullname:\n    type: string\n    description: \"The user's full name.\"\n    example: 'Nguyen Van B'\n  location:\n    type: string\n    description: \"The user's location.\"\n    example: 'Ho Chi Minh, Vietnam'\n  username:\n    type: string\n    description: 'A new unique username for the user. Must not be already taken by another user.'\n    example: 'nguyenvana_2025'\n  avatar:\n    type: string\n    description: \"A URL pointing to the user's new avatar image.\"\n    format: uri\n    example: 'https://example.com/avatars/new_avatar.png'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/UpdateRefundStatusReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - newStatus\nproperties:\n  newStatus:\n    $ref: './RefundStatus.yaml'\n    description: The new status for the refund request. Allowed values are 'ĐÃ DUYỆT', 'TỪ CHỐI', 'ĐÃ HOÀN THÀNH'."
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/UpdateRentalReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - reason\nproperties:\n  end_station:\n    type: string\n    format: mongoId\n    description: The ID of the station where the bike was returned. Optional.\n  end_time:\n    type: string\n    format: date-time\n    description: The time the rental ended. Optional.\n  status:\n    $ref: './RentalStatus.yaml'\n  total_price:\n    type: number\n    format: decimal\n    description: The total price of the rental. Optional.\n  reason:\n    type: string\n    description: The reason for the update.\n    example: \"Admin adjusted rental details due to system error.\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/UpdateReportReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - newStatus\nproperties:\n  newStatus:\n    $ref: './ReportStatus.yaml'\n  staff_id:\n    type: string\n    format: mongoId\n    description: \"The ID of the staff member to assign the report to. Required when changing status to 'ĐANG XỬ LÝ'.\"\n  priority:\n    $ref: './ReportPriority.yaml'\n    description: \"The priority of the report. Required when changing status to 'ĐANG XỬ LÝ'.\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/UpdateSupplierReqBody.yaml:\n"
      },
      {
        "text": "type: object\ndescription: \"Fields to update for a supplier. All fields are optional.\"\nproperties:\n  name:\n    type: string\n    description: \"New name for the supplier.\"\n    maxLength: 255\n    example: \"Công ty Cổ phần Xe Đạp Việt Nam\"\n  address:\n    type: string\n    description: \"New address for the supplier.\"\n    maxLength: 250\n    example: \"789 Đường LMN, Quận 3, TP.HCM\"\n  phone_number:\n    type: string\n    description: \"New phone number for the supplier (must be 10 digits).\"\n    pattern: '^\\d{10}$'\n    example: \"0988888888\"\n  contract_fee:\n    type: number\n    format: decimal\n    description: \"New contract fee.\"\n    example: 30000.00"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/UpdateWalletStatusReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - newStatus\nproperties:\n  newStatus:\n    $ref: './WalletStatus.yaml'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/UpdateWithdrawalStatusReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - newStatus\nproperties:\n  newStatus:\n    $ref: './WithdrawalStatus.yaml'\n  reason:\n    type: string\n    nullable: true\n    description: \"Reason is required if status is 'TỪ CHỐI'.\"\n    example: \"Thông tin tài khoản không hợp lệ.\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/User.yaml:\n"
      },
      {
        "text": "type: object\ndescription: \"Represents a user object.\"\nproperties:\n  _id:\n    type: string\n    format: mongoId\n    example: \"60c72b2f9b1d8e001f8e8e8e\"\n  fullname:\n    type: string\n    example: \"Nguyen Van A\"\n  email:\n    type: string\n    format: email\n    example: \"user@example.com\"\n  username:\n    type: string\n    example: \"user12345\"\n  location:\n    type: string\n    example: \"Hanoi, Vietnam\"\n  phone_number:\n    type: string\n    example: \"0987654321\"\n  avatar:\n    type: string\n    format: uri\n    example: \"https://example.com/avatar.png\"\n  verify:\n    type: string\n    description: \"Verification status of the user.\"\n    enum: [\"UNVERIFIED\", \"VERIFIED\", \"BANNED\"]\n    example: \"VERIFIED\"\n  role:\n    type: string\n    description: \"Role of the user.\"\n    enum: [\"USER\", \"STAFF\", \"ADMIN\"]\n    example: \"USER\"\n  created_at:\n    type: string\n    format: date-time\n  updated_at:\n    type: string\n    format: date-time"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/VerifyEmailReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - email_verify_token\nproperties:\n  email_verify_token:\n    type: string\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/VerifyForgotPasswordTokenReqBody.yaml:\n"
      },
      {
        "text": "type: object\nrequired:\n  - forgot_password_token\nproperties:\n  forgot_password_token:\n    type: string\n    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/Wallet.yaml:\n"
      },
      {
        "text": "type: object\ndescription: \"Represents a user's wallet.\"\nproperties:\n  _id:\n    type: string\n    format: mongoId\n  user_id:\n    type: string\n    format: mongoId\n  balance:\n    type: number\n    format: decimal\n    example: 150000.00\n  status:\n    $ref: './WalletStatus.yaml'\n  created_at:\n    type: string\n    format: date-time\n  updated_at:\n    type: string\n    format: date-time"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/WalletStatus.yaml:\n"
      },
      {
        "text": "type: string\ndescription: \"The status of a wallet.\"\nenum:\n  - \"ĐANG HOẠT ĐỘNG\"\n  - \"ĐÃ BỊ ĐÓNG BĂNG\"\nexample: \"ĐANG HOẠT ĐỘNG\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/Withdrawal.yaml:\n"
      },
      {
        "text": "type: object\ndescription: \"Represents a withdrawal request.\"\nproperties:\n  _id:\n    type: string\n    format: mongoId\n  user_id:\n    type: string\n    format: mongoId\n  amount:\n    type: number\n    format: decimal\n    example: 100000.00\n  account:\n    type: string\n    description: \"Bank account information for the withdrawal.\"\n    example: \"Vietcombank - 0123456789 - NGUYEN VAN A\"\n  reason:\n    type: string\n    nullable: true\n    description: \"Reason for rejection, if applicable.\"\n  note:\n    type: string\n    nullable: true\n    description: \"User's note for the request.\"\n  status:\n    $ref: './WithdrawalStatus.yaml'\n  created_at:\n    type: string\n    format: date-time\n  updated_at:\n    type: string\n    format: date-time"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/schemas/WithdrawalStatus.yaml:\n"
      },
      {
        "text": "type: string\ndescription: \"The status of a withdrawal request.\"\nenum:\n  - \"ĐANG CHỜ XỬ LÝ\"\n  - \"ĐÃ DUYỆT\"\n  - \"TỪ CHỐI\"\n  - \"ĐÃ HOÀN THÀNH\"\nexample: \"ĐANG CHỜ XỬ LÝ\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/components/securitySchemes/BearerAuth.yaml:\n"
      },
      {
        "text": "type: http\nscheme: bearer\nbearerFormat: JWT\ndescription: \"Enter JWT access token in the format: Bearer <token>\""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/openapi.yaml:\n"
      },
      {
        "text": "openapi: 3.0.3\ninfo:\n  title: MeBike API\n  version: '1.0.0'\n  description: API for the MeBike application.\n  contact:\n    name: MeBike Team\n    email: nguyennvse173423@fpt.edu.vn\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n\nservers:\n  - url: http://localhost:4000\n    description: Development Server\n  - url: https://mebike.site\n    description: Production Server\n\ntags:\n  - name: Users\n    description: Operations related to user authentication, profile, and management.\n  - name: Bikes\n    description: Operations related to managing bikes.\n  - name: Rentals\n    description: Operations related to bike rentals.\n  - name: Reports\n    description: Operations for user reports and management.\n  - name: Suppliers\n    description: Operations for managing bike suppliers.\n  - name: Wallets\n    description: Operations related to user wallets and transactions.\n  - name: Refunds\n    description: Operations for managing refund requests.\n  - name: Withdrawals\n    description: Operations for managing withdrawal requests.\n  \npaths:\n  $ref: './paths/all-paths.yaml'\n\ncomponents:\n  schemas:\n    # --- Request Body Schemas ---\n    RegisterReqBody:\n      $ref: './components/schemas/RegisterReqBody.yaml'\n    LoginReqBody:\n      $ref: './components/schemas/LoginReqBody.yaml'\n    LogoutReqBody:\n      $ref: './components/schemas/LogoutReqBody.yaml'\n    ForgotPasswordReqBody:\n      $ref: './components/schemas/ForgotPasswordReqBody.yaml'\n    VerifyForgotPasswordTokenReqBody:\n      $ref: './components/schemas/VerifyForgotPasswordTokenReqBody.yaml'\n    ResetPasswordReqBody:\n      $ref: './components/schemas/ResetPasswordReqBody.yaml'\n    VerifyEmailReqBody:\n      $ref: './components/schemas/VerifyEmailReqBody.yaml'\n    ChangePasswordReqBody:\n      $ref: './components/schemas/ChangePasswordReqBody.yaml'\n    UpdateMeReqBody:\n      $ref: './components/schemas/UpdateMeReqBody.yaml'\n    RefreshTokenReqBody:\n      $ref: './components/schemas/RefreshTokenReqBody.yaml'\n    CreateBikeReqBody:\n      $ref: './components/schemas/CreateBikeReqBody.yaml'\n    UpdateBikeReqBody:\n      $ref: './components/schemas/UpdateBikeReqBody.yaml'\n    # supplier\n    CreateSupplierReqBody:\n      $ref: './components/schemas/CreateSupplierReqBody.yaml'\n    UpdateSupplierReqBody:\n      $ref: './components/schemas/UpdateSupplierReqBody.yaml'\n    ChangeSupplierStatusReqBody:\n      $ref: './components/schemas/ChangeSupplierStatusReqBody.yaml'\n    # rental\n    CreateRentalReqBody:\n      $ref: './components/schemas/CreateRentalReqBody.yaml'\n    UpdateRentalReqBody:\n      $ref: './components/schemas/UpdateRentalReqBody.yaml'\n    CancelRentalReqBody:\n      $ref: './components/schemas/CancelRentalReqBody.yaml'\n    EndRentalByAdminOrStaffReqBody:\n      $ref: './components/schemas/EndRentalByAdminOrStaffReqBody.yaml'\n    # report\n    CreateReportReqBody:\n      $ref: './components/schemas/CreateReportReqBody.yaml'\n    UpdateReportReqBody:\n      $ref: './components/schemas/UpdateReportReqBody.yaml'\n    # refund\n    CreateRefundReqBody:\n      $ref: './components/schemas/CreateRefundReqBody.yaml'\n    UpdateRefundStatusReqBody:\n      $ref: './components/schemas/UpdateRefundStatusReqBody.yaml'\n    # wallet\n    IncreaseBalanceReqBody:\n      $ref: './components/schemas/IncreaseBalanceReqBody.yaml'\n    DecreaseBalanceReqBody:\n      $ref: './components/schemas/DecreaseBalanceReqBody.yaml'\n    UpdateWalletStatusReqBody:\n      $ref: './components/schemas/UpdateWalletStatusReqBody.yaml'\n    # withdrawal\n    CreateWithdrawalReqBody:\n      $ref: './components/schemas/CreateWithdrawalReqBody.yaml'\n    UpdateWithdrawalStatusReqBody:\n      $ref: './components/schemas/UpdateWithdrawalStatusReqBody.yaml'\n    \n    # --- Response Schemas ---\n    AuthSuccessResponse:\n      $ref: './components/schemas/AuthSuccessResponse.yaml'\n    RegisterSuccessResponse:\n      $ref: './components/schemas/RegisterSuccessResponse.yaml'\n    LoginSuccessResponse:\n      $ref: './components/schemas/LoginSuccessResponse.yaml'\n    RefreshTokenSuccessResponse:\n      $ref: './components/schemas/RefreshTokenSuccessResponse.yaml'\n    GetMeSuccessResponse:\n      $ref: './components/schemas/GetMeSuccessResponse.yaml'\n    MessageResponse:\n      $ref: './components/schemas/MessageResponse.yaml'\n    PaginatedResponse:\n       $ref: './components/schemas/PaginatedResponse.yaml'\n    ErrorValidationResponse:\n      $ref: './components/schemas/ErrorValidationResponse.yaml'\n    ErrorStatusResponse:\n      $ref: './components/schemas/ErrorStatusResponse.yaml'\n    ErrorServerResponse:\n      $ref: './components/schemas/ErrorServerResponse.yaml'\n\n    # --- Model Schemas ---\n    User:\n      $ref: './components/schemas/User.yaml'\n    Bike:\n      $ref: './components/schemas/Bike.yaml'\n    BikeStatus:\n      $ref: './components/schemas/BikeStatus.yaml'\n    Supplier:\n      $ref: \"./components/schemas/Supplier.yaml\"\n    Rental:\n      $ref: \"./components/schemas/Rental.yaml\"\n    RentalStatus:\n      $ref: \"./components/schemas/RentalStatus.yaml\"\n    Report:\n      $ref: \"./components/schemas/Report.yaml\"\n    ReportStatus:\n      $ref: \"./components/schemas/ReportStatus.yaml\"\n    ReportType:\n      $ref: \"./components/schemas/ReportType.yaml\"\n    ReportPriority:\n      $ref: \"./components/schemas/ReportPriority.yaml\"\n    GeoLocation:\n      $ref: \"./components/schemas/GeoLocation.yaml\"\n    Refund:\n      $ref: \"./components/schemas/Refund.yaml\"\n    RefundStatus:\n      $ref: \"./components/schemas/RefundStatus.yaml\"\n    Wallet:\n      $ref: \"./components/schemas/Wallet.yaml\"\n    WalletStatus:\n      $ref: \"./components/schemas/WalletStatus.yaml\"\n    Transaction:\n      $ref: \"./components/schemas/Transaction.yaml\"\n    TransactionStatus:\n      $ref: \"./components/schemas/TransactionStatus.yaml\"\n    TransactionType:\n      $ref: \"./components/schemas/TransactionType.yaml\"\n    Withdrawal:\n      $ref: \"./components/schemas/Withdrawal.yaml\"\n    WithdrawalStatus:\n      $ref: \"./components/schemas/WithdrawalStatus.yaml\"\n\n  securitySchemes:\n    BearerAuth:\n      $ref: './components/securitySchemes/BearerAuth.yaml'\n  parameters:\n    $ref: './parameters/all-parameters.yaml'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/parameters/all-parameters.yaml:\n"
      },
      {
        "text": "PageQuery:\n  name: page\n  in: query\n  description: The page number for pagination.\n  required: false\n  schema:\n    type: integer\n    default: 1\n    minimum: 1\n\nLimitQuery:\n  name: limit\n  in: query\n  description: The number of items to return per page.\n  required: false\n  schema:\n    type: integer\n    default: 10\n    minimum: 1"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/docs/paths/all-paths.yaml:\n"
      },
      {
        "text": "# ===================================================================\n# Users API\n# ===================================================================\n/users/register:\n  post:\n    tags: [Users]\n    summary: Register a new user\n    description: Creates a new user account, sends a verification email, and returns access/refresh tokens.\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/RegisterReqBody.yaml'\n    responses:\n      '201':\n        description: Registration successful.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/RegisterSuccessResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n\n/users/login:\n  post:\n    tags: [Users]\n    summary: Log in a user\n    description: Authenticates a user with email and password, returning access and refresh tokens.\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/LoginReqBody.yaml'\n    responses:\n      '200':\n        description: Login successful.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/LoginSuccessResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n\n/users/logout:\n  post:\n    tags: [Users]\n    summary: Logout a user\n    description: Invalidates the provided refresh token, effectively logging the user out. Requires a valid access token for authentication.\n    security:\n      - BearerAuth: []\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/LogoutReqBody.yaml'\n    responses:\n      '200':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n\n/users/forgot-password:\n  post:\n    tags: [Users]\n    summary: Request a password reset\n    description: Sends a forgot password token to the user's email if the email exists.\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/ForgotPasswordReqBody.yaml'\n    responses:\n      '200':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n\n/users/verify-forgot-password:\n  post:\n    tags: [Users]\n    summary: Verify forgot password token\n    description: Checks if the provided forgot password token is valid.\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/VerifyForgotPasswordTokenReqBody.yaml'\n    responses:\n      '200':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n\n/users/reset-password:\n  post:\n    tags: [Users]\n    summary: Reset user password\n    description: Sets a new password for the user using a valid forgot password token.\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/ResetPasswordReqBody.yaml'\n    responses:\n      '200':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n\n/users/verify-email:\n  post:\n    tags: [Users]\n    summary: Verify user email\n    description: Verifies a user's email with the provided token. Returns new tokens upon successful first-time verification.\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/VerifyEmailReqBody.yaml'\n    responses:\n      '200':\n        description: Email verification status. Can be a success message or a new set of tokens.\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '../components/schemas/LoginSuccessResponse.yaml'\n                - $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n\n/users/resend-verify-email:\n  post:\n    tags: [Users]\n    summary: Resend email verification token\n    description: Resends a new email verification token to the authenticated user's email.\n    security:\n      - BearerAuth: []\n    responses:\n      '200':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        description: Forbidden (user is banned or already verified).\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n\n/users/change-password:\n  put:\n    tags: [Users]\n    summary: Change user password\n    description: Allows an authenticated and verified user to change their password by providing the old and new password.\n    security:\n      - BearerAuth: []\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/ChangePasswordReqBody.yaml'\n    responses:\n      '200':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        description: Unauthorized (invalid access token or old password does not match).\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        description: Forbidden (user is not verified).\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n\n/users/me:\n  get:\n    tags: [Users]\n    summary: Get current user's profile\n    description: Retrieves the profile information of the currently authenticated user.\n    security:\n      - BearerAuth: []\n    responses:\n      '200':\n        description: Successfully retrieved user profile.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/GetMeSuccessResponse.yaml'\n      '401': \n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n  patch:\n    tags: [Users]\n    summary: Update current user's profile\n    description: Partially updates the profile information of the authenticated user. Only include the fields to be changed.\n    security:\n      - BearerAuth: []\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/UpdateMeReqBody.yaml'\n    responses:\n      '200':\n        description: Profile updated successfully.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/GetMeSuccessResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n\n/users/refresh-token:\n  post:\n    tags: [Users]\n    summary: Refresh access token\n    description: Issues a new access token and refresh token in exchange for a valid refresh token.\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/RefreshTokenReqBody.yaml'\n    responses:\n      '200':\n        description: Tokens refreshed successfully.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/RefreshTokenSuccessResponse.yaml'\n      '401':\n        description: Unauthorized (refresh token is invalid, used, or non-existent).\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n\n# ===================================================================\n# Bikes API\n# ===================================================================\n/bikes:\n  get:\n    tags: [Bikes]\n    summary: Get a list of bikes\n    description: |\n      Retrieves a paginated list of bikes. \n      - **Users** can only view bikes with 'Available' status.\n      - **Admins/Staff** can filter by any status.\n    security:\n      - BearerAuth: []\n    parameters:\n      - $ref: '../parameters/all-parameters.yaml#/PageQuery'\n      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'\n      - name: station_id\n        in: query\n        description: Filter bikes by station ID.\n        schema:\n          type: string\n          format: mongoId\n      - name: supplier_id\n        in: query\n        description: Filter bikes by supplier ID.\n        schema:\n          type: string\n          format: mongoId\n      - name: status\n        in: query\n        description: \"Filter bikes by status. (Admin/Staff only for non-available statuses)\"\n        schema:\n          $ref: '../components/schemas/BikeStatus.yaml'\n    responses:\n      '200':\n        description: A paginated list of bikes.\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '../components/schemas/PaginatedResponse.yaml'\n                - type: object\n                  properties:\n                    data:\n                      type: array\n                      items:\n                        $ref: '../components/schemas/Bike.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n  post:\n    tags: [Bikes]\n    summary: Create a new bike (Admin only)\n    description: Adds a new bike to the system. Requires admin privileges.\n    security:\n      - BearerAuth: []\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/CreateBikeReqBody.yaml'\n    responses:\n      '201':\n        description: Bike created successfully.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                message:\n                  type: string\n                  example: \"Create bike successfully\"\n                result:\n                  $ref: '../components/schemas/Bike.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n\n/bikes/stats:\n  get:\n    tags: [Bikes]\n    summary: Get overall bike statistics (Admin only)\n    security:\n      - BearerAuth: []\n    responses:\n      '200':\n        description: Statistics retrieved successfully.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '500':\n        $ref: '../components/schemas/ErrorServerResponse.yaml'\n\n/bikes/{_id}:\n  get:\n    tags: [Bikes]\n    summary: Get bike by ID\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: _id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    responses:\n      '200':\n        description: Bike details retrieved successfully.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                message: \n                  type: string\n                result:\n                  $ref: '../components/schemas/Bike.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n  delete:\n    tags: [Bikes]\n    summary: Delete a bike (Admin only)\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: _id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    responses:\n      '200':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n        \n/bikes/report-broken/{_id}:\n  patch:\n    tags: [Bikes]\n    summary: Report a broken bike\n    description: Allows a user to report a bike they are currently renting as broken.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: _id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    responses:\n      '200':\n        description: Bike reported successfully.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        description: Forbidden, user is not renting this bike.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/bikes/admin-update/{_id}:\n  patch:\n    tags: [Bikes]\n    summary: Update bike details (Admin/Staff only)\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: _id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/UpdateBikeReqBody.yaml'\n    responses:\n      '200':\n        description: Bike updated successfully.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n\n/bikes/{_id}/rentals:\n  get:\n    tags: [Bikes]\n    summary: Get rental history for a bike (Admin/Staff only)\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: _id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n      - $ref: '../parameters/all-parameters.yaml#/PageQuery'\n      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'\n    responses:\n      '200':\n        description: A paginated list of rentals for the bike.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/bikes/{_id}/stats:\n  get:\n    tags: [Bikes]\n    summary: Get statistics for a specific bike (Admin only)\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: _id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    responses:\n      '200':\n        description: Statistics for the bike.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n# ===================================================================\n# Suppliers API (ADMIN ONLY)\n# ===================================================================\n/suppliers:\n  get:\n    tags: [Suppliers]\n    summary: Get all suppliers (Admin only)\n    description: Retrieves a paginated list of all suppliers. Requires admin privileges.\n    security:\n      - BearerAuth: []\n    parameters:\n      - $ref: '../parameters/all-parameters.yaml#/PageQuery'\n      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'\n    responses:\n      '200':\n        description: A paginated list of suppliers.\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '../components/schemas/PaginatedResponse.yaml'\n                - type: object\n                  properties:\n                    data:\n                      type: array\n                      items:\n                        $ref: '../components/schemas/Supplier.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n  post:\n    tags: [Suppliers]\n    summary: Create a new supplier (Admin only)\n    description: Adds a new supplier to the system. Requires admin privileges.\n    security:\n      - BearerAuth: []\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/CreateSupplierReqBody.yaml'\n    responses:\n      '201':\n        description: Supplier created successfully.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n\n/suppliers/stats:\n  get:\n    tags: [Suppliers]\n    summary: Get bike statistics for all suppliers (Admin only)\n    description: Retrieves statistics about the number of bikes associated with each supplier. Requires admin privileges.\n    security:\n      - BearerAuth: []\n    responses:\n      '200':\n        description: Statistics retrieved successfully.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/suppliers/{id}:\n  get:\n    tags: [Suppliers]\n    summary: Get supplier by ID (Admin only)\n    description: Retrieves detailed information for a specific supplier by their ID. Requires admin privileges.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: The ID of the supplier to retrieve.\n        schema:\n          type: string\n          format: mongoId\n    responses:\n      '200':\n        description: Supplier details retrieved successfully.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/Supplier.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n  \n  put:\n    tags: [Suppliers]\n    summary: Update a supplier (Admin only)\n    description: Updates the information of an existing supplier. Requires admin privileges.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: The ID of the supplier to update.\n        schema:\n          type: string\n          format: mongoId\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/UpdateSupplierReqBody.yaml'\n    responses:\n      '200':\n        description: Supplier updated successfully.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n        \n  patch:\n    tags: [Suppliers]\n    summary: Change supplier status (Admin only)\n    description: Changes the status of a supplier (e.g., ACTIVE, INACTIVE). Requires admin privileges.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: The ID of the supplier whose status is to be changed.\n        schema:\n          type: string\n          format: mongoId\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/ChangeSupplierStatusReqBody.yaml'\n    responses:\n      '200':\n        description: Supplier status changed successfully.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n\n/suppliers/{id}/stats:\n  get:\n    tags: [Suppliers]\n    summary: Get bike statistics for a specific supplier (Admin only)\n    description: Retrieves statistics about the number of bikes for a specific supplier by their ID. Requires admin privileges.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: The ID of the supplier to get statistics for.\n        schema:\n          type: string\n          format: mongoId\n    responses:\n      '200':\n        description: Statistics retrieved successfully.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n# ===================================================================\n# Rentals API\n# ===================================================================\n/rentals:\n  post:\n    tags: [Rentals]\n    summary: Create a new rental session\n    description: Allows a user to start a new rental session by providing a bike ID.\n    security:\n      - BearerAuth: []\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/CreateRentalReqBody.yaml'\n    responses:\n      '200':\n        description: Rental session created successfully.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                message:\n                  $ref: '../components/schemas/MessageResponse.yaml#/properties/message'\n                result:\n                  $ref: '../components/schemas/Rental.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '400':\n        description: Bad Request (e.g., bike not available, station not found).\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n  get:\n    tags: [Rentals]\n    summary: Get all rental sessions (Admin/Staff only)\n    description: Retrieves a paginated list of all rental sessions.\n    security:\n      - BearerAuth: []\n    parameters:\n      - $ref: '../parameters/all-parameters.yaml#/PageQuery'\n      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'\n      - name: start_station\n        in: query\n        schema:\n          type: string\n          format: mongoId\n      - name: end_station\n        in: query\n        schema:\n          type: string\n          format: mongoId\n      - name: status\n        in: query\n        schema:\n          $ref: '../components/schemas/RentalStatus.yaml'\n    responses:\n      '200':\n        description: A paginated list of rentals.\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '../components/schemas/PaginatedResponse.yaml'\n                - type: object\n                  properties:\n                    data:\n                      type: array\n                      items:\n                        $ref: '../components/schemas/Rental.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/rentals/stats/revenue:\n  get:\n    tags: [Rentals]\n    summary: Get rental revenue statistics (Admin only)\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: from\n        in: query\n        schema:\n          type: string\n          format: date\n      - name: to\n        in: query\n        schema:\n          type: string\n          format: date\n      - name: groupBy\n        in: query\n        schema:\n          type: string\n          enum: [\"DAY\", \"MONTH\", \"YEAR\"]\n    responses:\n      '200':\n        description: Revenue statistics retrieved successfully.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/rentals/stats/station-activity:\n  get:\n    tags: [Rentals]\n    summary: Get station activity statistics (Admin only)\n    security:\n      - BearerAuth: []\n    # ... (add from, to, stationId parameters similarly)\n    responses:\n      '200':\n        description: Station activity statistics retrieved successfully.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/rentals/stats/reservations:\n  get:\n    tags: [Rentals]\n    summary: Get reservation statistics (Admin only)\n    security:\n      - BearerAuth: []\n    # ... (add from, to, groupBy parameters similarly)\n    responses:\n      '200':\n        description: Reservation statistics retrieved successfully.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/rentals/me:\n  get:\n    tags: [Rentals]\n    summary: Get my rental history\n    description: Retrieves the authenticated user's paginated rental history.\n    security:\n      - BearerAuth: []\n    parameters:\n      - $ref: '../parameters/all-parameters.yaml#/PageQuery'\n      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'\n      # ... (add other filters if available for users)\n    responses:\n      '200':\n        description: A paginated list of the user's rentals.\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '../components/schemas/PaginatedResponse.yaml'\n                - type: object\n                  properties:\n                    data:\n                      type: array\n                      items:\n                        $ref: '../components/schemas/Rental.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/rentals/me/current:\n  get:\n    tags: [Rentals]\n    summary: Get my current rental session\n    security:\n      - BearerAuth: []\n    responses:\n      '200':\n        description: Details of the current active rental session.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/rentals/me/{id}:\n  get:\n    tags: [Rentals]\n    summary: Get details of my specific rental\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    responses:\n      '200':\n        description: Detailed information about the rental session.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        description: Forbidden (trying to access another user's rental).\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/rentals/me/{id}/end:\n  put:\n    tags: [Rentals]\n    summary: End my rental session\n    description: Allows a user to end their own currently active rental session.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    responses:\n      '200':\n        description: Rental session ended successfully.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        description: Forbidden (not the user's rental).\n      '404':\n        description: Not Found (rental is not currently active).\n\n/rentals/{id}:\n  get:\n    tags: [Rentals]\n    summary: Get rental details by ID (Admin only)\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    responses:\n      '200':\n        description: Detailed rental information.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n  put:\n    tags: [Rentals]\n    summary: Update rental details (Admin only)\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/UpdateRentalReqBody.yaml'\n    responses:\n      '200':\n        description: Rental updated successfully.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n\n/rentals/{id}/end:\n  put:\n    tags: [Rentals]\n    summary: End a rental session (Admin/Staff only)\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/EndRentalByAdminOrStaffReqBody.yaml'\n    responses:\n      '200':\n        description: Rental session ended successfully.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n\n/rentals/{id}/cancel:\n  post:\n    tags: [Rentals]\n    summary: Cancel a rental session (Admin/Staff only)\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/CancelRentalReqBody.yaml'\n    responses:\n      '200':\n        description: Rental session cancelled successfully.\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '400':\n        description: Bad Request (e.g., rental cannot be cancelled in its current state).\n\n# ===================================================================\n# Reports API\n# ===================================================================\n/reports:\n  get:\n    tags: [Reports]\n    summary: Get my reports\n    description: Retrieves a paginated list of reports created by the currently authenticated user.\n    security:\n      - BearerAuth: []\n    parameters:\n      - $ref: '../parameters/all-parameters.yaml#/PageQuery'\n      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'\n      - name: status\n        in: query\n        description: Filter reports by status.\n        schema:\n          $ref: '../components/schemas/ReportStatus.yaml'\n    responses:\n      '200':\n        description: A paginated list of user's reports.\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '../components/schemas/PaginatedResponse.yaml'\n                - type: object\n                  properties:\n                    data:\n                      type: array\n                      items:\n                        $ref: '../components/schemas/Report.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n  post:\n    tags: [Reports]\n    summary: Create a new report\n    description: Submits a new report. For reports involving files, use `multipart/form-data`.\n    security:\n      - BearerAuth: []\n    requestBody:\n      required: true\n      content:\n        multipart/form-data:\n          schema:\n            $ref: '../components/schemas/CreateReportReqBody.yaml'\n    responses:\n      '201':\n        description: Report created successfully.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n\n/reports/manage-reports:\n  get:\n    tags: [Reports]\n    summary: Get all reports (Admin only)\n    description: Retrieves a paginated list of all reports in the system. Requires admin privileges.\n    security:\n      - BearerAuth: []\n    parameters:\n      - $ref: '../parameters/all-parameters.yaml#/PageQuery'\n      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'\n      - name: type\n        in: query\n        description: Filter reports by type.\n        schema:\n          $ref: '../components/schemas/ReportType.yaml'\n      - name: userID\n        in: query\n        description: Filter reports by user ID.\n        schema:\n          type: string\n          format: mongoId\n      - name: date\n        in: query\n        description: Filter reports by a specific date (YYYY-MM-DD).\n        schema:\n          type: string\n          format: date\n    responses:\n      '200':\n        description: A paginated list of all reports.\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '../components/schemas/PaginatedResponse.yaml'\n                - type: object\n                  properties:\n                    data:\n                      type: array\n                      items:\n                        $ref: '../components/schemas/Report.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/reports/{reportID}:\n  get:\n    tags: [Reports]\n    summary: Get report by ID\n    description: Retrieves detailed information for a specific report by its ID.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: reportID\n        in: path\n        required: true\n        description: The ID of the report to retrieve.\n        schema:\n          type: string\n          format: mongoId\n    responses:\n      '200':\n        description: Report details retrieved successfully.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/Report.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n  put:\n    tags: [Reports]\n    summary: Update a report (Admin/Staff)\n    description: Updates the status, assignee, or priority of a report. Requires admin/staff privileges.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: reportID\n        in: path\n        required: true\n        description: The ID of the report to update.\n        schema:\n          type: string\n          format: mongoId\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/UpdateReportReqBody.yaml'\n    responses:\n      '200':\n        description: Report updated successfully.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n\n# ===================================================================\n# Wallets API\n# ===================================================================\n/wallets:\n  get:\n    tags: [Wallets]\n    summary: Get my wallet info\n    description: Retrieves information about the currently authenticated user's wallet.\n    security:\n      - BearerAuth: []\n    responses:\n      '200':\n        description: Wallet information retrieved successfully.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/Wallet.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/wallets/transaction:\n  get:\n    tags: [Wallets]\n    summary: Get my transaction history\n    description: Retrieves a paginated list of transactions for the authenticated user's wallet.\n    security:\n      - BearerAuth: []\n    parameters:\n      - $ref: '../parameters/all-parameters.yaml#/PageQuery'\n      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'\n      - name: type\n        in: query\n        description: Filter transactions by type.\n        schema:\n          $ref: '../components/schemas/TransactionType.yaml'\n    responses:\n      '200':\n        description: A paginated list of transactions.\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '../components/schemas/PaginatedResponse.yaml'\n                - type: object\n                  properties:\n                    data:\n                      type: array\n                      items:\n                        $ref: '../components/schemas/Transaction.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/wallets/transaction/{id}:\n  get:\n    tags: [Wallets]\n    summary: Get transaction details\n    description: Retrieves details of a specific transaction for the authenticated user.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    responses:\n      '200':\n        description: Transaction details retrieved successfully.\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/Transaction.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/wallets/increase:\n  put:\n    tags: [Wallets]\n    summary: Increase wallet balance (Admin only)\n    description: Increases the balance of a user's wallet. Requires admin privileges.\n    security:\n      - BearerAuth: []\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/IncreaseBalanceReqBody.yaml'\n    responses:\n      '200':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n\n/wallets/decrease:\n  put:\n    tags: [Wallets]\n    summary: Decrease wallet balance (Admin only)\n    description: Decreases the balance of a user's wallet. Requires admin privileges.\n    security:\n      - BearerAuth: []\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/DecreaseBalanceReqBody.yaml'\n    responses:\n      '200':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n\n/wallets/{id}:\n  patch:\n    tags: [Wallets]\n    summary: Change wallet status (Admin only)\n    description: Changes the status of a user's wallet (e.g., Active, Frozen). Requires admin privileges.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/UpdateWalletStatusReqBody.yaml'\n    responses:\n      '200':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n\n# ===================================================================\n# Refunds API\n# ===================================================================\n/refunds:\n  post:\n    tags: [Refunds]\n    summary: Create a new refund request\n    description: Allows an authenticated user to submit a refund request for a specific transaction.\n    security:\n      - BearerAuth: []\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/CreateRefundReqBody.yaml'\n    responses:\n      '201':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        description: Transaction not found.\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n  get:\n    tags: [Refunds]\n    summary: Get my refund requests\n    description: Retrieves a paginated list of refund requests for the currently authenticated user.\n    security:\n      - BearerAuth: []\n    parameters:\n      - $ref: '../parameters/all-parameters.yaml#/PageQuery'\n      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'\n      - name: status\n        in: query\n        schema:\n          $ref: '../components/schemas/RefundStatus.yaml'\n    responses:\n      '200':\n        description: A paginated list of the user's refund requests.\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '../components/schemas/PaginatedResponse.yaml'\n                - type: object\n                  properties:\n                    data:\n                      type: array\n                      items:\n                        $ref: '../components/schemas/Refund.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/refunds/manage-refunds:\n  get:\n    tags: [Refunds]\n    summary: Get all refund requests (Admin only)\n    description: Retrieves a paginated list of all refund requests. Requires admin privileges.\n    security:\n      - BearerAuth: []\n    parameters:\n      - $ref: '../parameters/all-parameters.yaml#/PageQuery'\n      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'\n      - name: status\n        in: query\n        schema:\n          $ref: '../components/schemas/RefundStatus.yaml'\n    responses:\n      '200':\n        description: A paginated list of all refund requests.\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '../components/schemas/PaginatedResponse.yaml'\n                - type: object\n                  properties:\n                    data:\n                      type: array\n                      items:\n                        $ref: '../components/schemas/Refund.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/refunds/{id}:\n  get:\n    tags: [Refunds]\n    summary: Get refund request details\n    description: Retrieves details of a specific refund request. Admins can view any request, users can only view their own.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    responses:\n      '200':\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/Refund.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n  put:\n    tags: [Refunds]\n    summary: Update refund status (Admin only)\n    description: Allows an admin to approve, reject, or complete a refund request.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/UpdateRefundStatusReqBody.yaml'\n    responses:\n      '200':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '400':\n        description: Bad request (e.g., invalid status transition).\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n\n# ===================================================================\n# Withdrawals API\n# ===================================================================\n/withdraws:\n  post:\n    tags: [Withdrawals]\n    summary: Create a withdrawal request\n    description: Allows an authenticated user to submit a request to withdraw funds from their wallet.\n    security:\n      - BearerAuth: []\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/CreateWithdrawalReqBody.yaml'\n    responses:\n      '201':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'\n  get:\n    tags: [Withdrawals]\n    summary: Get my withdrawal requests\n    description: Retrieves a paginated list of the authenticated user's withdrawal requests.\n    security:\n      - BearerAuth: []\n    parameters:\n      - $ref: '../parameters/all-parameters.yaml#/PageQuery'\n      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'\n      - name: status\n        in: query\n        schema:\n          $ref: '../components/schemas/WithdrawalStatus.yaml'\n    responses:\n      '200':\n        description: A paginated list of withdrawal requests.\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '../components/schemas/PaginatedResponse.yaml'\n                - type: object\n                  properties:\n                    data:\n                      type: array\n                      items:\n                        $ref: '../components/schemas/Withdrawal.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/withdraws/manage-withdrawal:\n  get:\n    tags: [Withdrawals]\n    summary: Get all withdrawal requests (Admin only)\n    description: Retrieves a paginated list of all withdrawal requests in the system.\n    security:\n      - BearerAuth: []\n    parameters:\n      - $ref: '../parameters/all-parameters.yaml#/PageQuery'\n      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'\n      - name: status\n        in: query\n        schema:\n          $ref: '../components/schemas/WithdrawalStatus.yaml'\n    responses:\n      '200':\n        description: A paginated list of all withdrawal requests.\n        content:\n          application/json:\n            schema:\n              allOf:\n                - $ref: '../components/schemas/PaginatedResponse.yaml'\n                - type: object\n                  properties:\n                    data:\n                      type: array\n                      items:\n                        $ref: '../components/schemas/Withdrawal.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n\n/withdraws/{id}:\n  get:\n    tags: [Withdrawals]\n    summary: Get withdrawal request details\n    description: Retrieves details of a specific withdrawal request. Admins can view any request, users can only view their own.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    responses:\n      '200':\n        content:\n          application/json:\n            schema:\n              $ref: '../components/schemas/Withdrawal.yaml'\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n  put:\n    tags: [Withdrawals]\n    summary: Update withdrawal status (Admin only)\n    description: Allows an admin to approve, reject, or complete a withdrawal request.\n    security:\n      - BearerAuth: []\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: mongoId\n    requestBody:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: '../components/schemas/UpdateWithdrawalStatusReqBody.yaml'\n    responses:\n      '200':\n        $ref: '../components/schemas/MessageResponse.yaml'\n      '400':\n        description: Bad request (e.g., invalid status transition).\n      '401':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '403':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '404':\n        $ref: '../components/schemas/ErrorStatusResponse.yaml'\n      '422':\n        $ref: '../components/schemas/ErrorValidationResponse.yaml'"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/middlewares/admin.middlewares.ts:\n"
      },
      {
        "text": "import type { NextFunction, Request, Response } from \"express\";\n\nimport { ObjectId } from \"mongodb\";\n\nimport type { TokenPayLoad } from \"~/models/requests/users.requests\";\n\nimport { Role } from \"~/constants/enums\";\nimport HTTP_STATUS from \"~/constants/http-status\";\nimport { USERS_MESSAGES } from \"~/constants/messages\";\nimport { ErrorWithStatus } from \"~/models/errors\";\nimport databaseService from \"~/services/database.services\";\n\nexport async function isAdminValidator(req: Request, res: Response, next: NextFunction) {\n  try {\n    const { user_id } = req.decoded_authorization as TokenPayLoad;\n    const user = await databaseService.users.findOne({ _id: new ObjectId(user_id) });\n    if (user === null) {\n      throw new ErrorWithStatus({\n        message: USERS_MESSAGES.USER_NOT_FOUND,\n        status: HTTP_STATUS.NOT_FOUND,\n      });\n    }\n    if (user.role !== Role.Admin) {\n      throw new ErrorWithStatus({\n        message: USERS_MESSAGES.ACCESS_DENIED_ADMIN_ONLY,\n        status: HTTP_STATUS.FORBIDDEN,\n      });\n    }\n    next();\n  }\n  catch (error) {\n    let status: number = HTTP_STATUS.INTERNAL_SERVER_ERROR;\n    let message = \"Internal Server Error\";\n\n    if (error instanceof ErrorWithStatus) {\n      status = error.status;\n      message = error.message;\n    }\n    else if (error instanceof Error) {\n      message = error.message;\n    }\n    res.status(status).json({ message });\n  }\n}\n\nexport const isAdminAndStaffValidator = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const { user_id } = req.decoded_authorization as TokenPayLoad\n    const user = await databaseService.users.findOne({ _id: new ObjectId(user_id) })\n    if (user === null) {\n      throw new ErrorWithStatus({\n        message: USERS_MESSAGES.USER_NOT_FOUND,\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n    if (user.role !== Role.Admin && user.role !== Role.Staff) {\n      throw new ErrorWithStatus({\n        message: USERS_MESSAGES.ACCESS_DENIED_ADMIN_AND_STAFF_ONLY,\n        status: HTTP_STATUS.FORBIDDEN\n      })\n    }\n    next()\n  } catch (error) {\n    let status: number = HTTP_STATUS.INTERNAL_SERVER_ERROR\n    let message = 'Internal Server Error'\n\n    if (error instanceof ErrorWithStatus) {\n      status = error.status\n      message = error.message\n    } else if (error instanceof Error) {\n      message = error.message\n    }\n    res.status(status).json({ message })\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/middlewares/bikes.middlewares.ts:\n"
      },
      {
        "text": "import { checkSchema } from \"express-validator\";\nimport { ObjectId } from \"mongodb\";\n\nimport { BikeStatus } from \"~/constants/enums\";\nimport HTTP_STATUS from \"~/constants/http-status\";\nimport { BIKES_MESSAGES, RENTALS_MESSAGE } from \"~/constants/messages\";\nimport { ErrorWithStatus } from \"~/models/errors\";\nimport databaseService from \"~/services/database.services\";\nimport { validate } from \"~/utils/validation\";\n\nconst statusErrors: any = {\n  [BikeStatus.Booked]: RENTALS_MESSAGE.BIKE_IN_USE,\n  [BikeStatus.Broken]: RENTALS_MESSAGE.BIKE_IS_BROKEN,\n  [BikeStatus.Maintained]: RENTALS_MESSAGE.BIKE_IS_MAINTAINED,\n  [BikeStatus.Reserved]: RENTALS_MESSAGE.BIKE_IS_RESERVED,\n  [BikeStatus.Unavailable]: RENTALS_MESSAGE.UNAVAILABLE_BIKE\n};\n\nexport const isAvailability = (status: BikeStatus) => {\n  if (status === BikeStatus.Available) return true;\n\n  const message = statusErrors[status];\n  if (message) {\n    throw new ErrorWithStatus({\n      message,\n      status: HTTP_STATUS.BAD_REQUEST\n    });\n  }\n\n  throw new ErrorWithStatus({\n    message: RENTALS_MESSAGE.INVALID_BIKE_STATUS,\n    status: HTTP_STATUS.BAD_REQUEST\n  });\n};\n\nexport const createBikeValidator = validate(\n  checkSchema(\n    {\n      station_id: {\n        notEmpty: { errorMessage: BIKES_MESSAGES.STATION_ID_IS_REQUIRED },\n        isString: { errorMessage: BIKES_MESSAGES.INVALID_STATION_ID },\n        custom: {\n          options: async (value) => {\n            if (!ObjectId.isValid(value)) {\n              throw new ErrorWithStatus({\n                message: BIKES_MESSAGES.INVALID_STATION_ID,\n                status: HTTP_STATUS.BAD_REQUEST,\n              });\n            }\n            const station = await databaseService.stations.findOne({ _id: new ObjectId(value) });\n            if (!station) {\n              throw new ErrorWithStatus({\n                message: BIKES_MESSAGES.STATION_NOT_FOUND,\n                status: HTTP_STATUS.NOT_FOUND,\n              });\n            }\n            return true;\n          },\n        },\n      },\n      chip_id: {\n        notEmpty: { errorMessage: BIKES_MESSAGES.CHIP_ID_IS_REQUIRED },\n        isString: { errorMessage: BIKES_MESSAGES.CHIP_ID_MUST_BE_A_STRING },\n        custom: {\n          options: async (value) => {\n            const existingBike = await databaseService.bikes.findOne({ chip_id: value });\n            if (existingBike) {\n              throw new ErrorWithStatus({\n                message: BIKES_MESSAGES.CHIP_ID_ALREADY_EXISTS,\n                status: HTTP_STATUS.BAD_REQUEST,\n              });\n            }\n            return true; \n          },\n        },\n      },\n      status: {\n        optional: true,\n        isIn: {\n          options: [Object.values(BikeStatus)],\n          errorMessage: BIKES_MESSAGES.INVALID_STATUS,\n        },\n      },\n      supplier_id: {\n        optional: true,\n        custom: {\n          options: async (value) => {\n            if (value) { // Chỉ kiểm tra nếu supplier_id được cung cấp\n              if (!ObjectId.isValid(value)) {\n                throw new ErrorWithStatus({\n                  message: BIKES_MESSAGES.INVALID_SUPPLIER_ID,\n                  status: HTTP_STATUS.BAD_REQUEST,\n                });\n              }\n              // Kiểm tra xem supplier có tồn tại trong database không\n              const supplier = await databaseService.suppliers.findOne({ _id: new ObjectId(value) });\n              if (!supplier) {\n                throw new ErrorWithStatus({\n                  message: BIKES_MESSAGES.SUPPLIER_NOT_FOUND,\n                  status: HTTP_STATUS.NOT_FOUND,\n                });\n              }\n            }\n            return true;\n          },\n        },\n      },\n    },\n    [\"body\"],\n  ),\n);\n\nexport const bikeIdValidator = validate(\n  checkSchema(\n    {\n      _id: {\n        in: [\"params\"],\n        notEmpty: {\n          errorMessage: BIKES_MESSAGES.BIKE_ID_IS_REQUIRED,\n        },\n        isMongoId: {\n          errorMessage: BIKES_MESSAGES.INVALID_BIKE_ID,\n        },\n        custom: {\n          options: async (value) => {\n            const bike = await databaseService.bikes.findOne({ _id: new ObjectId(value) });\n            if (!bike) {\n              throw new ErrorWithStatus({\n                message: BIKES_MESSAGES.BIKE_NOT_FOUND,\n                status: HTTP_STATUS.NOT_FOUND,\n              });\n            }\n            return true;\n          },\n        },\n      },\n    },\n    [\"params\"],\n  )\n);\n\nexport const updateBikeValidator = validate(\n  checkSchema(\n    {\n      chip_id: { \n        notEmpty: { errorMessage: BIKES_MESSAGES.CHIP_ID_IS_REQUIRED }, \n        isString: { errorMessage: BIKES_MESSAGES.CHIP_ID_MUST_BE_A_STRING }, \n        custom: { \n          options: async (value, { req }) => { \n            const bikeId = req.params?._id; \n            // Kiểm tra xem có xe nào khác đang dùng chip_id này không\n            const existingBike = await databaseService.bikes.findOne({ \n              chip_id: value, \n              _id: { $ne: new ObjectId(bikeId) },\n            }); \n            if (existingBike) { \n              throw new ErrorWithStatus({ \n                message: BIKES_MESSAGES.CHIP_ID_ALREADY_EXISTS_ON_ANOTHER_BIKE, \n                status: HTTP_STATUS.BAD_REQUEST, \n              }); \n            } \n            return true; \n          }, \n        }, \n      }, \n      status: {\n        optional: true,\n        isIn: {\n          options: [Object.values(BikeStatus)],\n          errorMessage: BIKES_MESSAGES.INVALID_STATUS,\n        },\n      },\n      station_id: {\n        optional: true,\n        isMongoId: {\n          errorMessage: BIKES_MESSAGES.INVALID_STATION_ID,\n        },\n        custom: {\n          options: async (value) => {\n            const station = await databaseService.stations.findOne({ _id: new ObjectId(value) });\n            if (!station) {\n              throw new ErrorWithStatus({\n                message: BIKES_MESSAGES.STATION_NOT_FOUND,\n                status: HTTP_STATUS.NOT_FOUND,\n              });\n            }\n            return true;\n          },\n        },\n      },\n      supplier_id: {\n        optional: true,\n        isMongoId: {\n          errorMessage: BIKES_MESSAGES.INVALID_SUPPLIER_ID,\n        },\n        custom: {\n          options: async (value) => {\n            const supplier = await databaseService.suppliers.findOne({ _id: new ObjectId(value) });\n            if (!supplier) {\n              throw new ErrorWithStatus({\n                message: BIKES_MESSAGES.SUPPLIER_NOT_FOUND,\n                status: HTTP_STATUS.NOT_FOUND,\n              });\n            }\n            return true;\n          },\n        },\n      },\n    },\n    [\"body\"],\n  )\n);"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/middlewares/common.middlewares.ts:\n"
      },
      {
        "text": "import type { NextFunction, Request, Response } from \"express\";\n\nimport { pick } from \"lodash\";\n\ntype FilterKeys<T> = Array<keyof T>;\n\nexport function filterMiddleware<T>(filterKey: FilterKeys<T>) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    req.body = pick(req.body, filterKey);\n    next();\n  };\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/middlewares/error.middlewares.ts:\n"
      },
      {
        "text": "import type { NextFunction, Request, Response } from \"express\";\n\nimport { omit } from \"lodash\";\n\nimport HTTP_STATUS from \"~/constants/http-status\";\nimport { EntityError, ErrorWithStatus } from \"~/models/errors\";\n\nexport function defaultErrorHandler(err: any, req: Request, res: Response, _next: NextFunction) {\n  if (err instanceof EntityError) {\n    return res.status(err.status).json({\n      message: err.message,\n      errors: err.errors,\n    });\n  }\n\n  if (err instanceof ErrorWithStatus) {\n    res.status(err.status).json(omit(err, [\"status\"]));\n    return;\n  }\n  Object.getOwnPropertyNames(err).forEach((key) => {\n    Object.defineProperty(err, key, { enumerable: true });\n  });\n  res.status(HTTP_STATUS.INTERNAL_SERVER_ERROR).json({\n    message: err.message,\n    errorInfor: omit(err, [\"stack\"]),\n  });\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/middlewares/refunds.middlewares.ts:\n"
      },
      {
        "text": "import { checkSchema } from 'express-validator'\nimport { ObjectId } from 'mongodb'\nimport { RefundStatus } from '~/constants/enums'\n\nimport HTTP_STATUS from '~/constants/http-status'\nimport { WALLETS_MESSAGE } from '~/constants/messages'\nimport { ErrorWithStatus } from '~/models/errors'\nimport databaseService from '~/services/database.services'\nimport { validate } from '~/utils/validation'\n\nexport const createRefundRequestValidator = validate(\n  checkSchema(\n    {\n      amount: {\n        in: ['body'],\n        trim: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.AMOUNT_IS_REQUIRED\n        },\n        isDecimal: {\n          options: { decimal_digits: '1,2' },\n          errorMessage: WALLETS_MESSAGE.AMOUNT_NUMERIC\n        },\n        custom: {\n          options: (value) => {\n            if (parseFloat(value) <= 0) {\n              throw new ErrorWithStatus({\n                message: WALLETS_MESSAGE.AMOUNT_NEGATIVE,\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n            return true\n          }\n        }\n      },\n\n      transaction_id: {\n        in: ['body'],\n        trim: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.TYPE_IS_REQUIRED\n        },\n        custom: {\n          options: async (value) => {\n            const findTransaction = await databaseService.transactions.findOne({ _id: new ObjectId(value) })\n            if (!findTransaction) {\n              throw new ErrorWithStatus({\n                message: WALLETS_MESSAGE.TRANSACTION_NOT_FOUND,\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n\n            return true\n          }\n        }\n      }\n    },\n    ['body']\n  )\n)\n\nexport const updateRefundStatusValidator = validate(\n  checkSchema({\n    newStatus: {\n      in: ['body'],\n      trim: true,\n      notEmpty: {\n        errorMessage: WALLETS_MESSAGE.STATUS_IS_REQUIED\n      },\n      isIn: {\n        options: [[RefundStatus.Approved, RefundStatus.Completed, RefundStatus.Rejected]],\n        errorMessage: WALLETS_MESSAGE.INVALID_NEW_STATUS\n      }\n    }\n  })\n)"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/middlewares/rentals.middlewares.ts:\n"
      },
      {
        "text": "import { checkSchema } from 'express-validator'\n\nimport { BikeStatus, RentalStatus } from '~/constants/enums'\nimport HTTP_STATUS from '~/constants/http-status'\nimport { RENTALS_MESSAGE } from '~/constants/messages'\nimport { ErrorWithStatus } from '~/models/errors'\nimport databaseService from '~/services/database.services'\nimport { validate } from '~/utils/validation'\nimport { isAvailability } from './bikes.middlewares'\nimport { toObjectId } from '~/utils/string'\n\nconst ALLOWED_CREATED_FIELDS = ['bike_id']\nconst ALLOWED_UPDATED_FIELDS = ['end_station', 'end_time', 'status', 'total_price', 'reason']\nconst ALLOWED_CANCELLED_FIELDS = ['bikeStatus', 'reason']\nconst ALLOWED_ENDED_RENTAL_FIELDS = ['end_station', 'end_time', 'reason']\n\nexport const createRentalSessionValidator = validate(\n  checkSchema(\n    {\n      bike_id: {\n        notEmpty: {\n          errorMessage: RENTALS_MESSAGE.REQUIRED_BIKE_ID,\n          bail: true\n        },\n        isMongoId: {\n          errorMessage: RENTALS_MESSAGE.INVALID_OBJECT_ID.replace('%s', 'bike_id'),\n          bail: true\n        },\n        custom: {\n          options: async (value, { req }) => {\n            const bikeId = toObjectId(value)\n            const bike = await databaseService.bikes.findOne({ _id: bikeId })\n            if (!bike) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.BIKE_NOT_FOUND.replace('%s', value),\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n            isAvailability(bike.status as BikeStatus)\n\n            const stationId = bike.station_id\n            if (!stationId) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.UNAVAILABLE_BIKE,\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n            const station = await databaseService.stations.findOne({ _id: stationId })\n            if (!station) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.STATION_NOT_FOUND.replace('%s', stationId.toString()),\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n\n            req.station = station\n            req.bike = bike\n            return true\n          }\n        }\n      },\n      '*': {\n        in: ['body'],\n        custom: {\n          options: (value, { path }) => {\n            if (!ALLOWED_CREATED_FIELDS.includes(path)) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.NOT_ALLOWED_CREATED_FIELD.replace('%s', path),\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n            return true\n          }\n        }\n      }\n    },\n    ['body']\n  )\n)\n\nexport const endRentalSessionValidator = validate(\n  checkSchema({\n    id: {\n      in: ['params'],\n      notEmpty: {\n        errorMessage: RENTALS_MESSAGE.REQUIRED_ID,\n        bail: true\n      },\n      isMongoId: {\n        errorMessage: RENTALS_MESSAGE.INVALID_OBJECT_ID.replace('%s', 'Rental Id'),\n        bail: true\n      },\n      custom: {\n        options: async (value, { req }) => {\n          const currentRental = await databaseService.rentals.findOne({\n            _id: toObjectId(value),\n            status: RentalStatus.Rented\n          })\n\n          if (!currentRental) {\n            throw new ErrorWithStatus({\n              message: RENTALS_MESSAGE.NOT_FOUND_RENTED_RENTAL.replace('%s', value),\n              status: HTTP_STATUS.NOT_FOUND\n            })\n          }\n\n          req.rental = currentRental\n          return true\n        },\n        bail: true\n      }\n    }\n  })\n)\n\nexport const endRentalByAdminOrStaffValidator = validate(\n  checkSchema({\n    id: {\n      in: ['params'],\n      notEmpty: {\n        errorMessage: RENTALS_MESSAGE.REQUIRED_ID,\n        bail: true\n      },\n      isMongoId: {\n        errorMessage: RENTALS_MESSAGE.INVALID_OBJECT_ID.replace('%s', 'Rental Id'),\n        bail: true\n      },\n      custom: {\n        options: async (value, { req }) => {\n          const currentRental = await databaseService.rentals.findOne({\n            _id: toObjectId(value),\n            status: RentalStatus.Rented\n          })\n\n          if (!currentRental) {\n            throw new ErrorWithStatus({\n              message: RENTALS_MESSAGE.NOT_FOUND_RENTED_RENTAL.replace('%s', value),\n              status: HTTP_STATUS.NOT_FOUND\n            })\n          }\n\n          req.rental = currentRental\n          return true\n        },\n        bail: true\n      }\n    },\n    end_station: {\n      in: ['body'],\n      notEmpty:{\n        errorMessage: RENTALS_MESSAGE.REQUIRED_END_STATION\n      },\n      isMongoId: {\n        errorMessage: RENTALS_MESSAGE.INVALID_OBJECT_ID.replace('%s', 'end_station'),\n        bail: true\n      },\n      custom: {\n        options: async (value, { req }) => {\n          const station = await databaseService.stations.findOne({ _id: toObjectId(value) })\n          if (!station) {\n            throw new ErrorWithStatus({\n              message: RENTALS_MESSAGE.STATION_NOT_FOUND.replace('%s', value),\n              status: HTTP_STATUS.NOT_FOUND\n            })\n          }\n          req.station = station\n          return true\n        }\n      }\n    },\n\n    end_time: {\n      in: ['body'],\n      optional: true,\n      isISO8601: {\n        errorMessage: RENTALS_MESSAGE.INVALID_END_TIME_FORMAT\n      }\n    },\n    reason: {\n        in: ['body'],\n        notEmpty: {\n          errorMessage: RENTALS_MESSAGE.REQUIRED_UPDATED_REASON\n        },\n        isString: {\n          errorMessage: RENTALS_MESSAGE.INVALID_REASON\n        },\n        isLength: {\n          options: { max: 255 },\n          errorMessage: RENTALS_MESSAGE.REASON_TOO_LONG\n        }\n      },\n      '*': {\n        in: ['body'],\n        custom: {\n          options: (value, { path }) => {\n            if (!ALLOWED_ENDED_RENTAL_FIELDS.includes(path)) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.NOT_ALLOWED_UPDATED_FIELD.replace('%s', path),\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n            return true\n          }\n        }\n      }\n  })\n)\n\nexport const updateDetailRentalValidator = validate(\n  checkSchema(\n    {\n      id: {\n        in: ['params'],\n        notEmpty: {\n          errorMessage: RENTALS_MESSAGE.REQUIRED_ID,\n          bail: true\n        },\n        isMongoId: {\n          errorMessage: RENTALS_MESSAGE.INVALID_OBJECT_ID.replace('%s', 'rental_id'),\n          bail: true\n        },\n        custom: {\n          options: async (value, { req }) => {\n            const rental = await databaseService.rentals.findOne({ _id: toObjectId(value) })\n            if (!rental) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.NOT_FOUND.replace('%s', value),\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n\n            if (rental.status === RentalStatus.Cancelled) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.CANNOT_EDIT_THIS_RENTAL_WITH_STATUS.replace('%s', rental.status),\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n\n            req.rental = rental\n            return true\n          }\n        }\n      },\n\n      end_station: {\n        in: ['body'],\n        optional: true,\n        isMongoId: {\n          errorMessage: RENTALS_MESSAGE.INVALID_OBJECT_ID.replace('%s', 'end_station'),\n          bail: true\n        },\n        custom: {\n          options: async (value, { req }) => {\n            const station = await databaseService.stations.findOne({ _id: toObjectId(value) })\n            if (!station) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.STATION_NOT_FOUND.replace('%s', value),\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n            req.station = station\n            return true\n          }\n        }\n      },\n\n      end_time: {\n        in: ['body'],\n        optional: true,\n        isISO8601: {\n          errorMessage: RENTALS_MESSAGE.INVALID_END_TIME_FORMAT\n        }\n      },\n\n      status: {\n        in: ['body'],\n        optional: true,\n        isIn: {\n          options: Object.values(RentalStatus),\n          errorMessage: RENTALS_MESSAGE.INVALID_STATUS\n        }\n      },\n\n      total_price: {\n        in: ['body'],\n        optional: true,\n        isFloat: {\n          options: { min: 0 },\n          errorMessage: RENTALS_MESSAGE.INVALID_TOTAL_PRICE\n        }\n      },\n\n      reason: {\n        in: ['body'],\n        notEmpty: {\n          errorMessage: RENTALS_MESSAGE.REQUIRED_UPDATED_REASON\n        },\n        isString: {\n          errorMessage: RENTALS_MESSAGE.INVALID_REASON\n        },\n        isLength: {\n          options: { max: 255 },\n          errorMessage: RENTALS_MESSAGE.REASON_TOO_LONG\n        }\n      },\n      '*': {\n        in: ['body'],\n        custom: {\n          options: (value, { path }) => {\n            if (!ALLOWED_UPDATED_FIELDS.includes(path)) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.NOT_ALLOWED_UPDATED_FIELD.replace('%s', path),\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n            return true\n          }\n        }\n      }\n    },\n    ['body', 'params']\n  )\n)\n\nexport const cancelRentalValidator = validate(\n  checkSchema(\n    {\n      id: {\n        in: ['params'],\n        notEmpty: {\n          errorMessage: RENTALS_MESSAGE.REQUIRED_ID,\n          bail: true\n        },\n        isMongoId: {\n          errorMessage: RENTALS_MESSAGE.INVALID_OBJECT_ID.replace('%s', 'rental_id'),\n          bail: true\n        },\n        custom: {\n          options: async (value, { req }) => {\n            const rental = await databaseService.rentals.findOne({ _id: toObjectId(value) })\n            if (!rental) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.NOT_FOUND.replace('%s', value),\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n            if ([RentalStatus.Cancelled, RentalStatus.Completed].includes(rental.status)) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.CANNOT_CANCEL_THIS_RENTAL_WITH_STATUS.replace('%s', rental.status),\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n\n            const bike = await databaseService.bikes.findOne({ _id: rental.bike_id })\n            if (!bike) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.BIKE_NOT_FOUND.replace('%s', rental.bike_id.toString()),\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n\n            if (![BikeStatus.Booked, BikeStatus.Reserved].includes(bike.status)) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.CANNOT_CANCEL_WITH_BIKE_STATUS.replace('%s', bike.status),\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n\n            req.rental = rental\n            return true\n          }\n        }\n      },\n      bikeStatus: {\n        in: ['body'],\n        optional: true,\n        trim: true,\n        custom: {\n          options: (value) => {\n            if (!value) return true\n            if (![BikeStatus.Available, BikeStatus.Broken].includes(value)) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.CANNOT_EDIT_BIKE_STATUS_TO.replace('%s', value),\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n            return true\n          }\n        }\n      },\n      reason: {\n        in: ['body'],\n        notEmpty: {\n          errorMessage: RENTALS_MESSAGE.REQUIRED_CANCELLED_REASON\n        },\n        isString: {\n          errorMessage: RENTALS_MESSAGE.INVALID_REASON\n        },\n        isLength: {\n          options: { max: 255 },\n          errorMessage: RENTALS_MESSAGE.REASON_TOO_LONG\n        }\n      },\n      '*': {\n        in: ['body'],\n        custom: {\n          options: (value, { path }) => {\n            if (!ALLOWED_CANCELLED_FIELDS.includes(path)) {\n              throw new ErrorWithStatus({\n                message: RENTALS_MESSAGE.NOT_ALLOWED_CANCELLED_FIELD.replace('%s', path),\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n            return true\n          }\n        }\n      }\n    },\n    ['body', 'params']\n  )\n)"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/middlewares/reports.middlewares.ts:\n"
      },
      {
        "text": "import { checkSchema } from \"express-validator\";\nimport { ObjectId } from \"mongodb\";\n\nimport { ReportPriority, ReportStatus, ReportTypeEnum } from \"~/constants/enums\";\nimport HTTP_STATUS from \"~/constants/http-status\";\nimport { REPORTS_MESSAGES, USERS_MESSAGES } from \"~/constants/messages\";\nimport { ErrorWithStatus } from \"~/models/errors\";\nimport databaseService from \"~/services/database.services\";\nimport { validate } from \"~/utils/validation\";\n\nexport async function validateReportExists(reportId: string) {\n  if (!ObjectId.isValid(reportId)) {\n    throw new ErrorWithStatus({\n      message: REPORTS_MESSAGES.INVALID_REPORT_ID,\n      status: HTTP_STATUS.BAD_REQUEST,\n    });\n  }\n\n  const report = await databaseService.reports.findOne({ _id: new ObjectId(reportId) });\n  if (!report) {\n    throw new ErrorWithStatus({\n      message: REPORTS_MESSAGES.REPORT_NOT_FOUND.replace(\"%s\", reportId),\n      status: HTTP_STATUS.NOT_FOUND,\n    });\n  }\n\n  if (report.status === ReportStatus.Cancel) {\n    throw new ErrorWithStatus({\n      message: REPORTS_MESSAGES.NOT_ACTIVE,\n      status: HTTP_STATUS.BAD_REQUEST,\n    });\n  }\n\n  return report;\n}\n\nexport const createReportValidator = validate(\n  checkSchema(\n    {\n      type: {\n        in: [\"body\"],\n        trim: true,\n        notEmpty: {\n          errorMessage: REPORTS_MESSAGES.TYPE_IS_REQUIRED,\n        },\n        isIn: {\n          options: [Object.values(ReportTypeEnum)],\n          errorMessage: REPORTS_MESSAGES.INVALID_TYPE,\n        },\n      },\n\n      message: {\n        in: [\"body\"],\n        trim: true,\n        isString: {\n          errorMessage: REPORTS_MESSAGES.MESSAGE_MUST_BE_STRING,\n        },\n        isLength: {\n          options: { max: 250 },\n          errorMessage: REPORTS_MESSAGES.MESSAGE_TOO_LONG,\n        },\n      },\n\n      bike_id: {\n        in: [\"body\"],\n        trim: true,\n        custom: {\n          options: async (value, { req }) => {\n            if ([ReportTypeEnum.BikeDamage, ReportTypeEnum.BikeDirty].includes(req.body.type) && !value) {\n              throw new ErrorWithStatus({\n                message: REPORTS_MESSAGES.BIKE_ID_IS_REQUIRED,\n                status: HTTP_STATUS.BAD_REQUEST,\n              });\n            }\n\n            if (value) {\n              const bike = await databaseService.bikes.findOne({\n                _id: new ObjectId(value),\n              });\n              if (!bike) {\n                throw new ErrorWithStatus({\n                  message: REPORTS_MESSAGES.BIKE_NOT_FOUND.replace(\"%s\", value),\n                  status: HTTP_STATUS.NOT_FOUND,\n                });\n              }\n            }\n            return true;\n          },\n        },\n      },\n\n      rental_id: {\n        in: [\"body\"],\n        trim: true,\n        custom: {\n          options: async (value, { req }) => {\n            if (value) {\n              const rental = await databaseService.rentals.findOne({\n                _id: new ObjectId(value),\n              });\n              if (!rental) {\n                throw new ErrorWithStatus({\n                  message: REPORTS_MESSAGES.RENTAL_NOT_FOUND.replace(\"%s\", value),\n                  status: HTTP_STATUS.NOT_FOUND,\n                });\n              }\n\n              if (req.body.bike_id) {\n                if (String(rental.bike_id) !== req.body.bike_id) {\n                  throw new ErrorWithStatus({\n                    message: REPORTS_MESSAGES.BIKE_NOT_IN_RENTAL.replace(\"%s\", req.body.bike_id),\n                    status: HTTP_STATUS.NOT_FOUND,\n                  });\n                }\n              }\n            }\n            return true;\n          },\n        },\n      },\n\n      station_id: {\n        in: [\"body\"],\n        trim: true,\n        custom: {\n          options: async (value, { req }) => {\n            if (\n              [ReportTypeEnum.StationFull, ReportTypeEnum.StationNotAccepting, ReportTypeEnum.StationOffline].includes(\n                req.body.type,\n              )\n              && !value\n            ) {\n              throw new ErrorWithStatus({\n                message: REPORTS_MESSAGES.STATION_ID_IS_REQUIRED,\n                status: HTTP_STATUS.BAD_REQUEST,\n              });\n            }\n\n            if (value) {\n              const station = await databaseService.stations.findOne({\n                _id: new ObjectId(value),\n              });\n              if (!station) {\n                throw new ErrorWithStatus({\n                  message: REPORTS_MESSAGES.STATION_NOT_FOUND.replace(\"%s\", value),\n                  status: HTTP_STATUS.NOT_FOUND,\n                });\n              }\n            }\n            return true;\n          },\n        },\n      },\n      location: {\n        in: [\"body\"],\n        trim: true,\n        custom: {\n          options: (value, { req }) => {\n            if (\n              [ReportTypeEnum.SosAccident, ReportTypeEnum.SosHealth, ReportTypeEnum.SosThreat].includes(req.body.type)\n            ) {\n              if (!value || typeof value.latitude !== \"number\" || typeof value.longitude !== \"number\") {\n                throw new ErrorWithStatus({\n                  message: REPORTS_MESSAGES.LOCATION_IS_REQUIRED,\n                  status: HTTP_STATUS.BAD_REQUEST,\n                });\n              }\n            }\n            return true;\n          },\n        },\n      },\n    },\n    [\"body\"],\n  ),\n);\n\nexport const updateReportValidator = validate(\n  checkSchema({\n    reportID: {\n      in: \"params\",\n      trim: true,\n      notEmpty: {\n        errorMessage: REPORTS_MESSAGES.REPORT_ID_IS_REQUIRED,\n      },\n      isMongoId: {\n        errorMessage: REPORTS_MESSAGES.INVALID_REPORT_ID,\n      },\n      custom: {\n        options: async (value) => {\n          const report = await databaseService.reports.findOne({\n            _id: new ObjectId(value),\n          });\n          if (!report) {\n            throw new ErrorWithStatus({\n              status: HTTP_STATUS.NOT_FOUND,\n              message: REPORTS_MESSAGES.REPORT_NOT_FOUND.replace(\"%s\", value),\n            });\n          }\n          return true;\n        },\n      },\n    },\n    newStatus: {\n      in: \"body\",\n      trim: true,\n      notEmpty: {\n        errorMessage: REPORTS_MESSAGES.STATUS_IS_REQUIRED,\n      },\n      isIn: {\n        options: [Object.values(ReportStatus)],\n        errorMessage: REPORTS_MESSAGES.INVALID_NEW_STATUS,\n      },\n      custom: {\n        options: async (value, { req }) => {\n          const report = await databaseService.reports.findOne({\n            _id: new ObjectId(req.params?.reportID),\n          });\n\n          if (!report) {\n            throw new ErrorWithStatus({\n              status: HTTP_STATUS.NOT_FOUND,\n              message: REPORTS_MESSAGES.REPORT_NOT_FOUND.replace(\"%s\", value),\n            });\n          }\n\n          const allowedStatuses: Record<ReportStatus, ReportStatus[]> = {\n            [ReportStatus.Pending]: [ReportStatus.InProgress, ReportStatus.Cancel],\n            [ReportStatus.InProgress]: [ReportStatus.Resolved],\n            [ReportStatus.Resolved]: [],\n            [ReportStatus.Cancel]: [],\n          };\n\n          const currentStatus = report.status as ReportStatus;\n\n          if (!allowedStatuses[currentStatus]?.includes(value)) {\n            throw new ErrorWithStatus({\n              status: HTTP_STATUS.BAD_REQUEST,\n              message: REPORTS_MESSAGES.INVALID_NEW_STATUS,\n            });\n          }\n\n          return true;\n        },\n      },\n    },\n    priority: {\n      in: \"body\",\n      trim: true,\n      optional: true,\n      notEmpty: {\n        errorMessage: REPORTS_MESSAGES.PRIORITY_IS_REQUIRED,\n      },\n      isIn: {\n        options: [Object.values(ReportPriority)],\n        errorMessage: REPORTS_MESSAGES.INVALID_PRIORITY,\n      },\n    },\n  }),\n);\n\nexport const getAllReportValidator = validate(\n  checkSchema({\n    type: {\n      in: [\"query\"],\n      optional: true,\n      trim: true,\n      notEmpty: {\n        errorMessage: REPORTS_MESSAGES.TYPE_IS_REQUIRED,\n      },\n      isIn: {\n        options: [Object.values(ReportTypeEnum)],\n        errorMessage: REPORTS_MESSAGES.INVALID_TYPE,\n      },\n    },\n    userID: {\n      in: [\"query\"],\n      optional: true,\n      trim: true,\n      notEmpty: {\n        errorMessage: REPORTS_MESSAGES.USER_ID_IS_REQUIRED,\n      },\n      isMongoId: {\n        errorMessage: REPORTS_MESSAGES.USER_ID_INVALID,\n      },\n      custom: {\n        options: async (value) => {\n          const findUser = await databaseService.users.findOne({ _id: new ObjectId(value) });\n\n          if (!findUser) {\n            throw new ErrorWithStatus({\n              message: USERS_MESSAGES.USER_NOT_FOUND,\n              status: HTTP_STATUS.NOT_FOUND,\n            });\n          }\n\n          return true;\n        },\n      },\n    },\n    date: {\n      in: [\"query\"],\n      optional: true,\n      trim: true,\n      isISO8601: {\n        errorMessage: REPORTS_MESSAGES.DATE_IN_VALID,\n      },\n      custom: {\n        options: (value) => {\n          const regrex = /^\\d{4}-\\d{2}-\\d{2}$/;\n          if (!regrex.test(value)) {\n            throw new ErrorWithStatus({\n              message: REPORTS_MESSAGES.DATE_IN_VALID,\n              status: HTTP_STATUS.BAD_REQUEST,\n            });\n          }\n\n          return true;\n        },\n      },\n    },\n  }),\n);\n\nexport const getAllUserReportValidator = validate(\n  checkSchema({\n    status: {\n      in: [\"query\"],\n      optional: true,\n      trim: true,\n      notEmpty: {\n        errorMessage: REPORTS_MESSAGES.STATUS_IS_REQUIRED,\n      },\n      isIn: {\n        options: [Object.values(ReportStatus)],\n        errorMessage: REPORTS_MESSAGES.INVALID_STATUS,\n      },\n    },\n  }),\n);"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/middlewares/staff.middlewares.ts:\n"
      },
      {
        "text": "import type { NextFunction, Request, Response } from \"express\";\n\nimport { ObjectId } from \"mongodb\";\n\nimport type { TokenPayLoad } from \"~/models/requests/users.requests\";\n\nimport { Role } from \"~/constants/enums\";\nimport HTTP_STATUS from \"~/constants/http-status\";\nimport { USERS_MESSAGES } from \"~/constants/messages\";\nimport { ErrorWithStatus } from \"~/models/errors\";\nimport databaseService from \"~/services/database.services\";\n\nexport async function isStaffValidator(req: Request, res: Response, next: NextFunction) {\n  try {\n    const { user_id } = req.decoded_authorization as TokenPayLoad;\n    const user = await databaseService.users.findOne({ _id: new ObjectId(user_id) });\n    if (user === null) {\n      throw new ErrorWithStatus({\n        message: USERS_MESSAGES.USER_NOT_FOUND,\n        status: HTTP_STATUS.NOT_FOUND,\n      });\n    }\n    if (user.role !== Role.Staff) {\n      throw new ErrorWithStatus({\n        message: USERS_MESSAGES.ACCESS_DENIED_STAFF_ONLY,\n        status: HTTP_STATUS.FORBIDDEN,\n      });\n    }\n    next();\n  }\n  catch (error) {\n    let status: number = HTTP_STATUS.INTERNAL_SERVER_ERROR;\n    let message = \"Internal Server Error\";\n\n    if (error instanceof ErrorWithStatus) {\n      status = error.status;\n      message = error.message;\n    }\n    else if (error instanceof Error) {\n      message = error.message;\n    }\n    res.status(status).json({ message });\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/middlewares/supplier.middlewares.ts:\n"
      },
      {
        "text": "import { checkSchema } from \"express-validator\";\nimport { ObjectId } from \"mongodb\";\n\nimport { SupplierStatus } from \"~/constants/enums\";\nimport HTTP_STATUS from \"~/constants/http-status\";\nimport { REPORTS_MESSAGES, SUPPLIER_MESSAGE } from \"~/constants/messages\";\nimport { ErrorWithStatus } from \"~/models/errors\";\nimport databaseService from \"~/services/database.services\";\nimport { validate } from \"~/utils/validation\";\n\nexport const createSupplierValidator = validate(\n  checkSchema(\n    {\n      name: {\n        in: [\"body\"],\n        trim: true,\n        notEmpty: {\n          errorMessage: SUPPLIER_MESSAGE.NAME_IS_REQUIRED,\n        },\n        isString: {\n          errorMessage: SUPPLIER_MESSAGE.NAME_IN_VALID,\n        },\n        isLength: {\n          options: { max: 255 },\n          errorMessage: SUPPLIER_MESSAGE.NAME_TOO_LONG,\n        },\n      },\n      address: {\n        in: [\"body\"],\n        trim: true,\n        isString: {\n          errorMessage: SUPPLIER_MESSAGE.ADDRESS_IN_VALID,\n        },\n        isLength: {\n          options: { max: 250 },\n          errorMessage: SUPPLIER_MESSAGE.ADDRESS_TOO_LONG,\n        },\n      },\n      phone_number: {\n        in: [\"body\"],\n        isString: {\n          errorMessage: SUPPLIER_MESSAGE.ADDRESS_IN_VALID,\n        },\n        matches: {\n          options: [/^\\d{10}$/],\n          errorMessage: SUPPLIER_MESSAGE.PHONE_NUMBER_INVALID,\n        },\n      },\n      contract_fee: {\n        in: [\"body\"],\n        isDecimal: {\n          options: { decimal_digits: \"1,2\" },\n          errorMessage: SUPPLIER_MESSAGE.FEE_IN_VALID,\n        },\n      },\n    },\n    [\"body\"],\n  ),\n);\n\nexport const updateSupplierValidator = validate(\n  checkSchema(\n    {\n      id: {\n        in: [\"params\"],\n        trim: true,\n        notEmpty: {\n          errorMessage: SUPPLIER_MESSAGE.SUPPLIER_ID_IS_REQUIRED,\n        },\n        isMongoId: {\n          errorMessage: SUPPLIER_MESSAGE.SUPPLIER_ID_IN_VALID,\n        },\n        custom: {\n          options: async (value: string) => {\n            const findSupplier = await databaseService.suppliers.findOne(new ObjectId(value));\n\n            if (!findSupplier) {\n              throw new ErrorWithStatus({\n                message: SUPPLIER_MESSAGE.SUPPLIER_NOT_FOUND.replace(\"%s\", value),\n                status: HTTP_STATUS.NOT_FOUND,\n              });\n            }\n          },\n        },\n      },\n      name: {\n        in: [\"body\"],\n        optional: true,\n        trim: true,\n        notEmpty: {\n          errorMessage: SUPPLIER_MESSAGE.NAME_IS_REQUIRED,\n        },\n        isString: {\n          errorMessage: SUPPLIER_MESSAGE.NAME_IN_VALID,\n        },\n        isLength: {\n          options: { max: 255 },\n          errorMessage: SUPPLIER_MESSAGE.NAME_TOO_LONG,\n        },\n      },\n      address: {\n        in: [\"body\"],\n        optional: true,\n        trim: true,\n        isString: {\n          errorMessage: SUPPLIER_MESSAGE.ADDRESS_IN_VALID,\n        },\n        isLength: {\n          options: { max: 250 },\n          errorMessage: SUPPLIER_MESSAGE.ADDRESS_TOO_LONG,\n        },\n      },\n      phone_number: {\n        in: [\"body\"],\n        optional: true,\n        isString: {\n          errorMessage: SUPPLIER_MESSAGE.ADDRESS_IN_VALID,\n        },\n        matches: {\n          options: [/^\\d{10}$/],\n          errorMessage: SUPPLIER_MESSAGE.PHONE_NUMBER_INVALID,\n        },\n      },\n      contract_fee: {\n        in: [\"body\"],\n        optional: true,\n        isDecimal: {\n          options: { decimal_digits: \"1,2\" },\n          errorMessage: SUPPLIER_MESSAGE.FEE_IN_VALID,\n        },\n      },\n    },\n    [\"body\"],\n  ),\n);\n\nexport const updateSupplierStatusValidator = validate(\n  checkSchema(\n    {\n      id: {\n        in: [\"params\"],\n        trim: true,\n        notEmpty: {\n          errorMessage: SUPPLIER_MESSAGE.SUPPLIER_ID_IS_REQUIRED,\n        },\n        isMongoId: {\n          errorMessage: SUPPLIER_MESSAGE.SUPPLIER_ID_IN_VALID,\n        },\n        custom: {\n          options: async (value: string) => {\n            const findSupplier = await databaseService.suppliers.findOne(new ObjectId(value));\n\n            if (!findSupplier) {\n              throw new ErrorWithStatus({\n                message: SUPPLIER_MESSAGE.SUPPLIER_NOT_FOUND.replace(\"%s\", value),\n                status: HTTP_STATUS.NOT_FOUND,\n              });\n            }\n          },\n        },\n      },\n      newStatus: {\n        in: [\"body\"],\n        trim: true,\n        notEmpty: {\n          errorMessage: SUPPLIER_MESSAGE.STATUS_IS_REQUIRED,\n        },\n        isString: {\n          errorMessage: SUPPLIER_MESSAGE.STATUS_MUST_BE_STRING,\n        },\n        custom: {\n          options: (value) => {\n            if (!Object.values(SupplierStatus).includes(value)) {\n              throw new ErrorWithStatus({\n                message: SUPPLIER_MESSAGE.STATUS_INVALID,\n                status: HTTP_STATUS.BAD_REQUEST,\n              });\n            }\n\n            return true;\n          },\n        },\n      },\n    },\n    [\"body\"],\n  ),\n);\n\nexport const getIdValidator = validate(\n  checkSchema({\n    reportID: {\n      in: [\"params\"],\n      trim: true,\n      notEmpty: {\n        errorMessage: REPORTS_MESSAGES.REPORT_ID_IS_REQUIRED,\n      },\n      isMongoId: {\n        errorMessage: REPORTS_MESSAGES.INVALID_REPORT_ID,\n      },\n      custom: {\n        options: async (value) => {\n          const result = await databaseService.reports.findOne({ _id: new ObjectId(value) });\n\n          if (!result) {\n            throw new ErrorWithStatus({\n              message: REPORTS_MESSAGES.REPORT_NOT_FOUND.replace(\"%s\", value),\n              status: HTTP_STATUS.NOT_FOUND,\n            });\n          }\n\n          return true;\n        },\n      },\n    },\n  }),\n);"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/middlewares/users.middlewares.ts:\n"
      },
      {
        "text": "import type { NextFunction, Request, Response } from \"express\";\nimport type { Meta, ParamSchema } from \"express-validator\";\n\nimport bcrypt from \"bcryptjs\";\nimport { checkSchema } from \"express-validator\";\nimport { JsonWebTokenError } from \"jsonwebtoken\";\nimport { capitalize } from \"lodash\";\nimport { ObjectId } from \"mongodb\";\nimport process from \"node:process\";\n\nimport type { TokenPayLoad } from \"~/models/requests/users.requests\";\n\nimport { UserVerifyStatus } from \"~/constants/enums\";\nimport HTTP_STATUS from \"~/constants/http-status\";\nimport { USERS_MESSAGES } from \"~/constants/messages\";\nimport { REGEX_USERNAME } from \"~/constants/regex\";\nimport { ErrorWithStatus } from \"~/models/errors\";\nimport databaseService from \"~/services/database.services\";\nimport usersService from \"~/services/users.services\";\nimport { verifyToken } from \"~/utils/jwt\";\nimport { validate } from \"~/utils/validation\";\n\nconst fullNameSchema: ParamSchema = {\n  notEmpty: {\n    errorMessage: USERS_MESSAGES.FULL_NAME_IS_REQUIRED,\n  },\n  isString: {\n    errorMessage: USERS_MESSAGES.FULL_NAME_MUST_BE_A_STRING,\n  },\n  trim: true,\n  isLength: {\n    options: {\n      min: 1,\n      max: 50,\n    },\n    errorMessage: USERS_MESSAGES.FULL_NAME_LENGTH_MUST_BE_FROM_1_TO_50,\n  },\n};\n\nconst passwordSchema: ParamSchema = {\n  notEmpty: {\n    errorMessage: USERS_MESSAGES.PASSWORD_IS_REQUIRED,\n  },\n  isString: {\n    errorMessage: USERS_MESSAGES.PASSWORD_MUST_BE_A_STRING,\n  },\n  isLength: {\n    options: {\n      min: 8,\n      max: 30,\n    },\n    errorMessage: USERS_MESSAGES.PASSWORD_LENGTH_MUST_BE_FROM_8_TO_30,\n  },\n};\n\nconst confirmPasswordSchema: ParamSchema = {\n  notEmpty: {\n    errorMessage: USERS_MESSAGES.CONFIRM_PASSWORD_IS_REQUIRED,\n  },\n  isString: {\n    errorMessage: USERS_MESSAGES.CONFIRM_PASSWORD_MUST_BE_A_STRING,\n  },\n  isLength: {\n    options: {\n      min: 8,\n      max: 30,\n    },\n    errorMessage: USERS_MESSAGES.CONFIRM_PASSWORD_LENGTH_MUST_BE_FROM_8_TO_30,\n  },\n  custom: {\n    options: (value: string, { req }: Meta) => {\n      if (value !== req.body.password) {\n        throw new Error(USERS_MESSAGES.CONFIRM_PASSWORD_MUST_BE_THE_SAME_AS_PASSWORD);\n      }\n      return true;\n    },\n  },\n};\n\nexport const loginValidator = validate(\n  checkSchema(\n    {\n      email: {\n        notEmpty: {\n          errorMessage: USERS_MESSAGES.EMAIL_IS_REQUIRED,\n        },\n        isEmail: {\n          errorMessage: USERS_MESSAGES.EMAIL_IS_INVALID,\n        },\n        trim: true,\n        custom: {\n          options: async (value: string, { req }: Meta) => {\n            const user = await databaseService.users.findOne({ email: value });\n\n            if (user === null) {\n              throw new Error(USERS_MESSAGES.EMAIL_OR_PASSWORD_IS_INCORRECT);\n            }\n\n            const isMatch = bcrypt.compareSync(req.body.password, user.password);\n\n            if (!isMatch) {\n              throw new Error(USERS_MESSAGES.EMAIL_OR_PASSWORD_IS_INCORRECT);\n            }\n\n            req.user = user;\n            return true;\n          },\n        },\n      },\n      password: {\n        notEmpty: {\n          errorMessage: USERS_MESSAGES.PASSWORD_IS_REQUIRED,\n        },\n        isString: {\n          errorMessage: USERS_MESSAGES.PASSWORD_MUST_BE_A_STRING,\n        },\n        isLength: {\n          options: {\n            min: 8,\n            max: 30,\n          },\n          errorMessage: USERS_MESSAGES.PASSWORD_LENGTH_MUST_BE_FROM_8_TO_30,\n        },\n      },\n    },\n    [\"body\"],\n  ),\n);\n\nexport const registerValidator = validate(\n  checkSchema(\n    {\n      fullname: fullNameSchema,\n      email: {\n        notEmpty: {\n          errorMessage: USERS_MESSAGES.EMAIL_IS_REQUIRED,\n        },\n        isEmail: {\n          errorMessage: USERS_MESSAGES.EMAIL_IS_INVALID,\n        },\n        trim: true,\n        custom: {\n          options: async (value: string) => {\n            const isExist = await usersService.checkEmailExist(value);\n            if (isExist) {\n              throw new Error(USERS_MESSAGES.EMAIL_ALREADY_EXISTS);\n            }\n            return true;\n          },\n        },\n      },\n      password: passwordSchema,\n      confirm_password: confirmPasswordSchema,\n      avatar: {\n        optional: true,\n        isString: {\n          errorMessage: USERS_MESSAGES.IMAGE_URL_MUST_BE_A_STRING,\n        },\n        trim: true,\n        isURL: {\n          errorMessage: USERS_MESSAGES.IMAGE_URL_MUST_BE_VALID,\n        },\n      },\n    },\n    [\"body\"],\n  ),\n);\n\nexport const accessTokenValidator = validate(\n  checkSchema(\n    {\n      Authorization: {\n        trim: true,\n        custom: {\n          options: async (value: string, { req }) => {\n            const accessToken = value.split(\" \")[1];\n            if (!accessToken) {\n              throw new ErrorWithStatus({\n                message: USERS_MESSAGES.ACCESS_TOKEN_IS_REQUIRED,\n                status: HTTP_STATUS.UNAUTHORIZED,\n              });\n            }\n            try {\n              const decoded_authorization = await verifyToken({\n                token: accessToken,\n                secretOrPublicKey: process.env.JWT_SECRET_ACCESS_TOKEN as string,\n              })\n              ;(req as Request).decoded_authorization = decoded_authorization;\n            }\n            catch (error) {\n              throw new ErrorWithStatus({\n                message: capitalize((error as JsonWebTokenError).message),\n                status: HTTP_STATUS.UNAUTHORIZED,\n              });\n            }\n            return true;\n          },\n        },\n      },\n    },\n    [\"headers\"],\n  ),\n);\n\nexport const refreshTokenValidator = validate(\n  checkSchema(\n    {\n      refresh_token: {\n        trim: true,\n        custom: {\n          options: async (value: string, { req }) => {\n            try {\n              const [decoded_refresh_token, refresh_token] = await Promise.all([\n                verifyToken({ token: value, secretOrPublicKey: process.env.JWT_SECRET_REFRESH_TOKEN as string }),\n                databaseService.refreshTokens.findOne({\n                  token: value,\n                }),\n              ]);\n\n              if (refresh_token === null) {\n                throw new ErrorWithStatus({\n                  message: USERS_MESSAGES.USED_REFRESH_TOKEN_OR_NOT_EXIST,\n                  status: HTTP_STATUS.UNAUTHORIZED,\n                });\n              }\n              ;(req as Request).decoded_refresh_token = decoded_refresh_token;\n            }\n            catch (error) {\n              if (error instanceof JsonWebTokenError) {\n                throw new ErrorWithStatus({\n                  message: capitalize((error as JsonWebTokenError).message),\n                  status: HTTP_STATUS.UNAUTHORIZED,\n                });\n              }\n              throw error;\n            }\n            return true;\n          },\n        },\n      },\n    },\n    [\"body\"],\n  ),\n);\n\nexport const forgotPasswordValidator = validate(\n  checkSchema(\n    {\n      email: {\n        notEmpty: {\n          errorMessage: USERS_MESSAGES.EMAIL_IS_REQUIRED,\n        },\n        isEmail: {\n          errorMessage: USERS_MESSAGES.EMAIL_IS_INVALID,\n        },\n        trim: true,\n        custom: {\n          options: async (value, { req }) => {\n            const user = await databaseService.users.findOne({ email: value });\n            if (user === null) {\n              throw new ErrorWithStatus({\n                message: USERS_MESSAGES.USER_NOT_FOUND,\n                status: HTTP_STATUS.NOT_FOUND,\n              });\n            }\n            req.user = user;\n            return true;\n          },\n        },\n      },\n    },\n    [\"body\"],\n  ),\n);\n\nexport const verifyForgotPasswordTokenValidator = validate(\n  checkSchema(\n    {\n      forgot_password_token: {\n        trim: true,\n        custom: {\n          options: async (value: string, { req }) => {\n            if (!value) {\n              throw new ErrorWithStatus({\n                message: USERS_MESSAGES.FORGOT_PASSWORD_TOKEN_IS_REQUIRED,\n                status: HTTP_STATUS.UNAUTHORIZED,\n              });\n            }\n            try {\n              const decoded_forgot_password_token = await verifyToken({\n                token: value,\n                secretOrPublicKey: process.env.JWT_SECRET_FORGOT_PASSWORD_TOKEN as string,\n              })\n              ;(req as Request).decoded_forgot_password_token = decoded_forgot_password_token;\n\n              const { user_id } = decoded_forgot_password_token;\n              const user = await databaseService.users.findOne({ _id: new ObjectId(user_id) });\n              if (user === null) {\n                throw new ErrorWithStatus({\n                  message: USERS_MESSAGES.USER_NOT_FOUND,\n                  status: HTTP_STATUS.NOT_FOUND,\n                });\n              }\n              if (user.forgot_password_token !== value) {\n                throw new ErrorWithStatus({\n                  message: USERS_MESSAGES.FORGOT_PASSWORD_TOKEN_IS_INCORRECT,\n                  status: HTTP_STATUS.UNAUTHORIZED,\n                });\n              }\n              (req as Request).user = user;\n            }\n            catch (error) {\n              if (error instanceof JsonWebTokenError) {\n                throw new ErrorWithStatus({\n                  message: capitalize((error as JsonWebTokenError).message),\n                  status: HTTP_STATUS.UNAUTHORIZED,\n                });\n              }\n              throw error;\n            }\n            return true;\n          },\n        },\n      },\n    },\n    [\"body\"],\n  ),\n);\n\nexport const resetPasswordValidator = validate(\n  checkSchema(\n    {\n      password: passwordSchema,\n      confirm_password: confirmPasswordSchema,\n    },\n    [\"body\"],\n  ),\n);\n\nexport const checkNewPasswordValidator = validate(\n  checkSchema(\n    {\n      password: {\n        custom: {\n          options: (value: string, { req }: Meta) => {\n            const user = (req as Request).user;\n\n            if (!user || !user.password) {\n              throw new ErrorWithStatus({\n                message: USERS_MESSAGES.USER_NOT_FOUND,\n                status: HTTP_STATUS.NOT_FOUND,\n              });\n            }\n\n            const isSameAsOldPassword = bcrypt.compareSync(value, user.password);\n\n            if (isSameAsOldPassword) {\n              throw new Error(USERS_MESSAGES.NEW_PASSWORD_CANNOT_BE_THE_SAME_AS_OLD_PASSWORD);\n            }\n\n            return true;\n          },\n        },\n      },\n    },\n    [\"body\"],\n  ),\n);\n\nexport const emailVerifyTokenValidator = validate(\n  checkSchema(\n    {\n      email_verify_token: {\n        trim: true,\n        custom: {\n          options: async (value: string, { req }) => {\n            if (!value) {\n              throw new ErrorWithStatus({\n                message: USERS_MESSAGES.EMAIL_VERIFY_TOKEN_IS_REQUIRED,\n                status: HTTP_STATUS.UNAUTHORIZED,\n              });\n            }\n            try {\n              const decoded_email_verify_token = await verifyToken({\n                token: value,\n                secretOrPublicKey: process.env.JWT_SECRET_EMAIL_VERIFY_TOKEN as string,\n              })\n              ;(req as Request).decoded_email_verify_token = decoded_email_verify_token;\n            }\n            catch (error) {\n              if (error instanceof JsonWebTokenError) {\n                throw new ErrorWithStatus({\n                  message: capitalize((error as JsonWebTokenError).message),\n                  status: HTTP_STATUS.UNAUTHORIZED,\n                });\n              }\n              throw error;\n            }\n            return true;\n          },\n        },\n      },\n    },\n    [\"body\"],\n  ),\n);\n\nexport function verifiedUserValidator(req: Request, res: Response, next: NextFunction) {\n  const { verify } = req.decoded_authorization as TokenPayLoad;\n  if (verify !== UserVerifyStatus.Verified) {\n    return next(\n      new ErrorWithStatus({\n        message: USERS_MESSAGES.USER_IS_NOT_VERIFIED,\n        status: HTTP_STATUS.FORBIDDEN,\n      }),\n    );\n  }\n  next();\n}\n\nexport const changePasswordValidator = validate(\n  checkSchema(\n    {\n      old_password: {\n        ...passwordSchema,\n        custom: {\n          options: async (value, { req }) => {\n            const { user_id } = req.decoded_authorization as TokenPayLoad;\n            const user = await databaseService.users.findOne({\n              _id: new ObjectId(user_id),\n            });\n            if (user === null) {\n              throw new ErrorWithStatus({\n                message: USERS_MESSAGES.USER_NOT_FOUND,\n                status: HTTP_STATUS.UNAUTHORIZED,\n              });\n            }\n            const isMatch = bcrypt.compareSync(value, user.password);\n            if (!isMatch) {\n              throw new ErrorWithStatus({\n                message: USERS_MESSAGES.OLD_PASSWORD_NOT_MATCH,\n                status: HTTP_STATUS.UNAUTHORIZED,\n              });\n            }\n            return true;\n          },\n        },\n      },\n      password: { ...passwordSchema, custom: {\n        options: (value: string, { req }: Meta) => {\n          if (value === req.body.old_password) {\n            throw new Error(USERS_MESSAGES.NEW_PASSWORD_MUST_BE_DIFFERENT_FROM_OLD_PASSWORD);\n          }\n          return true;\n        },\n      } },\n      confirm_password: confirmPasswordSchema,\n    },\n    [\"body\"],\n  ),\n);\n\nexport const updateMeValidator = validate(\n  checkSchema(\n    {\n      fullname: {\n        optional: true,\n        ...fullNameSchema,\n        notEmpty: undefined,\n      },\n      location: {\n        optional: true,\n        isString: {\n          errorMessage: USERS_MESSAGES.LOCATION_MUST_BE_A_STRING,\n        },\n        trim: true,\n        isLength: {\n          options: {\n            min: 1,\n            max: 200,\n          },\n          errorMessage: USERS_MESSAGES.LOCATION_LENGTH_MUST_BE_LESS_THAN_200,\n        },\n      },\n      username: {\n        optional: true,\n        isString: {\n          errorMessage: USERS_MESSAGES.USERNAME_MUST_BE_A_STRING,\n        },\n        trim: true,\n        custom: {\n          options: async (value: string) => {\n            if (REGEX_USERNAME.test(value) === false) {\n              throw new Error(USERS_MESSAGES.USERNAME_MUST_BE_A_STRING);\n            }\n            const user = await databaseService.users.findOne({ username: value });\n\n            if (user) {\n              throw new Error(USERS_MESSAGES.USERNAME_ALREADY_EXISTS);\n            }\n            return true;\n          },\n        },\n      },\n      avatar: {\n        optional: true,\n        isString: {\n          errorMessage: USERS_MESSAGES.IMAGE_URL_MUST_BE_A_STRING,\n        },\n        trim: true,\n      },\n    },\n    [\"body\"],\n  ),\n);"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/middlewares/wallet.middlewares.ts:\n"
      },
      {
        "text": "import { checkSchema } from 'express-validator'\nimport { ObjectId } from 'mongodb'\n\nimport { TransactionTypeEnum, WalletStatus } from '~/constants/enums'\nimport HTTP_STATUS from '~/constants/http-status'\nimport { USERS_MESSAGES, WALLETS_MESSAGE } from '~/constants/messages'\nimport { ErrorWithStatus } from '~/models/errors'\nimport databaseService from '~/services/database.services'\nimport { validate } from '~/utils/validation'\n\nexport const increaseBalanceValidator = validate(\n  checkSchema(\n    {\n      amount: {\n        in: ['body'],\n        trim: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.AMOUNT_IS_REQUIRED\n        },\n        isDecimal: {\n          options: { decimal_digits: '1,2' },\n          errorMessage: WALLETS_MESSAGE.AMOUNT_NUMERIC\n        },\n        custom: {\n          options: async (value, { req }) => {\n            if (parseFloat(value) <= 0) {\n              throw new ErrorWithStatus({\n                message: WALLETS_MESSAGE.AMOUNT_NEGATIVE,\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n\n            const { user_id } = req.body\n\n            const findUser = await databaseService.users.findOne({ _id: new ObjectId(user_id) })\n            if (!findUser) {\n              throw new ErrorWithStatus({\n                message: USERS_MESSAGES.USER_NOT_FOUND,\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n\n            const findWallet = await databaseService.wallets.findOne({ user_id: new ObjectId(findUser._id) })\n            if (!findWallet) {\n              throw new ErrorWithStatus({\n                message: WALLETS_MESSAGE.USER_NOT_HAVE_WALLET.replace('%s', user_id),\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n\n            return true\n          }\n        }\n      },\n\n      fee: {\n        in: ['body'],\n        trim: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.FEE_IS_REQUIRED\n        },\n        isDecimal: {\n          options: { decimal_digits: '1,2' },\n          errorMessage: WALLETS_MESSAGE.FEE_NEGATIVE\n        },\n        custom: {\n          options: (value) => {\n            if (parseFloat(value) < 0) {\n              throw new ErrorWithStatus({\n                message: WALLETS_MESSAGE.FEE_NEGATIVE,\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n            return true\n          }\n        }\n      },\n      description: {\n        in: ['body'],\n        trim: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.DESCRIPTION_IS_REQUIED\n        },\n        isString: {\n          errorMessage: WALLETS_MESSAGE.DESCRIPTION_INVALID\n        }\n      },\n      transaction_hash: {\n        in: ['body'],\n        trim: true,\n        optional: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.TRANSACRION_HASH_REQUIRED\n        },\n        isString: {\n          errorMessage: WALLETS_MESSAGE.TRANSACRION_HASH_INVALID\n        }\n      },\n      message: {\n        in: ['body'],\n        trim: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.MESSAGE_IS_REQUIED\n        },\n        isString: {\n          errorMessage: WALLETS_MESSAGE.MESSAGE_INVALID\n        },\n        custom: {\n          options: async (value, { req }) => {\n            const { user_id } = req.body\n\n            const findUser = await databaseService.users.findOne({ _id: new ObjectId(user_id) })\n            if (!findUser) {\n              throw new ErrorWithStatus({\n                message: USERS_MESSAGES.USER_NOT_FOUND,\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n\n            const findWallet = await databaseService.wallets.findOne({ user_id: new ObjectId(findUser._id) })\n            if (!findWallet) {\n              throw new ErrorWithStatus({\n                message: WALLETS_MESSAGE.USER_NOT_HAVE_WALLET.replace('%s', user_id),\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n\n            if (findWallet.status === WalletStatus.Frozen) {\n              throw new ErrorWithStatus({\n                message: WALLETS_MESSAGE.WALLET_HAS_BEEN_FROZEN,\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n\n            return true\n          }\n        }\n      },\n      user_id: {\n        in: ['body'],\n        trim: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.USER_ID_IS_REQUIRED\n        },\n        isMongoId: {\n          errorMessage: WALLETS_MESSAGE.USER_ID_INVALID\n        },\n        custom: {\n          options: async (value) => {\n            const findUser = await databaseService.users.findOne({ _id: new ObjectId(value) })\n            if (!findUser) {\n              throw new ErrorWithStatus({\n                message: USERS_MESSAGES.USER_NOT_FOUND,\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n            return true\n          }\n        }\n      }\n    },\n    ['body']\n  )\n)\n\nexport const decreaseBalanceValidator = validate(\n  checkSchema(\n    {\n      amount: {\n        in: ['body'],\n        trim: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.AMOUNT_IS_REQUIRED\n        },\n        isDecimal: {\n          options: { decimal_digits: '1,2' },\n          errorMessage: WALLETS_MESSAGE.AMOUNT_NUMERIC\n        },\n        custom: {\n          options: async (value, { req }) => {\n            if (parseFloat(value) <= 0) {\n              throw new ErrorWithStatus({\n                message: WALLETS_MESSAGE.AMOUNT_NEGATIVE,\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n\n            const { user_id } = req.body\n\n            const findUser = await databaseService.users.findOne({ _id: new ObjectId(user_id) })\n            if (!findUser) {\n              throw new ErrorWithStatus({\n                message: USERS_MESSAGES.USER_NOT_FOUND,\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n\n            const findWallet = await databaseService.wallets.findOne({ user_id: new ObjectId(findUser._id) })\n            if (!findWallet) {\n              throw new ErrorWithStatus({\n                message: WALLETS_MESSAGE.USER_NOT_HAVE_WALLET.replace('%s', user_id),\n                status: HTTP_STATUS.NOT_FOUND\n              })\n            }\n\n            if (findWallet.status === WalletStatus.Frozen) {\n              throw new ErrorWithStatus({\n                message: WALLETS_MESSAGE.WALLET_HAS_BEEN_FROZEN,\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n\n            const amount = Number.parseFloat(value.toString())\n            const currentBalance = Number.parseFloat(findWallet.balance.toString())\n\n            if (currentBalance < amount) {\n              throw new ErrorWithStatus({\n                message: WALLETS_MESSAGE.INSUFFICIENT_BALANCE.replace('%s', user_id),\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n\n            return true\n          }\n        }\n      },\n      fee: {\n        in: ['body'],\n        trim: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.FEE_IS_REQUIRED\n        },\n        isDecimal: {\n          options: { decimal_digits: '1,2' },\n          errorMessage: WALLETS_MESSAGE.FEE_NEGATIVE\n        },\n        custom: {\n          options: (value) => {\n            if (parseFloat(value) < 0) {\n              throw new ErrorWithStatus({\n                message: WALLETS_MESSAGE.FEE_NEGATIVE,\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n            return true\n          }\n        }\n      },\n      description: {\n        in: ['body'],\n        trim: true,\n        optional: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.DESCRIPTION_IS_REQUIED\n        },\n        isString: {\n          errorMessage: WALLETS_MESSAGE.DESCRIPTION_INVALID\n        }\n      },\n      transaction_hash: {\n        in: ['body'],\n        trim: true,\n        optional: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.TRANSACRION_HASH_REQUIRED\n        },\n        isString: {\n          errorMessage: WALLETS_MESSAGE.TRANSACRION_HASH_INVALID\n        }\n      },\n      message: {\n        in: ['body'],\n        trim: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.MESSAGE_IS_REQUIED\n        },\n        isString: {\n          errorMessage: WALLETS_MESSAGE.MESSAGE_INVALID\n        }\n      }\n    },\n    ['body']\n  )\n)\n\nexport const updateWalletStatusValidator = validate(\n  checkSchema({\n    id: {\n      in: ['params'],\n      trim: true,\n      notEmpty: {\n        errorMessage: WALLETS_MESSAGE.WALLET_ID_IS_REQUIED\n      },\n      isMongoId: {\n        errorMessage: WALLETS_MESSAGE.WALLET_ID_INVALID\n      },\n      custom: {\n        options: async (value) => {\n          const findWallet = await databaseService.wallets.findOne({ _id: new ObjectId(value) })\n          if (!findWallet) {\n            throw new ErrorWithStatus({\n              message: WALLETS_MESSAGE.WALLET_NOT_FOUND.replace('%s', value),\n              status: HTTP_STATUS.NOT_FOUND\n            })\n          }\n        }\n      }\n    },\n    newStatus: {\n      in: ['body'],\n      trim: true,\n      notEmpty: {\n        errorMessage: WALLETS_MESSAGE.STATUS_IS_REQUIED\n      },\n      isIn: {\n        options: [[WalletStatus.Active, WalletStatus.Frozen]],\n        errorMessage: WALLETS_MESSAGE.STATUS_INVALID\n      }\n    }\n  })\n)"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/middlewares/withdraw.middlewares.ts:\n"
      },
      {
        "text": "import { checkSchema } from 'express-validator'\nimport { WithDrawalStatus } from '~/constants/enums'\nimport HTTP_STATUS from '~/constants/http-status'\nimport { WALLETS_MESSAGE } from '~/constants/messages'\nimport { ErrorWithStatus } from '~/models/errors'\nimport { validate } from '~/utils/validation'\n\nexport const createWithdrawRequestValidator = validate(\n  checkSchema(\n    {\n      amount: {\n        in: ['body'],\n        trim: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.AMOUNT_IS_REQUIRED\n        },\n        isDecimal: {\n          options: { decimal_digits: '1,2' },\n          errorMessage: WALLETS_MESSAGE.AMOUNT_NUMERIC\n        },\n        custom: {\n          options: (value) => {\n            if (parseFloat(value) <= 0) {\n              throw new ErrorWithStatus({\n                message: WALLETS_MESSAGE.AMOUNT_NEGATIVE,\n                status: HTTP_STATUS.BAD_REQUEST\n              })\n            }\n            return true\n          }\n        }\n      },\n\n      account: {\n        in: ['body'],\n        trim: true,\n        notEmpty: {\n          errorMessage: WALLETS_MESSAGE.TYPE_IS_REQUIRED\n        }\n      },\n\n      note: {\n        in: ['body'],\n        optional: true,\n        trim: true,\n        isString: {\n          errorMessage: WALLETS_MESSAGE.NOTE_IN_VALID\n        },\n        isLength: {\n          options: { max: 500 },\n          errorMessage: WALLETS_MESSAGE.NOTE_TOO_LONG\n        }\n      }\n    },\n    ['body']\n  )\n)\n\nexport const updateWithdrawStatusValidator = validate(\n  checkSchema({\n    newStatus: {\n      in: ['body'],\n      trim: true,\n      notEmpty: {\n        errorMessage: WALLETS_MESSAGE.STATUS_IS_REQUIED\n      },\n      isIn: {\n        options: [[WithDrawalStatus.Approved, WithDrawalStatus.Completed, WithDrawalStatus.Rejected]],\n        errorMessage: WALLETS_MESSAGE.INVALID_NEW_STATUS\n      }\n    },\n    reason: {\n      in: ['body'],\n      trim: true,\n      isString: {\n        errorMessage: WALLETS_MESSAGE.REASON_INVALID\n      },\n      isLength: {\n        options: { max: 500 },\n        errorMessage: WALLETS_MESSAGE.REASON_TOO_LONG\n      },\n      custom: {\n        options: (value, { req }) => {\n          if (req.body.newStatus === WithDrawalStatus.Rejected && (!value || value.trim() === '')) {\n            throw new ErrorWithStatus({\n              message: WALLETS_MESSAGE.REASON_INVALID,\n              status: HTTP_STATUS.BAD_REQUEST\n            })\n          }\n\n          return true\n        }\n      }\n    }\n  })\n)"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/errors.ts:\n"
      },
      {
        "text": "import HTTP_STATUS from \"~/constants/http-status\";\nimport { USERS_MESSAGES } from \"~/constants/messages\";\n\ntype ErrorsType = Record<\n  string,\n  {\n    msg: string;\n    [key: string]: any;\n  }\n>;\n\nexport class ErrorWithStatus {\n  message: string;\n  status: number;\n  constructor({ message, status }: { message: string; status: number }) {\n    this.message = message;\n    this.status = status;\n  }\n}\n\nexport class EntityError extends ErrorWithStatus {\n  errors: ErrorsType;\n  constructor({ message = USERS_MESSAGES.VALIDATION_ERROR, errors }: { message?: string; errors: ErrorsType }) {\n    super({ message, status: HTTP_STATUS.UNPROCESSABLE_ENTITY });\n    this.errors = errors;\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/requests/bikes.request.ts:\n"
      },
      {
        "text": "import type { BikeStatus } from \"~/constants/enums\";\n\nexport type CreateBikeReqBody = {\n  station_id: string;\n  status?: BikeStatus;\n  supplier_id?: string;\n  chip_id: string;\n};\n\nexport type GetBikesReqQuery = {\n  chip_id?: string;\n  supplier_id?: string;\n  station_id?: string;\n  status?: BikeStatus;\n  limit?: string;\n  page?: string;\n};\n\nexport type UpdateBikeReqBody = {\n  status?: BikeStatus;\n  station_id?: string;\n  supplier_id?: string;\n  chip_id?: string;\n};"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/requests/refunds.request.ts:\n"
      },
      {
        "text": "import type { Decimal128 } from 'mongodb'\n\nexport type CreateRefundReqBody = {\n  transaction_id: string\n  amount: Decimal128\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/requests/rentals.requests.ts:\n"
      },
      {
        "text": "import type { ObjectId } from 'mongodb'\nimport { BikeStatus, RentalStatus } from '~/constants/enums'\n\nexport type CreateRentalReqBody = {\n  bike_id: ObjectId\n}\n\nexport type RentalParams = {\n  id: string\n}\n\nexport type UpdateRentalReqBody = {\n  end_station?: string\n  end_time?: string\n  status?: RentalStatus\n  total_price?: number\n  reason: string\n}\n\nexport type CancelRentalReqBody = {\n  bikeStatus?: BikeStatus\n  reason: string\n}\n\nexport type EndRentalByAdminOrStaffReqBody = {\n  end_station: string,\n  end_time?: string\n  reason: string\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/requests/reports.requests.ts:\n"
      },
      {
        "text": "import type { ObjectId } from \"mongodb\";\n\nimport type { ReportTypeEnum } from \"../../constants/enums\";\n\ntype GeoLocation = { latitude: number; longitude: number };\n\nexport type CreateReportReqBody = {\n  bike_id?: ObjectId;\n  station_id?: ObjectId;\n  rental_id?: ObjectId;\n  files?: string[];\n  location?: GeoLocation;\n  type: ReportTypeEnum;\n  message: string;\n};"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/requests/suppliers.request.ts:\n"
      },
      {
        "text": "import type { Decimal128 } from 'mongodb'\nimport { SupplierStatus } from '~/constants/enums'\n\nexport type CreateSupplierReqBody = {\n  name: string\n  address: string\n  phone_number: string\n  contract_fee: Decimal128\n}\n\nexport type GetSupplierReqQuery = {\n  status?: SupplierStatus\n  limit?: string\n  page?: string\n}\n\nexport type UpdateSupplierReqBody = Partial<CreateSupplierReqBody>"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/requests/users.requests.ts:\n"
      },
      {
        "text": "import type { JwtPayload } from \"jsonwebtoken\";\n\nimport type { TokenType, UserVerifyStatus } from \"~/constants/enums\";\n\nexport type TokenPayLoad = {\n  user_id: string;\n  token_type: TokenType;\n  verify: UserVerifyStatus;\n  exp: number;\n  iat: number;\n} & JwtPayload;\n\nexport type LoginReqBody = {\n  email: string;\n  password: string;\n};\n\nexport type RegisterReqBody = {\n  fullname: string;\n  email: string;\n  password: string;\n  confirm_password: string;\n  avatar?: string;\n};\n\nexport type LogoutReqBody = {\n  refresh_token: string;\n};\n\nexport type resetPasswordReqBody = {\n  forgot_password_token: string;\n  password: string;\n  confirm_password: string;\n};\n\nexport type VerifyEmailReqBody = {\n  email_verify_token: string;\n};\n\nexport type ChangePasswordReqBody = {\n  old_password: string;\n  password: string;\n  confirm_password: string;\n};\n\nexport type UpdateMeReqBody = {\n  fullname?: string;\n  location?: string;\n  username?: string;\n  avatar?: string;\n};\n\nexport type RefreshTokenReqBody = {\n  refresh_token: string;\n};"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/requests/wallets.requests.ts:\n"
      },
      {
        "text": "import type { Decimal128 } from 'mongodb'\n\nimport type { RefundStatus, TransactionTypeEnum, WithDrawalStatus } from '~/constants/enums'\n\nexport type IncreaseBalanceWalletReqBody = {\n  user_id: string\n  amount: Decimal128 | number\n  fee: Decimal128 | number\n  description: string\n  transaction_hash?: string\n  message: string\n}\n\nexport type DecreaseBalanceWalletReqBody = {\n  user_id: string\n  amount: Decimal128 | number\n  fee: Decimal128 | number\n  description: string\n  transaction_hash?: string\n  message: string\n}\n\nexport type GetTransactionReqQuery = {\n  limit?: string\n  page?: string\n  type?: TransactionTypeEnum\n}\n\nexport type CreateWithdrawlReqBody = {\n  amount: Decimal128\n  account: string\n  note?: string\n}\n\nexport type UpdateWithdrawStatusReqBody = {\n  newStatus: WithDrawalStatus\n  reason?: string\n}\n\nexport type GetWithdrawReqQuery = {\n  limit?: string\n  page?: string\n  status?: WithDrawalStatus\n}\n\nexport type GetAllRefundReqQuery = {\n  limit?: string\n  page?: string\n  status?: RefundStatus\n}\n\nexport type UpdateRefundReqBody = {}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/bike.schema.ts:\n"
      },
      {
        "text": "import { ObjectId } from \"mongodb\";\n\nimport { BikeStatus } from \"~/constants/enums\";\n\ntype BikeType = {\n  _id?: ObjectId;\n  station_id?: ObjectId | null; // null when bike is rented\n  status: BikeStatus;\n  supplier_id?: ObjectId | null; // null when bike is not under maintenance\n  created_at?: Date;\n  updated_at?: Date;\n  chip_id: string;\n};\n\nexport default class Bike {\n  _id?: ObjectId;\n  station_id?: ObjectId | null;\n  status: BikeStatus;\n  supplier_id?: ObjectId | null;\n  created_at?: Date;\n  updated_at?: Date;\n  chip_id: string;\n\n\n  constructor(bike: BikeType) {\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n\n    this._id = bike._id || new ObjectId();\n    this.station_id = bike.station_id;\n    this.status = bike.status || BikeStatus.Available;\n    this.supplier_id = bike.supplier_id || null;\n    this.created_at = bike.created_at || localTime;\n    this.updated_at = bike.updated_at || localTime;\n    this.chip_id = bike.chip_id || \"\";\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/payment.schemas.ts:\n"
      },
      {
        "text": "import { Decimal128, ObjectId } from \"mongodb\";\n\nimport { PaymentMethod, PaymentStatus } from \"~/constants/enums\";\n\ntype PaymentType = {\n  _id?: ObjectId;\n  rental_id: ObjectId;\n  user_id: ObjectId;\n  amount: Decimal128;\n  method?: PaymentMethod;\n  status?: PaymentStatus;\n  created_at?: Date;\n};\n\nexport default class Payment {\n  _id?: ObjectId;\n  rental_id: ObjectId;\n  user_id?: ObjectId;\n  amount: Decimal128;\n  method?: PaymentMethod;\n  status?: PaymentStatus;\n  created_at?: Date;\n\n  constructor(payment: PaymentType) {\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n\n    this._id = payment._id || new ObjectId();\n    this.rental_id = payment.rental_id;\n    this.user_id = payment.user_id;\n    this.amount = Decimal128.fromString(payment.amount.toString());\n    this.method = payment.method || PaymentMethod.Wallet;\n    this.status = payment.status || PaymentStatus.Pending;\n    this.created_at = payment.created_at || localTime;\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/refresh-token.schemas.ts:\n"
      },
      {
        "text": "import type { ObjectId } from \"mongodb\";\n\ntype RefreshTokenType = {\n  _id?: ObjectId;\n  token: string;\n  created_at?: Date;\n  user_id: ObjectId;\n  exp: number;\n  iat: number;\n};\nexport default class RefreshToken {\n  _id?: ObjectId;\n  token: string;\n  created_at: Date;\n  user_id: ObjectId;\n  exp: Date;\n  iat: Date;\n  constructor({ _id, token, created_at, user_id, exp, iat }: RefreshTokenType) {\n    this._id = _id;\n    this.token = token;\n    this.created_at = created_at || new Date();\n    this.user_id = user_id;\n    this.exp = new Date(exp * 1000);\n    this.iat = new Date(iat * 1000);\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/refund.schema.ts:\n"
      },
      {
        "text": "import { Decimal128, ObjectId } from 'mongodb'\nimport { RefundStatus } from '~/constants/enums'\n\nexport type RefundType = {\n  _id?: ObjectId\n  transaction_id?: ObjectId\n  user_id?: ObjectId\n  amount: Decimal128\n  status?: RefundStatus\n  created_at?: Date\n  updated_at?: Date\n}\n\nexport default class Refund {\n  _id?: ObjectId\n  transaction_id?: ObjectId\n  user_id?: ObjectId\n  amount: Decimal128\n  status: RefundStatus\n  created_at?: Date\n  updated_at?: Date\n\n  constructor(refund: RefundType) {\n    const currentDate = new Date()\n    const vietnamTimezoneOffset = 7 * 60\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n\n    this._id = refund._id || new ObjectId()\n    this.transaction_id = refund.transaction_id\n    this.user_id = refund.user_id\n    this.amount = refund.amount || Decimal128.fromString('0')\n    this.status = refund.status || RefundStatus.Pending\n    this.created_at = refund.created_at || localTime\n    this.updated_at = refund.updated_at || localTime\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/rental-audit-logs.schema.ts:\n"
      },
      {
        "text": "import { ObjectId } from 'mongodb'\nimport { getLocalTime } from '~/utils/date'\n\ntype RentalLogType = {\n  _id?: ObjectId\n  rental_id: ObjectId\n  admin_id: ObjectId\n  changes?: string[]\n  reason?: string\n  created_at?: Date\n}\n\nexport default class RentalLog {\n  _id?: ObjectId\n  rental_id: ObjectId\n  admin_id: ObjectId\n  changes: string[]\n  reason?: string\n  created_at?: Date\n\n  constructor(log: RentalLogType) {\n    const localTime = getLocalTime()\n\n    this._id = log._id || new ObjectId()\n    this.rental_id = log.rental_id\n    this.admin_id = log.admin_id\n    this.changes = log.changes ?? []\n    this.reason = log.reason ?? ''\n    this.created_at = log.created_at || localTime\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/rental.schema.ts:\n"
      },
      {
        "text": "import { Decimal128, Int32, ObjectId } from \"mongodb\";\n\nimport { RentalStatus } from \"~/constants/enums\";\nimport { getLocalTime } from \"~/utils/date\";\n\ntype RentalType = {\n  _id?: ObjectId;\n  user_id: ObjectId;\n  bike_id: ObjectId;\n  start_station: ObjectId;\n  end_station?: ObjectId;\n  start_time: Date;\n  end_time?: Date;\n  duration?: Int32;\n  total_price?: Decimal128;\n  status: RentalStatus;\n  created_at?: Date;\n  updated_at?: Date;\n};\n\nexport default class Rental {\n  _id?: ObjectId;\n  user_id: ObjectId;\n  bike_id: ObjectId;\n  start_station: ObjectId;\n  end_station?: ObjectId;\n  start_time: Date;\n  end_time?: Date;\n  duration: Int32;\n  total_price: Decimal128;\n  status: RentalStatus;\n  created_at?: Date;\n  updated_at?: Date;\n\n  constructor(rental: RentalType) {\n    const localTime = getLocalTime()\n\n    this._id = rental._id || new ObjectId();\n    this.user_id = rental.user_id;\n    this.bike_id = rental.bike_id;\n    this.start_station = rental.start_station;\n    this.end_station = rental.end_station ?? undefined;\n    this.start_time = rental.start_time ?? localTime;\n    this.end_time = rental.end_time ?? undefined;\n    this.duration = rental.duration instanceof Int32 ? rental.duration : new Int32(rental.duration ?? 0);\n    this.total_price = rental.total_price instanceof Decimal128 ? rental.total_price : Decimal128.fromString(String(rental.total_price ?? 0));\n    this.status = rental.status ?? RentalStatus.Rented;\n    this.created_at = rental.created_at || localTime;\n    this.updated_at = rental.updated_at || localTime;\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/report.schema.ts:\n"
      },
      {
        "text": "import { ObjectId } from \"mongodb\";\n\nimport type { ReportPriority, ReportTypeEnum } from \"../../constants/enums\";\n\nimport { ReportStatus } from \"../../constants/enums\";\n\ntype GeoLocation = { latitude: number; longitude: number };\n\nexport type ReportType = {\n  _id?: ObjectId;\n  user_id?: ObjectId;\n  bike_id?: ObjectId;\n  station_id?: ObjectId;\n  rental_id?: ObjectId;\n  assignee_id?: ObjectId;\n  media_urls?: string[];\n  location?: GeoLocation;\n  priority: ReportPriority;\n  type: ReportTypeEnum;\n  message: string;\n  status?: ReportStatus;\n  created_at?: Date;\n  updated_at?: Date;\n};\n\nexport default class Report {\n  _id?: ObjectId;\n  user_id?: ObjectId;\n  bike_id?: ObjectId;\n  station_id?: ObjectId;\n  rental_id?: ObjectId;\n  assignee_id?: ObjectId;\n  media_urls?: string[];\n  location?: GeoLocation;\n  priority: ReportPriority;\n  type: ReportTypeEnum;\n  message: string;\n  status: ReportStatus;\n  created_at?: Date;\n  updated_at?: Date;\n\n  constructor(report: ReportType) {\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n\n    this._id = report._id || new ObjectId();\n    this.user_id = report.user_id;\n    this.bike_id = report.bike_id;\n    this.station_id = report.station_id;\n    this.rental_id = report.rental_id;\n    this.assignee_id = report.assignee_id;\n    this.media_urls = report.media_urls || [];\n    this.location = report.location ?? undefined;\n    this.priority = report.priority || \"\";\n    this.type = report.type;\n    this.message = report.message || \"\";\n    this.status = report.status || ReportStatus.Pending;\n    this.created_at = report.created_at || localTime;\n    this.updated_at = report.updated_at || localTime;\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/reservation.schema.ts:\n"
      },
      {
        "text": "import { Decimal128, ObjectId } from \"mongodb\";\n\nimport { ReservationStatus } from \"~/constants/enums\";\nimport { getLocalTime } from \"~/utils/date\";\n\ntype ReservationType = {\n  _id?: ObjectId;\n  user_id: ObjectId;\n  bike_id: ObjectId;\n  station_id: ObjectId;\n  start_time: Date;\n  end_time: Date;\n  prepaid: Decimal128;\n  status: ReservationStatus;\n  created_at?: Date;\n  updated_at?: Date;\n};\n\nexport default class Reservation {\n  _id?: ObjectId;\n  user_id: ObjectId;\n  bike_id: ObjectId;\n  station_id: ObjectId;\n  start_time: Date;\n  end_time: Date;\n  prepaid: Decimal128;\n  status: ReservationStatus;\n  created_at?: Date;\n  updated_at?: Date;\n\n  constructor(reservation: ReservationType) {\n    const localTime = getLocalTime()\n\n    this._id = reservation._id || new ObjectId();\n    this.user_id = reservation.user_id;\n    this.bike_id = reservation.bike_id;\n    this.station_id = reservation.station_id;\n    this.start_time = reservation.start_time ?? localTime;\n    this.end_time = reservation.end_time\n      ?? new Date((reservation.start_time ?? localTime).getTime() + 60 * 60 * 1000);\n    this.prepaid = reservation.prepaid instanceof Decimal128 ? reservation.prepaid : Decimal128.fromString(String(reservation.prepaid ?? 0));\n    this.status = reservation.status ?? ReservationStatus.Pending;\n    this.created_at = reservation.created_at || localTime;\n    this.updated_at = reservation.updated_at || localTime;\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/station.schema.ts:\n"
      },
      {
        "text": "import { ObjectId } from \"mongodb\";\n\ntype StationType = {\n  _id?: ObjectId;\n  name: string;\n  address: string;\n  latitude: number;\n  longitude: number;\n  created_at?: Date;\n  updated_at?: Date;\n};\n\nexport default class Station {\n  _id?: ObjectId;\n  name: string;\n  address: string;\n  latitude: number;\n  longitude: number;\n  created_at?: Date;\n  updated_at?: Date;\n\n  constructor(station: StationType) {\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n\n    this._id = station._id || new ObjectId();\n    this.name = station.name;\n    this.address = station.address;\n    this.latitude = station.latitude;\n    this.longitude = station.latitude;\n    this.created_at = station.created_at || localTime;\n    this.updated_at = station.updated_at || localTime;\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/supplier.schema.ts:\n"
      },
      {
        "text": "import type { Decimal128 } from 'mongodb'\n\nimport { ObjectId } from 'mongodb'\n\nimport { SupplierStatus } from '~/constants/enums'\n\nexport type ContactInfo = {\n  address: string\n  phone_number: string\n}\n\nexport type SupplierType = {\n  _id?: ObjectId\n  name: string\n  contact_info: ContactInfo\n  contract_fee: Decimal128\n  status: SupplierStatus\n  created_at?: Date\n  updated_at?: Date\n}\n\nexport default class Supplier {\n  _id?: ObjectId\n  name: string\n  contact_info: ContactInfo\n  contract_fee: Decimal128\n  status: SupplierStatus\n  created_at?: Date\n  updated_at?: Date\n\n  constructor(supplier: SupplierType) {\n    const currentDate = new Date()\n    const vietnamTimezoneOffset = 7 * 60\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n\n    this._id = supplier._id || new ObjectId()\n    this.name = supplier.name\n    this.contact_info = supplier.contact_info\n    this.contract_fee = supplier.contract_fee\n    this.status = supplier.status || SupplierStatus.ACTIVE\n    this.created_at = supplier.created_at || localTime\n    this.updated_at = supplier.updated_at || localTime\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/transaction.schema.ts:\n"
      },
      {
        "text": "import { Decimal128, ObjectId } from \"mongodb\";\n\nimport { TransactionStaus, TransactionTypeEnum } from \"~/constants/enums\";\n\nexport type TransactionType = {\n  _id?: ObjectId;\n  wallet_id: ObjectId;\n  amount: Decimal128;\n  fee: Decimal128;\n  description: string;\n  transaction_hash: string;\n  type: TransactionTypeEnum;\n  status: TransactionStaus;\n  created_at?: Date;\n};\n\nexport default class Transaction {\n  _id?: ObjectId;\n  wallet_id: ObjectId;\n  amount: Decimal128;\n  fee: Decimal128;\n  description: string;\n  transaction_hash: string;\n  type: TransactionTypeEnum;\n  status: TransactionStaus;\n  created_at?: Date;\n\n  constructor(transaction: TransactionType) {\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n\n    this._id = transaction._id || new ObjectId();\n    this.wallet_id = transaction.wallet_id;\n    this.amount = Decimal128.fromString(transaction.amount.toString());\n    this.fee = Decimal128.fromString(transaction.fee.toString()) || Decimal128.fromString(\"0\");\n    this.description = transaction.description;\n    this.transaction_hash = transaction.transaction_hash;\n    this.type = transaction.type || TransactionTypeEnum.PAYMENT;\n    this.status = transaction.status || TransactionStaus.Pending;\n    this.created_at = transaction.created_at || localTime;\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/user.schema.ts:\n"
      },
      {
        "text": "import { ObjectId } from \"mongodb\";\n\nimport { Role, UserVerifyStatus } from \"~/constants/enums\";\n\nexport type SupplierBikeStats = {\n  supplier_id: string;\n  supplier_name?: string;\n  total_bikes: number;\n  active_bikes: number;\n  booked_bikes: number;\n  broken_bikes: number;\n  reserve_bikes: number;\n  maintain_bikes: number;\n  unavailable_bikes: number;\n};\n\ntype UserType = {\n  _id?: ObjectId;\n  fullname: string;\n  email: string;\n  password: string;\n  email_verify_token?: string;\n  forgot_password_token?: string;\n  verify?: UserVerifyStatus;\n  location?: string;\n  username?: string;\n  phone_number?: string;\n  avatar?: string;\n  role: Role;\n  created_at?: Date;\n  updated_at?: Date;\n};\n\nexport default class User {\n  _id?: ObjectId;\n  fullname: string;\n  email: string;\n  password: string;\n  email_verify_token: string;\n  forgot_password_token: string;\n  verify: UserVerifyStatus;\n  location: string;\n  username: string;\n  phone_number: string;\n  avatar: string;\n  role: Role;\n  created_at: Date;\n  updated_at: Date;\n\n  constructor(user: UserType) {\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n\n    this._id = user._id || new ObjectId();\n    this.fullname = user.fullname;\n    this.email = user.email;\n    this.password = user.password;\n    this.email_verify_token = user.email_verify_token || \"\";\n    this.forgot_password_token = user.forgot_password_token || \"\";\n    this.verify = user.verify || UserVerifyStatus.Unverified;\n    this.location = user.location || \"\";\n    this.username = user.username || \"\";\n    this.phone_number = user.phone_number || \"\";\n    this.avatar = user.avatar || \"\";\n    this.role = user.role || Role.User;\n    this.created_at = user.created_at || localTime;\n    this.updated_at = user.updated_at || localTime;\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/wallet.schemas.ts:\n"
      },
      {
        "text": "import { Decimal128, ObjectId } from \"mongodb\";\n\nimport { WalletStatus } from \"~/constants/enums\";\n\nexport type WalletType = {\n  _id?: ObjectId;\n  user_id: ObjectId;\n  balance: Decimal128;\n  status: WalletStatus;\n  created_at?: Date;\n  updated_at?: Date;\n};\n\nexport default class Wallet {\n  _id?: ObjectId;\n  user_id: ObjectId;\n  balance: Decimal128;\n  status: WalletStatus;\n  created_at?: Date;\n  updated_at?: Date;\n\n  constructor(wallet: WalletType) {\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n\n    this._id = wallet._id || new ObjectId();\n    this.user_id = wallet.user_id;\n    this.balance = Decimal128.fromString(wallet.balance.toString());\n    this.status = wallet.status || WalletStatus.Active;\n    this.created_at = wallet.created_at || localTime;\n    this.updated_at = wallet.updated_at || localTime;\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/models/schemas/withdraw-request.ts:\n"
      },
      {
        "text": "import { Decimal128, ObjectId } from 'mongodb'\nimport { WithDrawalStatus } from '~/constants/enums'\n\nexport type WithdrawType = {\n  _id?: ObjectId\n  user_id: ObjectId\n  amount: Decimal128\n  account: string\n  reason?: string\n  note?: string\n  status: WithDrawalStatus\n  created_at?: Date\n  updated_at?: Date\n}\n\nexport default class Withdraw {\n  _id?: ObjectId\n  user_id: ObjectId\n  amount: Decimal128\n  account: string\n  reason?: string\n  note?: string\n  status: WithDrawalStatus\n  created_at?: Date\n  updated_at?: Date\n\n  constructor(withdraw: WithdrawType) {\n    const currentDate = new Date()\n    const vietnamTimezoneOffset = 7 * 60\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n\n    this._id = withdraw._id || new ObjectId()\n    this.user_id = withdraw.user_id\n    this.reason = withdraw.reason\n    this.note = withdraw.note || ''\n    this.amount = Decimal128.fromString(withdraw.amount.toString())\n    this.account = withdraw.account\n    this.status = withdraw.status || WithDrawalStatus.Pending\n    this.created_at = withdraw.created_at || localTime\n    this.updated_at = withdraw.updated_at || localTime\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/routes/bikes.routes.ts:\n"
      },
      {
        "text": "import { Router } from \"express\";\n\nimport { adminUpdateBikeController, createBikeController, deleteBikeController, getBikeByIdController, getBikesController, getBikesStatsController, getBikeStatsByIdController, getRentalsByBikeIdController, reportBrokenBikeController } from \"~/controllers/bikes.controllers\";\nimport { isAdminAndStaffValidator, isAdminValidator } from \"~/middlewares/admin.middlewares\";\nimport { bikeIdValidator, createBikeValidator, updateBikeValidator } from \"~/middlewares/bikes.middlewares\";\nimport { accessTokenValidator } from \"~/middlewares/users.middlewares\";\nimport { wrapAsync } from \"~/utils/handler\";\n\nconst bikesRouter = Router();\n\n// admin only\n// tạo xe mới\nbikesRouter.post(\n  \"/\",\n  accessTokenValidator,\n  isAdminValidator,\n  createBikeValidator,\n  wrapAsync(createBikeController),\n);\n\n// user chỉ xem được xe có trạng thái AVAILABLE\n// staff, manager, admin có thể xem tất cả các trạng thái\n// lấy danh sách xe, có phân trang, lọc theo station_id, status, supplier_id\nbikesRouter.get(\"/\", accessTokenValidator, wrapAsync(getBikesController));\n\n// Admin Only Get overall statistics for all bikes\nbikesRouter.get(\n  \"/stats\",\n  accessTokenValidator,\n  isAdminValidator,\n  wrapAsync(getBikesStatsController)\n);\n\n// admin/staff lấy lịch sử thuê xe theo bike id\nbikesRouter.get(\n  \"/:_id/rentals\",\n  accessTokenValidator,\n  isAdminAndStaffValidator,\n  bikeIdValidator,\n  wrapAsync(getRentalsByBikeIdController)\n);\n\n// admin only get stats for a specific bike by id\nbikesRouter.get(\n  \"/:_id/stats\",\n  accessTokenValidator,\n  isAdminValidator,\n  bikeIdValidator,\n  wrapAsync(getBikeStatsByIdController)\n);\n\n// lấy thông tin chi tiết xe theo id\nbikesRouter.get(\n  \"/:_id\",\n  accessTokenValidator,\n  bikeIdValidator,\n  wrapAsync(getBikeByIdController)\n);\n\n// User reports a broken bike they are renting\n// Chỉ user mới có quyền báo xe bị hỏng\n// người dùng chỉ được báo hỏng xe mà họ đang thuê\nbikesRouter.patch(\n  \"/report-broken/:_id\",\n  accessTokenValidator,\n  bikeIdValidator,\n  wrapAsync(reportBrokenBikeController)\n);\n\n// Admin/Staff updates a bike's info (status, station_id, supplier_id)\nbikesRouter.patch(\n  \"/admin-update/:_id\",\n  accessTokenValidator,\n  isAdminAndStaffValidator,\n  bikeIdValidator,\n  updateBikeValidator,\n  wrapAsync(adminUpdateBikeController)\n);\n\n// Admin deletes a bike (soft delete)\nbikesRouter.delete(\n  \"/:_id\",\n  accessTokenValidator,\n  isAdminValidator,\n  bikeIdValidator,\n  wrapAsync(deleteBikeController)\n);\nexport default bikesRouter;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/routes/refunds.routes.ts:\n"
      },
      {
        "text": "import { Router } from 'express'\nimport {\n  getAllRefundController,\n  getAllUserRefundController,\n  getRefundDetailController,\n  refundController,\n  updateRefundController\n} from '~/controllers/wallet.controllers'\n\nimport { isAdminValidator } from '~/middlewares/admin.middlewares'\nimport { filterMiddleware } from '~/middlewares/common.middlewares'\nimport { createRefundRequestValidator, updateRefundStatusValidator } from '~/middlewares/refunds.middlewares'\nimport { accessTokenValidator } from '~/middlewares/users.middlewares'\nimport { CreateRefundReqBody } from '~/models/requests/refunds.request'\nimport { wrapAsync } from '~/utils/handler'\n\nconst refundsRouter = Router()\n\nrefundsRouter.post(\n  '/',\n  accessTokenValidator,\n  createRefundRequestValidator,\n  filterMiddleware<CreateRefundReqBody>(['amount', 'transaction_id']),\n  wrapAsync(refundController)\n)\n\nrefundsRouter.get('/manage-refunds', accessTokenValidator, isAdminValidator, wrapAsync(getAllRefundController))\nrefundsRouter.get('/', accessTokenValidator, wrapAsync(getAllUserRefundController))\nrefundsRouter.get('/:id', accessTokenValidator, wrapAsync(getRefundDetailController))\nrefundsRouter.put(\n  '/:id',\n  accessTokenValidator,\n  isAdminValidator,\n  updateRefundStatusValidator,\n  filterMiddleware(['newStatus']),\n  wrapAsync(updateRefundController)\n)\n\nexport default refundsRouter"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/routes/rentals.routes.ts:\n"
      },
      {
        "text": "import { accessTokenValidator } from '~/middlewares/users.middlewares';\nimport { Router } from \"express\";\n\nimport {\n  cancelRentalController,\n  createRentalSessionController,\n  endRentalByAdminOrStaffController,\n  endRentalSessionController,\n  getAllRentalsController,\n  getDetailRentalController,\n  getMyCurrentRentalsController,\n  getMyDetailRentalController,\n  getMyRentalsController,\n  getRentalRevenueController,\n  getReservationsStatisticController,\n  getStationActivityController,\n  updateDetailRentalController,\n} from \"~/controllers/rentals.controllers\";\nimport { isAdminAndStaffValidator, isAdminValidator } from \"~/middlewares/admin.middlewares\";\nimport { cancelRentalValidator, createRentalSessionValidator, endRentalByAdminOrStaffValidator, endRentalSessionValidator, updateDetailRentalValidator } from \"~/middlewares/rentals.middlewares\";\nimport { wrapAsync } from \"~/utils/handler\";\n\nconst rentalsRouter = Router();\n\nrentalsRouter.route(\"/stats/revenue\")\n  .get(accessTokenValidator, isAdminValidator, wrapAsync(getRentalRevenueController));\n\nrentalsRouter.route(\"/stats/station-activity\")\n  .get(accessTokenValidator, isAdminValidator, wrapAsync(getStationActivityController));\n\nrentalsRouter.route(\"/stats/reservations\")\n  .get(accessTokenValidator, isAdminValidator, wrapAsync(getReservationsStatisticController));\n\nrentalsRouter.route(\"/me\")\n  .get(accessTokenValidator, wrapAsync(getMyRentalsController));\n\nrentalsRouter.route(\"/me/current\")\n  .get(accessTokenValidator, wrapAsync(getMyCurrentRentalsController));\n\nrentalsRouter.route(\"/me/:id\")\n  .get(accessTokenValidator, wrapAsync(getMyDetailRentalController));\n\nrentalsRouter.route(\"/me/:id/end\")\n  .put(accessTokenValidator, endRentalSessionValidator, wrapAsync(endRentalSessionController));\n\nrentalsRouter.route(\"/:id/end\")\n  .put(accessTokenValidator, isAdminAndStaffValidator, endRentalByAdminOrStaffValidator, wrapAsync(endRentalByAdminOrStaffController));\n\nrentalsRouter.route(\"/:id/cancel\")\n  .post(accessTokenValidator, isAdminAndStaffValidator, cancelRentalValidator, wrapAsync(cancelRentalController));\n\n// staff/admin\nrentalsRouter.route(\"/:id\")\n  .get(accessTokenValidator, isAdminValidator, wrapAsync(getDetailRentalController))\n  .put(accessTokenValidator, isAdminValidator, updateDetailRentalValidator, wrapAsync(updateDetailRentalController))\n\nrentalsRouter.route(\"/\")\n  .get(accessTokenValidator, isAdminValidator, wrapAsync(getAllRentalsController))\n// user\n  .post(accessTokenValidator, createRentalSessionValidator, wrapAsync(createRentalSessionController));\nexport default rentalsRouter;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/routes/reports.routes.ts:\n"
      },
      {
        "text": "import { Router } from \"express\";\nimport multer from \"multer\";\n\nimport type { CreateReportReqBody } from \"~/models/requests/reports.requests\";\n\nimport {\n  createReportController,\n  getAllReportController,\n  getAllUserReportController,\n  getByIdController,\n  updateReportStatusController,\n} from \"~/controllers/reports.controllers\";\nimport { isAdminValidator } from \"~/middlewares/admin.middlewares\";\nimport { filterMiddleware } from \"~/middlewares/common.middlewares\";\nimport { createReportValidator, getAllReportValidator, getAllUserReportValidator, updateReportValidator } from \"~/middlewares/reports.middlewares\";\nimport { getIdValidator } from \"~/middlewares/supplier.middlewares\";\nimport { accessTokenValidator } from \"~/middlewares/users.middlewares\";\nimport { wrapAsync } from \"~/utils/handler\";\n\nconst storage = multer.memoryStorage();\n\nconst upload = multer({ storage });\n\nconst reportsRouter = Router();\n\n// get all cho users\nreportsRouter.get(\"/\", accessTokenValidator, getAllUserReportValidator, wrapAsync(getAllUserReportController));\n// get all cho admin\nreportsRouter.get(\"/manage-reports\", accessTokenValidator, isAdminValidator, getAllReportValidator, wrapAsync(getAllReportController));\nreportsRouter.get(\"/:reportID\", accessTokenValidator, getIdValidator, wrapAsync(getByIdController));\nreportsRouter.post(\n  \"/\",\n  accessTokenValidator,\n  filterMiddleware<CreateReportReqBody>([\"bike_id\", \"location\", \"files\", \"message\", \"rental_id\", \"station_id\", \"type\"]),\n  upload.array(\"files\", 10),\n  createReportValidator,\n  wrapAsync(createReportController),\n);\nreportsRouter.put(\n  \"/:reportID\",\n  accessTokenValidator,\n  getIdValidator,\n  filterMiddleware([\"newStatus\", \"staff_id\", \"priority\"]),\n  updateReportValidator,\n  wrapAsync(updateReportStatusController),\n);\n\nexport default reportsRouter;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/routes/station.routes.ts:\n"
      },
      {
        "text": "import { Router } from \"express\";\nimport { getRentalsByStationIdController } from \"~/controllers/rentals.controllers\";\nimport { isAdminAndStaffValidator } from \"~/middlewares/admin.middlewares\";\nimport { accessTokenValidator } from \"~/middlewares/users.middlewares\";\nimport { wrapAsync } from \"~/utils/handler\";\n\nconst stationRouter = Router()\n\n// staff: view rental in a station, near-expired reservation\nstationRouter.route(\"/:id/rentals\")\n.get(accessTokenValidator, isAdminAndStaffValidator, wrapAsync(getRentalsByStationIdController))\n\nexport default stationRouter"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/routes/suppliers.routes.ts:\n"
      },
      {
        "text": "import { Router } from 'express'\n\nimport type { CreateSupplierReqBody, UpdateSupplierReqBody } from '~/models/requests/suppliers.request'\n\nimport {\n  changeSupplierStatusController,\n  createSupplierController,\n  getAllSupplierController,\n  getAllSupplierStatController,\n  getByIdController,\n  getSupplierStatController,\n  updateSupplierController\n} from '~/controllers/suppliers.controllers'\nimport { isAdminValidator } from '~/middlewares/admin.middlewares'\nimport { filterMiddleware } from '~/middlewares/common.middlewares'\nimport {\n  createSupplierValidator,\n  updateSupplierStatusValidator,\n  updateSupplierValidator\n} from '~/middlewares/supplier.middlewares'\nimport { accessTokenValidator } from '~/middlewares/users.middlewares'\nimport { wrapAsync } from '~/utils/handler'\n\nconst suppliersRouter = Router()\n\nsuppliersRouter.get('/', accessTokenValidator, isAdminValidator, wrapAsync(getAllSupplierController))\nsuppliersRouter.get('/stats', accessTokenValidator, isAdminValidator, wrapAsync(getAllSupplierStatController))\nsuppliersRouter.get('/:id', accessTokenValidator, isAdminValidator, wrapAsync(getByIdController))\nsuppliersRouter.get('/:id/stats', accessTokenValidator, isAdminValidator, wrapAsync(getSupplierStatController))\nsuppliersRouter.post(\n  '/',\n  accessTokenValidator,\n  isAdminValidator,\n  filterMiddleware<CreateSupplierReqBody>(['address', 'contract_fee', 'name', 'phone_number']),\n  createSupplierValidator,\n  wrapAsync(createSupplierController)\n)\nsuppliersRouter.put(\n  '/:id',\n  accessTokenValidator,\n  isAdminValidator,\n  filterMiddleware<UpdateSupplierReqBody>(['address', 'contract_fee', 'name', 'phone_number']),\n  updateSupplierValidator,\n  wrapAsync(updateSupplierController)\n)\nsuppliersRouter.patch(\n  '/:id',\n  accessTokenValidator,\n  isAdminValidator,\n  updateSupplierStatusValidator,\n  filterMiddleware(['newStatus']),\n  wrapAsync(changeSupplierStatusController)\n)\n\nexport default suppliersRouter"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/routes/users.routes.ts:\n"
      },
      {
        "text": "import { Router } from \"express\";\n\nimport type { UpdateMeReqBody } from \"~/models/requests/users.requests\";\n\nimport { changePasswordController, emailVerifyTokenController, forgotPasswordController, getMeController, loginController, logoutController, refreshController, registerController, resendEmailVerifyController, resetPasswordController, updateMeController, verifyForgotPasswordTokenController } from \"~/controllers/users.controllers\";\nimport { filterMiddleware } from \"~/middlewares/common.middlewares\";\nimport { accessTokenValidator, changePasswordValidator, checkNewPasswordValidator, emailVerifyTokenValidator, forgotPasswordValidator, loginValidator, refreshTokenValidator, registerValidator, resetPasswordValidator, updateMeValidator, verifiedUserValidator, verifyForgotPasswordTokenValidator } from \"~/middlewares/users.middlewares\";\nimport { wrapAsync } from \"~/utils/handler\";\n\nconst usersRouter = Router();\n\nusersRouter.post(\"/login\", loginValidator, wrapAsync(loginController));\nusersRouter.post(\"/register\", registerValidator, wrapAsync(registerController));\nusersRouter.post(\"/logout\", accessTokenValidator, refreshTokenValidator, wrapAsync(logoutController));\nusersRouter.post(\"/forgot-password\", forgotPasswordValidator, wrapAsync(forgotPasswordController));\nusersRouter.post(\n  \"/verify-forgot-password\",\n  verifyForgotPasswordTokenValidator,\n  wrapAsync(verifyForgotPasswordTokenController),\n);\nusersRouter.post(\n  \"/reset-password\",\n  resetPasswordValidator,\n  verifyForgotPasswordTokenValidator,\n  checkNewPasswordValidator,\n  wrapAsync(resetPasswordController),\n);\nusersRouter.post(\"/verify-email\", emailVerifyTokenValidator, wrapAsync(emailVerifyTokenController));\nusersRouter.post(\"/resend-verify-email\", accessTokenValidator, wrapAsync(resendEmailVerifyController));\nusersRouter.put(\n  \"/change-password\",\n  accessTokenValidator,\n  verifiedUserValidator,\n  changePasswordValidator,\n  wrapAsync(changePasswordController),\n);\nusersRouter.get(\"/me\", accessTokenValidator, wrapAsync(getMeController));\nusersRouter.patch(\n  \"/me\",\n  accessTokenValidator,\n  filterMiddleware<UpdateMeReqBody>([\"fullname\", \"location\", \"username\", \"avatar\"]),\n  updateMeValidator,\n  wrapAsync(updateMeController),\n);\nusersRouter.post(\"/refresh-token\", refreshTokenValidator, wrapAsync(refreshController));\n\nexport default usersRouter;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/routes/wallets.routes.ts:\n"
      },
      {
        "text": "import { Router } from 'express'\n\nimport {\n  changeStatusController,\n  decreaseBalanceController,\n  getTransactionDetailController,\n  getUserTransactionWalletController,\n  getUserWalletController,\n  increateBalanceController\n} from '~/controllers/wallet.controllers'\nimport { isAdminValidator } from '~/middlewares/admin.middlewares'\nimport { filterMiddleware } from '~/middlewares/common.middlewares'\nimport { accessTokenValidator } from '~/middlewares/users.middlewares'\nimport {\n  decreaseBalanceValidator,\n  increaseBalanceValidator,\n  updateWalletStatusValidator\n} from '~/middlewares/wallet.middlewares'\nimport { DecreaseBalanceWalletReqBody, IncreaseBalanceWalletReqBody } from '~/models/requests/wallets.requests'\nimport { wrapAsync } from '~/utils/handler'\n\nconst walletsRouter = Router()\n\n// lấy thông tin ví cho user\nwalletsRouter.get('/', accessTokenValidator, wrapAsync(getUserWalletController))\n// lấy các thông tin transaction trong ví chưa có lịch sử rental của user (cộng tiền, rút tiền)\nwalletsRouter.get('/transaction', accessTokenValidator, wrapAsync(getUserTransactionWalletController))\nwalletsRouter.get('/transaction/:id', accessTokenValidator, wrapAsync(getTransactionDetailController))\nwalletsRouter.put(\n  '/increase',\n  accessTokenValidator,\n  isAdminValidator,\n  increaseBalanceValidator,\n  filterMiddleware<IncreaseBalanceWalletReqBody>([\n    'amount',\n    'description',\n    'fee',\n    'message',\n    'transaction_hash',\n    'user_id'\n  ]),\n  wrapAsync(increateBalanceController)\n)\nwalletsRouter.put(\n  '/decrease',\n  accessTokenValidator,\n  isAdminValidator,\n  decreaseBalanceValidator,\n  filterMiddleware<DecreaseBalanceWalletReqBody>([\n    'amount',\n    'description',\n    'fee',\n    'message',\n    'transaction_hash',\n    'user_id'\n  ]),\n  wrapAsync(decreaseBalanceController)\n)\nwalletsRouter.patch(\n  '/:id',\n  accessTokenValidator,\n  isAdminValidator,\n  updateWalletStatusValidator,\n  filterMiddleware(['newStatus']),\n  wrapAsync(changeStatusController)\n)\n\nexport default walletsRouter"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/routes/withdraw.routes.ts:\n"
      },
      {
        "text": "import { Router } from 'express'\nimport {\n  createWithdrawalRequestController,\n  getAllUserWithdrawController,\n  getAllWithDrawController,\n  getWithdrawDetailController,\n  updateWithdrawStatusController\n} from '~/controllers/wallet.controllers'\n\nimport { isAdminValidator } from '~/middlewares/admin.middlewares'\nimport { filterMiddleware } from '~/middlewares/common.middlewares'\nimport { accessTokenValidator } from '~/middlewares/users.middlewares'\nimport { createWithdrawRequestValidator, updateWithdrawStatusValidator } from '~/middlewares/withdraw.middlewares'\nimport { CreateWithdrawlReqBody } from '~/models/requests/wallets.requests'\nimport { wrapAsync } from '~/utils/handler'\n\nconst withdrawsRouter = Router()\n\nwithdrawsRouter.post(\n  '/',\n  accessTokenValidator,\n  createWithdrawRequestValidator,\n  filterMiddleware<CreateWithdrawlReqBody>(['account', 'amount', 'note']),\n  wrapAsync(createWithdrawalRequestController)\n)\n// admin get all withdraw\nwithdrawsRouter.get('/manage-withdrawal', accessTokenValidator, isAdminValidator, wrapAsync(getAllWithDrawController))\n// user get all withdraw\nwithdrawsRouter.get('/', accessTokenValidator, wrapAsync(getAllUserWithdrawController))\nwithdrawsRouter.get('/:id', accessTokenValidator, wrapAsync(getWithdrawDetailController))\nwithdrawsRouter.put(\n  '/:id',\n  accessTokenValidator,\n  isAdminValidator,\n  updateWithdrawStatusValidator,\n  filterMiddleware(['newStatus']),\n  wrapAsync(updateWithdrawStatusController)\n)\n\nexport default withdrawsRouter"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/server.ts:\n"
      },
      {
        "text": "import cors from \"cors\";\nimport { config } from \"dotenv\";\nimport express from \"express\";\nimport process from \"node:process\";\nimport swaggerUi from \"swagger-ui-express\";\n\nimport { defaultErrorHandler } from \"./middlewares/error.middlewares\";\nimport rentalsRouter from \"./routes/rentals.routes\";\nimport reportsRouter from \"./routes/reports.routes\";\nimport suppliersRouter from \"./routes/suppliers.routes\";\nimport usersRouter from \"./routes/users.routes\";\nimport databaseService from \"./services/database.services\";\nimport bikesRouter from \"./routes/bikes.routes\";\nimport walletsRouter from \"./routes/wallets.routes\";\nimport withdrawsRouter from \"./routes/withdraw.routes\";\nimport refundsRouter from \"./routes/refunds.routes\";\nimport swaggerDocument from '../public/openapi.json'\n\nconfig();\n\nimport swaggerJSDoc from \"swagger-jsdoc\";\nimport stationRouter from \"./routes/station.routes\";\n\nconst port = process.env.PORT || 4000;\n\nconst app = express();\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\ndatabaseService.connect().then(async () => {\n  databaseService.indexUsers();\n  databaseService.indexBikes();\n});\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Welcome to MeBike API\");\n});\n\napp.use(\"/users\", usersRouter);\napp.use(\"/reports\", reportsRouter);\napp.use(\"/suppliers\", suppliersRouter);\napp.use(\"/bikes\", bikesRouter);\napp.use(\"/wallets\", walletsRouter);\napp.use(\"/withdraws\", withdrawsRouter);\napp.use(\"/refunds\", refundsRouter);\napp.use(\"/rentals\", rentalsRouter);\napp.use(\"/stations\", stationRouter);\n\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument))\n\n\napp.use(defaultErrorHandler);\n\napp.listen(port, () => {\n  // eslint-disable-next-line no-console\n  console.log(`MeBike Backend đang chạy tại http://localhost:${port}`);\n});"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/services/bikes.services.ts:\n"
      },
      {
        "text": "import type { NextFunction, Response } from \"express\";\n\nimport { ObjectId } from \"mongodb\";\n\nimport type { CreateBikeReqBody, GetBikesReqQuery, UpdateBikeReqBody } from \"~/models/requests/bikes.request\";\n\nimport { BikeStatus } from \"~/constants/enums\";\nimport Bike from \"~/models/schemas/bike.schema\";\nimport { sendPaginatedResponse } from \"~/utils/pagination.helper\";\n\nimport databaseService from \"./database.services\";\n\nclass BikesService {\n  async createBike(payload: CreateBikeReqBody) {\n    const result = await databaseService.bikes.insertOne(\n      new Bike({\n        station_id: new ObjectId(payload.station_id),\n        status: payload.status || BikeStatus.Available,\n        chip_id: payload.chip_id,\n        supplier_id: payload.supplier_id ? new ObjectId(payload.supplier_id) : null,\n      }),\n    );\n    const bike = await databaseService.bikes.findOne({ _id: result.insertedId });\n    return bike;\n  }\n\n  async getAllBikes(res: Response, next: NextFunction, query: GetBikesReqQuery) {\n    const { station_id, status, supplier_id, chip_id } = query;\n    const filter: any = {};\n\n    if (chip_id) {\n        filter.chip_id = chip_id;\n    }\n    if (station_id) {\n      filter.station_id = new ObjectId(station_id);\n    }\n    if (status) {\n      filter.status = status;\n    }\n    if (supplier_id) {\n      filter.supplier_id = new ObjectId(supplier_id);\n    }\n\n    await sendPaginatedResponse(res, next, databaseService.bikes, query, filter);\n  }\n\n  async getBikeById(bikeId: string) {\n    const bike = await databaseService.bikes.findOne({ _id: new ObjectId(bikeId) });\n    return bike;\n  }\n\n  async updateBike(bikeId: string, payload: UpdateBikeReqBody) {\n    const updatePayload: any = {}\n    if (payload.chip_id) {\n      updatePayload.chip_id = payload.chip_id\n    }\n    if (payload.status) {\n      updatePayload.status = payload.status\n    }\n    if (payload.station_id) {\n      updatePayload.station_id = new ObjectId(payload.station_id)\n    }\n    if (payload.supplier_id) {\n      updatePayload.supplier_id = new ObjectId(payload.supplier_id);\n    }\n\n    const currentDate = new Date()\n    const vietnamTimezoneOffset = 7 * 60\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n    const result = await databaseService.bikes.findOneAndUpdate(\n      { _id: new ObjectId(bikeId) },\n      {\n        $set: {\n          ...updatePayload,\n          updated_at: localTime\n        }\n      },\n      { returnDocument: 'after' }\n    )\n    return result\n  }\n\n  async deleteBike(bikeId: string) {\n    // Luôn thực hiện xóa mềm: cập nhật status thành UNAVAILABLE\n    const result = await this.updateBike(bikeId, { status: BikeStatus.Unavailable });\n    return { softDelete: true, result };\n  }\n\n  async getRentalsByBikeId(res: Response, next: NextFunction, bikeId: string, query: GetBikesReqQuery) {\n    const filter = {\n      bike_id: new ObjectId(bikeId)\n    };\n\n    await sendPaginatedResponse(res, next, databaseService.rentals, query, filter);\n  }\n\n  async getBikesStats() {\n    const stats = await databaseService.bikes.aggregate([\n      // Group by status and count\n      {\n        $group: {\n          _id: \"$status\",\n          count: { $sum: 1 }\n        }\n      },\n      // Reshape the output\n      {\n        $group: {\n          _id: null,\n          total_by_status: {\n            $push: {\n              k: \"$_id\",\n              v: \"$count\"\n            }\n          }\n        }\n      },\n      {\n        $replaceRoot: {\n          newRoot: { $arrayToObject: \"$total_by_status\" }\n        }\n      }\n    ]).toArray();\n\n    return stats[0] || {};\n  }\n\n  async getBikeStatsById(bikeId: string) {\n    const bikeStats = await databaseService.rentals.aggregate([\n      // Filter for the specific bike\n      {\n        $match: {\n          bike_id: new ObjectId(bikeId)\n        }\n      },\n      // Group and calculate stats\n      {\n        $group: {\n          _id: \"$bike_id\",\n          total_rentals: { $sum: 1 },\n          total_revenue: { $sum: { $toDouble: \"$total_price\" } }, // Convert Decimal128 to double for summation\n          total_duration_minutes: { $sum: \"$duration\" } // duration is in minutes\n        }\n      }\n    ]).toArray();\n\n    const reportCount = await databaseService.reports.countDocuments({\n      bike_id: new ObjectId(bikeId)\n    });\n\n    if (bikeStats.length === 0) {\n      return {\n        total_rentals: 0,\n        total_revenue: 0,\n        total_duration_minutes: 0,\n        total_reports: reportCount\n      };\n    }\n\n    return {\n      ...bikeStats[0],\n      total_reports: reportCount\n    };\n  }\n}\n\nconst bikesService = new BikesService();\nexport default bikesService;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/services/database.services.ts:\n"
      },
      {
        "text": "import type { Collection, Db } from \"mongodb\";\n\nimport { config } from \"dotenv\";\nimport { MongoClient } from \"mongodb\";\nimport process from \"node:process\";\n\nimport type Bike from \"~/models/schemas/bike.schema\";\nimport type Payment from \"~/models/schemas/payment.schemas\";\nimport type RefreshToken from \"~/models/schemas/refresh-token.schemas\";\nimport type Rental from \"~/models/schemas/rental.schema\";\nimport type Report from \"~/models/schemas/report.schema\";\nimport type Station from \"~/models/schemas/station.schema\";\nimport type Supplier from \"~/models/schemas/supplier.schema\";\nimport type Transaction from \"~/models/schemas/transaction.schema\";\nimport type User from \"~/models/schemas/user.schema\";\nimport type Wallet from \"~/models/schemas/wallet.schemas\";\nimport Refund from \"~/models/schemas/refund.schema\";\nimport Withdraw from \"~/models/schemas/withdraw-request\";\nimport RentalLog from \"~/models/schemas/rental-audit-logs.schema\";\nimport { getLocalTime } from \"~/utils/date\";\n\nconfig();\nconst uri = `mongodb+srv://${process.env.DB_USERNAME}:${process.env.DB_PASSWORD}@mebike.8rtvndo.mongodb.net/?retryWrites=true&w=majority&appName=MeBike`;\n\nclass DatabaseService {\n  private client: MongoClient;\n  private db: Db;\n\n  constructor() {\n    this.client = new MongoClient(uri);\n    this.db = this.client.db(process.env.DB_NAME);\n  }\n\n  async connect() {\n    try {\n      await this.db.command({ ping: 1 });\n      console.log(\"MeBike successfully connected to MongoDB!\");\n    }\n    catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n\n  getClient(): MongoClient {\n    return this.client;\n  }\n\n  get users(): Collection<User> {\n    return this.db.collection(process.env.DB_USERS_COLLECTION as string);\n  }\n\n  async indexUsers() {\n    await this.users.createIndex({ email: 1 }, { unique: true });\n    await this.users.createIndex({ username: 1 }, { unique: true });\n    // await this.users.createIndex({ phone_number: 1 }, { unique: true });\n    await this.users.createIndex({ email: 1, password: 1 });\n  }\n\n  get refreshTokens(): Collection<RefreshToken> {\n    return this.db.collection(process.env.DB_REFRESH_TOKENS_COLLECTION as string);\n  }\n\n  get stations(): Collection<Station> {\n    return this.db.collection(process.env.DB_STATIONS_COLLECTION as string);\n  }\n\n  get reports(): Collection<Report> {\n    return this.db.collection(process.env.DB_REPORTS_COLLECTION as string);\n  }\n\n  get bikes(): Collection<Bike> {\n    return this.db.collection(process.env.DB_BIKES_COLLECTION as string);\n  }\n\n  async indexBikes() {\n    await this.bikes.createIndex({ chip_id: 1 }, { unique: true });\n    await this.bikes.createIndex({ station_id: 1 });\n    await this.bikes.createIndex({ status: 1 });\n  }\n\n  get rentals(): Collection<Rental> {\n    return this.db.collection(process.env.DB_RENTALS_COLLECTION as string);\n  }\n\n  get suppliers(): Collection<Supplier> {\n    return this.db.collection(process.env.DB_SUPPLIERS_COLLECTION as string);\n  }\n\n  get rentalLogs(): Collection<RentalLog> {\n    return this.db.collection(process.env.DB_RENTAL_LOGS_COLLECTION as string);\n  }\n\n  get reservations(): Collection<Rental> {\n    return this.db.collection(process.env.DB_RESERVATIONS_COLLECTION as string);\n  }\n\n  get payments(): Collection<Payment> {\n    return this.db.collection(process.env.DB_PAYMENTS_COLLECTION as string);\n  }\n\n  get wallets(): Collection<Wallet> {\n    return this.db.collection(process.env.DB_WALLETS_COLLECTION as string);\n  }\n\n  get transactions(): Collection<Transaction> {\n    return this.db.collection(process.env.DB_TRANSACTIONS_COLLECTION as string);\n  }\n\n  get refunds(): Collection<Refund>{\n    return this.db.collection(process.env.DB_REFUNDS_COLLECTION as string)\n  }\n\n  get withdraws(): Collection<Withdraw>{\n    return this.db.collection(process.env.DB_WITHDRAWS_COLLECTION as string)\n  }\n}\n\nconst databaseService = new DatabaseService();\nexport default databaseService;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/services/rentals.services.ts:\n"
      },
      {
        "text": "import type { Document, ObjectId } from 'mongodb'\n\nimport { Decimal128, Int32 } from 'mongodb'\n\nimport { BikeStatus, GroupByOptions, RentalStatus, ReservationStatus, Role } from '~/constants/enums'\nimport HTTP_STATUS from '~/constants/http-status'\nimport { AUTH_MESSAGE, COMMON_MESSAGE, RENTALS_MESSAGE } from '~/constants/messages'\nimport { ErrorWithStatus } from '~/models/errors'\nimport Rental from '~/models/schemas/rental.schema'\nimport { toObjectId } from '~/utils/string'\n\nimport databaseService from './database.services'\nimport { getLocalTime } from '~/utils/date'\nimport {\n  CancelRentalReqBody,\n  EndRentalByAdminOrStaffReqBody,\n  UpdateRentalReqBody\n} from '~/models/requests/rentals.requests'\nimport RentalLog from '~/models/schemas/rental-audit-logs.schema'\n\nclass RentalsService {\n  async createRentalSession({\n    user_id,\n    start_station,\n    bike_id\n  }: {\n    user_id: ObjectId | string\n    start_station: ObjectId\n    bike_id: ObjectId\n  }) {\n    const session = databaseService.getClient().startSession()\n\n    try {\n      let rental: Rental | null = null\n      const now = getLocalTime()\n\n      await session.withTransaction(async () => {\n        rental = new Rental({\n          user_id: toObjectId(user_id),\n          start_station,\n          bike_id,\n          start_time: now,\n          status: RentalStatus.Rented\n        })\n\n        await databaseService.rentals.insertOne(rental, { session })\n\n        await databaseService.bikes.updateOne(\n          { _id: bike_id },\n          {\n            $set: {\n              station_id: null,\n              status: BikeStatus.Booked,\n              updated_at: now\n            }\n          },\n          { session }\n        )\n      })\n      if (!rental) {\n        throw new ErrorWithStatus({\n          message: RENTALS_MESSAGE.CREATE_SESSION_FAIL,\n          status: HTTP_STATUS.BAD_REQUEST\n        })\n      }\n\n      return {\n        ...(rental as any),\n        total_price: 0\n      }\n    } catch (error) {\n      throw error\n    } finally {\n      await session.endSession()\n    }\n  }\n\n  async endRentalSession({ user_id, rental }: { user_id: ObjectId; rental: Rental }) {\n    const end_station = rental.start_station\n    const session = databaseService.getClient().startSession()\n    try {\n      let endedRental: Rental = rental\n      await session.withTransaction(async () => {\n        const user = await databaseService.users.findOne({ _id: user_id })\n        if (!user) {\n          throw new ErrorWithStatus({\n            message: RENTALS_MESSAGE.USER_NOT_FOUND.replace('%s', user_id.toString()),\n            status: HTTP_STATUS.NOT_FOUND\n          })\n        }\n\n        if (rental.user_id.toString().localeCompare(user_id.toString()) !== 0) {\n          throw new ErrorWithStatus({\n            message: RENTALS_MESSAGE.CANNOT_END_OTHER_RENTAL,\n            status: HTTP_STATUS.FORBIDDEN\n          })\n        }\n        const now = getLocalTime()\n        const duration = this.generateDuration(rental.start_time, now)\n        const totalPrice = this.generateTotalPrice(duration)\n\n        const updatedData: Partial<Rental> = {\n          end_station,\n          end_time: now,\n          duration: new Int32(duration),\n          total_price: Decimal128.fromString(totalPrice.toString()),\n          status: RentalStatus.Completed\n        }\n\n        const result = await databaseService.rentals.findOneAndUpdate(\n          { _id: rental._id },\n          {\n            $set: {\n              ...updatedData,\n              updated_at: now\n            }\n          },\n          { returnDocument: 'after', session }\n        )\n\n        if (result) {\n          endedRental = result\n          await databaseService.bikes.updateOne(\n            { _id: result.bike_id },\n            {\n              $set: {\n                station_id: end_station,\n                status: BikeStatus.Available,\n                updated_at: now\n              }\n            },\n            { session }\n          )\n        }\n      })\n      return {\n        ...endedRental,\n        total_price: Number(endedRental.total_price.toString())\n      }\n    } catch (error) {\n      throw error\n    } finally {\n      await session.endSession()\n    }\n  }\n\n  async endRentalByAdminOrStaff({\n    user_id,\n    rental,\n    payload\n  }: {\n    user_id: ObjectId\n    rental: Rental\n    payload: EndRentalByAdminOrStaffReqBody\n  }) {\n    const { end_station, end_time, reason } = payload\n    const objStationId = toObjectId(end_station)\n    const session = databaseService.getClient().startSession()\n    try {\n      let endedRental: Rental = rental\n      await session.withTransaction(async () => {\n        const user = await databaseService.users.findOne({ _id: user_id })\n        if (!user) {\n          throw new ErrorWithStatus({\n            message: RENTALS_MESSAGE.USER_NOT_FOUND.replace('%s', user_id.toString()),\n            status: HTTP_STATUS.NOT_FOUND\n          })\n        }\n\n        const now = getLocalTime()\n        const duration = this.generateDuration(rental.start_time, now)\n        const totalPrice = this.generateTotalPrice(duration)\n\n        const endTime = end_time ? new Date(end_time) : now\n        if (endTime > now) {\n          throw new ErrorWithStatus({\n            message: RENTALS_MESSAGE.END_DATE_CANNOT_BE_IN_FUTURE,\n            status: HTTP_STATUS.BAD_REQUEST\n          })\n        }\n        if (endTime < rental.start_time) {\n          throw new ErrorWithStatus({\n            message: RENTALS_MESSAGE.END_TIME_MUST_GREATER_THAN_START_TIME,\n            status: HTTP_STATUS.BAD_REQUEST\n          })\n        }\n\n        const updatedData: Partial<Rental> = {\n          end_station: objStationId,\n          end_time: endTime,\n          duration: new Int32(duration),\n          total_price: Decimal128.fromString(totalPrice.toString()),\n          status: RentalStatus.Completed\n        }\n\n        const result = await databaseService.rentals.findOneAndUpdate(\n          { _id: rental._id },\n          {\n            $set: {\n              ...updatedData,\n              updated_at: now\n            }\n          },\n          { returnDocument: 'after', session }\n        )\n\n        if (result) {\n          endedRental = result\n          await databaseService.bikes.updateOne(\n            { _id: result.bike_id },\n            {\n              $set: {\n                station_id: objStationId,\n                status: BikeStatus.Available,\n                updated_at: now\n              }\n            },\n            { session }\n          )\n\n          const log = new RentalLog({\n            rental_id: rental._id!,\n            admin_id: user_id,\n            changes: Object.keys(updatedData),\n            reason\n          })\n          await databaseService.rentalLogs.insertOne(log)\n        }\n      })\n      return {\n        ...endedRental,\n        total_price: Number(endedRental.total_price.toString())\n      }\n    } catch (error) {\n      throw error\n    } finally {\n      await session.endSession()\n    }\n  }\n\n  // for staff/admin\n  async getDetailRental({ rental_id }: { rental_id: string | ObjectId }) {\n    const rental = await databaseService.rentals.findOne({\n      _id: toObjectId(rental_id)\n    })\n    if (!rental) {\n      throw new ErrorWithStatus({\n        message: RENTALS_MESSAGE.NOT_FOUND.replace('%s', rental_id.toString()),\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n    return await this.buildDetailResponse(rental)\n  }\n\n  // for user\n  async getMyDetailRental({ user_id, rental_id }: { user_id: ObjectId; rental_id: string | ObjectId }) {\n    const rental = await databaseService.rentals.findOne({\n      _id: toObjectId(rental_id)\n    })\n    if (!rental) {\n      throw new ErrorWithStatus({\n        message: RENTALS_MESSAGE.NOT_FOUND.replace('%s', rental_id.toString()),\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    if (rental.user_id.toString().localeCompare(user_id.toString()) !== 0) {\n      throw new ErrorWithStatus({\n        message: AUTH_MESSAGE.ACCESS_DENIED,\n        status: HTTP_STATUS.FORBIDDEN\n      })\n    }\n    return await this.buildDetailResponse(rental)\n  }\n\n  async buildDetailResponse(rental: Rental) {\n    const user = await databaseService.users.findOne({ _id: rental.user_id })\n    if (!user) {\n      throw new ErrorWithStatus({\n        message: RENTALS_MESSAGE.USER_NOT_FOUND.replace('%s', rental.user_id.toString()),\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    const bike = await databaseService.bikes.findOne({ _id: rental.bike_id })\n    if (!bike) {\n      throw new ErrorWithStatus({\n        message: RENTALS_MESSAGE.BIKE_NOT_FOUND.replace('%s', rental.bike_id.toString()),\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n    if (bike.station_id) {\n      const bikeStation = await databaseService.stations.findOne({ _id: bike.station_id })\n      if (!bikeStation) {\n        throw new ErrorWithStatus({\n          message: RENTALS_MESSAGE.STATION_NOT_FOUND.replace('%s', rental.start_station.toString()),\n          status: HTTP_STATUS.NOT_FOUND\n        })\n      }\n    }\n\n    const startStation = await databaseService.stations.findOne({ _id: rental.start_station })\n    if (!startStation) {\n      throw new ErrorWithStatus({\n        message: RENTALS_MESSAGE.STATION_NOT_FOUND.replace('%s', rental.start_station.toString()),\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    let endStation = null\n    if (rental.end_station) {\n      endStation = await databaseService.stations.findOne({ _id: rental.end_station })\n    }\n\n    const { password, email_verify_token, forgot_password_token, ...insensitiveUserData } = user\n    const { station_id, ...restBike } = bike\n    const { _id, user_id, bike_id, start_station, end_station, ...restRental } = rental\n\n    return {\n      _id,\n      user: insensitiveUserData,\n      bike: restBike,\n      start_station: startStation,\n      end_station: endStation,\n      ...restRental\n    }\n  }\n\n  async updateDetailRental({\n    rental_id,\n    admin_id,\n    payload\n  }: {\n    rental_id: string\n    admin_id: string\n    payload: UpdateRentalReqBody\n  }) {\n    const { end_station, end_time, status, total_price, reason } = payload\n    const objRentalId = toObjectId(rental_id)\n    const now = getLocalTime()\n\n    const session = databaseService.getClient().startSession()\n    try {\n      let result\n      await session.withTransaction(async () => {\n        const rental = await databaseService.rentals.findOne({ _id: objRentalId }, { session })\n\n        if (!rental) {\n          throw new ErrorWithStatus({\n            message: RENTALS_MESSAGE.NOT_FOUND,\n            status: HTTP_STATUS.NOT_FOUND\n          })\n        }\n\n        const updateData: any = { updated_at: now }\n\n        if (end_time) {\n          if (!end_station && !rental.end_station) {\n            throw new ErrorWithStatus({\n              message: RENTALS_MESSAGE.CANNOT_END_WITHOUT_END_STATION,\n              status: HTTP_STATUS.BAD_REQUEST\n            })\n          }\n          const end = new Date(end_time)\n          if (end > now) {\n            throw new ErrorWithStatus({\n              message: RENTALS_MESSAGE.END_DATE_CANNOT_BE_IN_FUTURE,\n              status: HTTP_STATUS.BAD_REQUEST\n            })\n          }\n          if (end < rental.start_time) {\n            throw new ErrorWithStatus({\n              message: RENTALS_MESSAGE.END_TIME_MUST_GREATER_THAN_START_TIME,\n              status: HTTP_STATUS.BAD_REQUEST\n            })\n          }\n\n          updateData.end_time = end\n          updateData.duration = this.generateDuration(rental.start_time, end)\n\n          if (status !== undefined) {\n            updateData.status = status\n          } else if (rental.status === RentalStatus.Rented) {\n            updateData.status = RentalStatus.Completed\n          }\n        }\n\n        if (end_station) {\n          if (!rental.end_time && !end_time) {\n            throw new ErrorWithStatus({\n              message: RENTALS_MESSAGE.CANNOT_END_WITHOUT_END_TIME,\n              status: HTTP_STATUS.BAD_REQUEST\n            })\n          }\n          updateData.end_station = toObjectId(end_station)\n        }\n\n        if (total_price !== undefined) {\n          updateData.total_price = total_price\n        } else if (end_time) {\n          updateData.total_price = this.generateTotalPrice(updateData.duration)\n        }\n\n        result = await databaseService.rentals.findOneAndUpdate(\n          { _id: objRentalId },\n          { $set: updateData },\n          { returnDocument: 'after', session }\n        )\n\n        const { updated_at, ...changedFields } = updateData\n\n        const log = new RentalLog({\n          rental_id: rental._id,\n          admin_id: toObjectId(admin_id),\n          reason: reason || RENTALS_MESSAGE.NO_REASON,\n          changes: Object.keys(changedFields)\n        })\n\n        await databaseService.rentalLogs.insertOne(log, { session })\n      })\n      return result\n    } catch (error) {\n      throw error\n    } finally {\n      await session.endSession()\n    }\n  }\n\n  async cancelRental({\n    rental_id,\n    admin_id,\n    payload\n  }: {\n    rental_id: string\n    admin_id: string\n    payload: CancelRentalReqBody\n  }) {\n    const objRentalId = toObjectId(rental_id)\n    const now = getLocalTime()\n    const { bikeStatus, reason } = payload\n\n    const session = databaseService.getClient().startSession()\n    try {\n      let result,\n        total_price = 0\n      await session.withTransaction(async () => {\n        const rental = await databaseService.rentals.findOne({ _id: objRentalId })\n\n        if (!rental) {\n          throw new ErrorWithStatus({\n            message: RENTALS_MESSAGE.NOT_FOUND,\n            status: HTTP_STATUS.NOT_FOUND\n          })\n        }\n        total_price = Number(rental.total_price.toString() || '0')\n\n        const updateData: any = {\n          end_time: now,\n          end_station: rental.start_station,\n          status: RentalStatus.Cancelled,\n          updated_at: now\n        }\n\n        result = await databaseService.rentals.findOneAndUpdate(\n          { _id: objRentalId },\n          { $set: updateData },\n          { returnDocument: 'after', session }\n        )\n\n        const updatedBikeStatus = bikeStatus ? bikeStatus : BikeStatus.Available\n\n        await databaseService.bikes.updateOne(\n          { _id: rental.bike_id },\n          {\n            $set: {\n              station_id: rental.start_station,\n              status: updatedBikeStatus,\n              updated_at: now\n            }\n          },\n          { session }\n        )\n\n        const { updated_at, ...changedFields } = updateData\n\n        const log = new RentalLog({\n          rental_id: rental._id,\n          admin_id: toObjectId(admin_id),\n          reason: reason || RENTALS_MESSAGE.NO_REASON,\n          changes: Object.keys(changedFields)\n        })\n\n        await databaseService.rentalLogs.insertOne(log, { session })\n      })\n      return {\n        ...(result as any),\n        total_price,\n        reason\n      }\n    } catch (error) {\n      throw error\n    } finally {\n      await session.endSession()\n    }\n  }\n\n  async getRentalRevenue({ from, to, groupBy }: { from: string; to: string; groupBy: GroupByOptions }) {\n    let dateFormat\n    switch (groupBy) {\n      case GroupByOptions.Month:\n        dateFormat = '%m-%Y'\n        break\n      case GroupByOptions.Year:\n        dateFormat = '%Y'\n        break\n      default:\n        dateFormat = '%d-%m-%Y'\n    }\n\n    const startDate = from ? new Date(from) : new Date('2025-01-01')\n    const endDate = to ? new Date(to) : getLocalTime()\n\n    const pipeline = [\n      {\n        $match: {\n          status: RentalStatus.Completed,\n          end_time: { $gte: startDate, $lte: endDate }\n        }\n      },\n      {\n        $group: {\n          _id: {\n            $dateToString: { format: dateFormat, date: '$end_time' }\n          },\n          totalRevenue: { $sum: { $toDouble: '$total_price' } },\n          totalRentals: { $sum: 1 }\n        }\n      },\n      { $sort: { _id: 1 } },\n      {\n        $project: {\n          _id: 0,\n          date: '$_id',\n          totalRevenue: 1,\n          totalRentals: 1\n        }\n      }\n    ]\n\n    const result = await databaseService.rentals.aggregate(pipeline).toArray()\n    return {\n      period: { from: startDate, to: endDate },\n      groupBy: groupBy ?? GroupByOptions.Day,\n      data: result\n    }\n  }\n\n  async getStationActivity({ from, to, stationId }: { from: string; to: string; stationId: string }) {\n    const startDate = from ? new Date(from) : new Date('2025-01-01')\n    const endDate = to ? new Date(to) : getLocalTime()\n\n    const matchStage: any = {\n      start_time: { $gte: startDate },\n      end_time: { $lte: endDate },\n      status: RentalStatus.Completed\n    }\n\n    if (stationId) {\n      matchStage.start_station = toObjectId(stationId)\n    }\n\n    const pipeline = [\n      {\n        $match: matchStage\n      },\n      {\n        $addFields: {\n          durationHours: {\n            $divide: [{ $subtract: ['$end_time', '$start_time'] }, 1000 * 60 * 60]\n          }\n        }\n      },\n      {\n        $facet: {\n          rentals: [\n            {\n              $group: {\n                _id: '$start_station',\n                totalUsageHours: { $sum: '$durationHours' },\n                totalRentals: { $sum: 1 }\n              }\n            }\n          ],\n          returns: [\n            {\n              $group: {\n                _id: '$end_station',\n                totalReturns: { $sum: 1 }\n              }\n            }\n          ]\n        }\n      },\n      {\n        $project: {\n          all: { $concatArrays: ['$rentals', '$returns'] }\n        }\n      },\n      { $unwind: '$all' },\n      {\n        $group: {\n          _id: '$all._id',\n          totalRentals: { $sum: '$all.totalRentals' },\n          totalReturns: { $sum: '$all.totalReturns' },\n          totalUsageHours: { $sum: '$all.totalUsageHours' }\n        }\n      },\n      {\n        $lookup: {\n          from: 'stations',\n          localField: '_id',\n          foreignField: '_id',\n          as: 'station'\n        }\n      },\n      { $unwind: '$station' },\n      {\n        $lookup: {\n          from: 'bikes',\n          let: { stationId: '$_id' },\n          pipeline: [\n            {\n              $match: {\n                $expr: {\n                  $eq: ['$station_id', '$$stationId']\n                }\n              }\n            },\n            { $count: 'totalBikes' }\n          ],\n          as: 'bike_stats'\n        }\n      },\n      {\n        $addFields: {\n          totalBikes: { $ifNull: [{ $arrayElemAt: ['$bike_stats.totalBikes', 0] }, 0] }\n        }\n      },\n      {\n        $addFields: {\n          totalAvailableHours: {\n            $multiply: [\n              '$totalBikes',\n              {\n                $divide: [{ $subtract: [endDate, startDate] }, 1000 * 60 * 60]\n              }\n            ]\n          }\n        }\n      },\n      {\n        $addFields: {\n          usageRate: {\n            $cond: [\n              { $eq: ['$totalAvailableHours', 0] },\n              0,\n              {\n                $divide: ['$totalUsageHours', '$totalAvailableHours']\n              }\n            ]\n          }\n        }\n      },\n      {\n        $project: {\n          _id: 0,\n          station: '$station.name',\n          totalBikes: 1,\n          totalRentals: 1,\n          totalReturns: 1,\n          totalUsageHours: 1,\n          totalAvailableHours: 1,\n          usageRate: { $round: ['$usageRate', 2] }\n        }\n      },\n      { $sort: { station: 1 } }\n    ]\n\n    const result = await databaseService.rentals.aggregate(pipeline).toArray()\n    return {\n      period: { from: startDate, to: endDate },\n      data: result\n    }\n  }\n\n  async getReservationsStatistic({ from, to, groupBy }: { from: string; to: string; groupBy: GroupByOptions }) {\n    const startDate = from ? new Date(from) : new Date('2025-01-01')\n    const endDate = to ? new Date(to) : getLocalTime()\n\n    let dateFormat\n    switch (groupBy) {\n      case GroupByOptions.Month:\n        dateFormat = '%m-%Y'\n        break\n      case GroupByOptions.Year:\n        dateFormat = '%Y'\n        break\n      default:\n        dateFormat = '%d-%m-%Y'\n    }\n\n    const pipeline = [\n      {\n        $match: {\n          created_at: { $gte: startDate, $lte: endDate }\n        }\n      },\n      {\n        $group: {\n          _id: {\n            period: { $dateToString: { format: dateFormat, date: '$start_time' } }\n          },\n          totalReservations: { $sum: 1 },\n          successful: {\n            $sum: {\n              $cond: [{ $eq: ['$status', ReservationStatus.Active] }, 1, 0]\n            }\n          },\n          cancelled: {\n            $sum: {\n              $cond: [{ $eq: ['$status', ReservationStatus.Cancelled] }, 1, 0]\n            }\n          },\n          expired: {\n            $sum: {\n              $cond: [{ $eq: ['$status', ReservationStatus.Expired] }, 1, 0]\n            }\n          }\n        }\n      },\n      {\n        $project: {\n          _id: 0,\n          period: '$_id.period',\n          totalReservations: 1,\n          successful: 1,\n          cancelled: 1,\n          expired: 1,\n          successRate: {\n            $cond: [{ $gt: ['$totalReservations', 0] }, { $divide: ['$successful', '$totalReservations'] }, 0]\n          }\n        }\n      },\n      { $sort: { period: -1 } }\n    ]\n\n    const result = await databaseService.reservations.aggregate(pipeline).toArray()\n    return {\n      period: { from: startDate, to: endDate },\n      groupBy: groupBy ?? GroupByOptions.Day,\n      data: result\n    }\n  }\n\n  async getRentalsByStationIdPipeline({\n    stationId,\n    status,\n    expired_within\n  }: {\n    stationId: string\n    status: RentalStatus\n    expired_within: string\n  }) {\n    const objStationId = toObjectId(stationId)\n    const matchQuery: any = {\n      start_station: objStationId\n    }\n    if (status) {\n      matchQuery.status = status\n    }\n\n    const now = getLocalTime()\n    if (status === RentalStatus.Reserved && expired_within) {\n      const minutes = parseInt(expired_within, 10)\n      if (!isNaN(minutes)) {\n        const expiryLimit = new Date(now.getTime() + minutes * 60 * 1000)\n\n        matchQuery.start_time = {\n          $gt: now,\n          $lte: expiryLimit\n        }\n      }\n    }\n\n    const pipeline: Document[] = [\n      { $match: matchQuery },\n      {\n        $lookup: {\n          from: 'bikes',\n          localField: 'bike_id',\n          foreignField: '_id',\n          as: 'bikeInfo'\n        }\n      },\n      { $unwind: '$bikeInfo' },\n      {\n        $addFields: {\n          timeRemainingMinutes: {\n            $cond: {\n              if: { $eq: ['$status', RentalStatus.Reserved] },\n              then: {\n                $max: [0, { $round: [{ $divide: [{ $subtract: ['$start_time', now] }, 60000] }] }]\n              },\n              else: '$$REMOVE'\n            }\n          }\n        }\n      },\n      {\n        $project: {\n          _id: 1,\n          user_id: 1,\n          bike: '$bikeInfo',\n          status: 1,\n          timeRemainingMinutes: 1,\n          start_station: 1,\n          end_station: 1,\n          start_time: 1,\n          end_time: 1,\n          duration: 1,\n          total_price: { $toDouble: { $ifNull: ['$total_price', '0']}},\n          created_at: 1,\n          updated_at: 1\n        }\n      },\n      {\n        $sort: {\n          timeRemainingMinutes: -1\n        }\n      }\n    ]\n\n    return pipeline;\n  }\n\n  generateDuration(start: Date, end: Date) {\n    return Math.ceil((end.getTime() - start.getTime()) / 60000)\n  }\n\n  generateTotalPrice(duration: number) {\n    // eslint-disable-next-line node/prefer-global/process\n    const pricePerMin = Number(process.env.PRICE_PER_MIN || '1')\n    return pricePerMin * duration\n  }\n}\n\nconst rentalsService = new RentalsService()\nexport default rentalsService"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/services/report.services.ts:\n"
      },
      {
        "text": "import type { Filter } from 'mongodb'\nimport type { Buffer } from 'node:buffer'\n\nimport { v2 as cloudinary } from 'cloudinary'\nimport { ObjectId } from 'mongodb'\nimport process from 'node:process'\nimport { Readable } from 'node:stream'\nimport pLimit from 'p-limit'\n\nimport type { ReportPriority } from '~/constants/enums'\nimport type { CreateReportReqBody } from '~/models/requests/reports.requests'\nimport type { ReportType } from '~/models/schemas/report.schema'\n\nimport { ReportStatus } from '~/constants/enums'\nimport HTTP_STATUS from '~/constants/http-status'\nimport { REPORTS_MESSAGES } from '~/constants/messages'\nimport { ErrorWithStatus } from '~/models/errors'\nimport Report from '~/models/schemas/report.schema'\n\nimport databaseService from './database.services'\n\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME!,\n  api_key: process.env.CLOUDINARY_API_KEY!,\n  api_secret: process.env.CLOUDINARY_API_SECRET!\n})\n\nfunction bufferToStream(buffer: Buffer) {\n  const readable = new Readable()\n  readable.push(buffer)\n  readable.push(null)\n  return readable\n}\n\nclass ReportService {\n  async createReport({\n    userID,\n    payload,\n    files\n  }: {\n    userID: string\n    payload: CreateReportReqBody\n    files?: Express.Multer.File[]\n  }) {\n    const reportID = new ObjectId()\n    const currentDate = new Date()\n    const vietnamTimezoneOffset = 7 * 60\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n\n    const reportData: ReportType = {\n      ...payload,\n      _id: reportID,\n      message: payload.message,\n      type: payload.type,\n      status: ReportStatus.Pending,\n      created_at: localTime,\n      location: payload.location,\n      priority: '' as ReportPriority,\n      media_urls: []\n    }\n\n    if (payload.station_id) reportData.station_id = new ObjectId(payload.station_id)\n    if (payload.rental_id) reportData.rental_id = new ObjectId(payload.rental_id)\n    if (userID) reportData.user_id = new ObjectId(userID)\n    if (payload.bike_id) reportData.bike_id = new ObjectId(payload.bike_id)\n\n    await databaseService.reports.insertOne(new Report(reportData))\n\n    if (files && files.length > 0) {\n      ;(async () => {\n        try {\n          const limit = pLimit(3)\n          const media_urls = await Promise.all(\n            files.map((file) =>\n              limit(async () => {\n                const uploadStream = () =>\n                  new Promise<string>((resolve, reject) => {\n                    const stream = cloudinary.uploader.upload_stream(\n                      {\n                        resource_type: 'auto',\n                        folder: 'reports',\n                        chunk_size: 6_000_000\n                      },\n                      (error, result) => {\n                        if (error) return reject(error)\n                        resolve(result?.secure_url || '')\n                      }\n                    )\n                    bufferToStream(file.buffer).pipe(stream)\n                  })\n\n                return await uploadStream()\n              })\n            )\n          )\n\n          await databaseService.reports.updateOne({ _id: reportID }, { $set: { media_urls } })\n        } catch (error) {\n          console.error('Upload report image error:', error)\n        }\n      })()\n    }\n\n    return { _id: reportID }\n  }\n\n  async updateReportStatus({\n    reportID,\n    newStatus,\n    assignee_id,\n    priority\n  }: {\n    reportID: string\n    newStatus: string\n    assignee_id?: string\n    priority?: string\n  }) {\n    const allowedStatuses: Record<ReportStatus, ReportStatus[]> = {\n      [ReportStatus.Pending]: [ReportStatus.InProgress, ReportStatus.Cancel],\n      [ReportStatus.InProgress]: [ReportStatus.Resolved],\n      [ReportStatus.Resolved]: [],\n      [ReportStatus.Cancel]: []\n    }\n\n    const findReport = await databaseService.reports.findOne({ _id: new ObjectId(reportID) })\n    if (!findReport) {\n      throw new ErrorWithStatus({\n        message: REPORTS_MESSAGES.REPORT_NOT_FOUND,\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    if (!Object.values(ReportStatus).includes(newStatus as ReportStatus)) {\n      throw new ErrorWithStatus({\n        status: HTTP_STATUS.BAD_REQUEST,\n        message: REPORTS_MESSAGES.INVALID_NEW_STATUS\n      })\n    }\n\n    const currentStatus = findReport.status as ReportStatus\n    const newStatusTyped = newStatus as ReportStatus\n\n    if (!allowedStatuses[currentStatus]?.includes(newStatusTyped)) {\n      throw new ErrorWithStatus({\n        status: HTTP_STATUS.BAD_REQUEST,\n        message: REPORTS_MESSAGES.INVALID_NEW_STATUS\n      })\n    }\n\n    const updateData: any = {\n      status: newStatusTyped\n    }\n\n    if (newStatusTyped === ReportStatus.InProgress) {\n      if (!assignee_id || assignee_id.trim() === '') {\n        throw new ErrorWithStatus({\n          message: REPORTS_MESSAGES.STAFF_ID_IS_REQUIRED,\n          status: HTTP_STATUS.BAD_REQUEST\n        })\n      }\n      if (!priority || priority.trim() === '') {\n        throw new ErrorWithStatus({\n          message: REPORTS_MESSAGES.PRIORITY_IS_REQUIRED,\n          status: HTTP_STATUS.BAD_REQUEST\n        })\n      }\n\n      updateData.assignee_id = new ObjectId(assignee_id)\n      updateData.priority = priority\n    }\n\n    const currentDate = new Date()\n    const vietnamTimezoneOffset = 7 * 60\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n\n    if (newStatusTyped === ReportStatus.Resolved) {\n      updateData.updated_at = localTime\n    }\n\n    const result = await databaseService.reports.findOneAndUpdate(\n      { _id: new ObjectId(reportID) },\n      { $set: updateData },\n      { returnDocument: 'after' }\n    )\n\n    return result\n  }\n}\n\nconst reportService = new ReportService()\nexport default reportService"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/services/supplier.services.ts:\n"
      },
      {
        "text": "import { ObjectId } from 'mongodb'\n\nimport type {\n  CreateSupplierReqBody,\n  GetSupplierReqQuery,\n  UpdateSupplierReqBody\n} from '~/models/requests/suppliers.request'\nimport type { SupplierType } from '~/models/schemas/supplier.schema'\nimport type { SupplierBikeStats } from '~/models/schemas/user.schema'\n\nimport { SupplierStatus } from '~/constants/enums'\nimport Supplier from '~/models/schemas/supplier.schema'\n\nimport databaseService from './database.services'\nimport { NextFunction, Response } from 'express'\nimport { sendPaginatedResponse } from '~/utils/pagination.helper'\n\nclass SupplierService {\n  async createSupplier({ payload }: { payload: CreateSupplierReqBody }) {\n    const supplierID = new ObjectId()\n\n    const currentDate = new Date()\n    const vietnamTimezoneOffset = 7 * 60\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n\n    const supplierData: SupplierType = {\n      _id: supplierID,\n      name: payload.name,\n      contact_info: {\n        address: payload.address,\n        phone_number: payload.phone_number\n      },\n      contract_fee: payload.contract_fee,\n      status: SupplierStatus.ACTIVE,\n      created_at: localTime\n    }\n\n    const result = await databaseService.suppliers.insertOne(new Supplier(supplierData))\n\n    return result\n  }\n\n  async updateSupplier({ id, payload }: { id: string; payload: UpdateSupplierReqBody }) {\n    const updateData: any = {}\n\n    if (payload.address) {\n      updateData['contact_info.address'] = payload.address\n    }\n    if (payload.phone_number) {\n      updateData['contact_info.phone_number'] = payload.phone_number\n    }\n    if (payload.name) {\n      updateData.name = payload.name\n    }\n    if (payload.contract_fee) {\n      updateData.contract_fee = payload.contract_fee\n    }\n\n    const currentDate = new Date()\n    const vietnamTimezoneOffset = 7 * 60\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n\n    updateData.updated_at = localTime\n\n    const result = await databaseService.suppliers.findOneAndUpdate(\n      { _id: new ObjectId(id) },\n      { $set: updateData },\n      { returnDocument: 'after' }\n    )\n\n    return result\n  }\n\n  async updateStatus({ id, newStatus }: { id: string; newStatus: SupplierStatus }) {\n    const updateData: any = {}\n    updateData.status = newStatus\n\n    const currentDate = new Date()\n    const vietnamTimezoneOffset = 7 * 60\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n\n    updateData.updated_at = localTime\n\n    const result = await databaseService.suppliers.findOneAndUpdate(\n      { _id: new ObjectId(id) },\n      { $set: updateData },\n      { returnDocument: 'after' }\n    )\n\n    return result\n  }\n\n  async getAllSupplierBikeStats() {\n    const result = await databaseService.suppliers\n      .aggregate<SupplierBikeStats>([\n        {\n          $lookup: {\n            from: 'bikes',\n            localField: '_id',\n            foreignField: 'supplier_id',\n            as: 'bikes'\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            supplier_id: '$_id',\n            supplier_name: '$name',\n            total_bikes: { $size: '$bikes' },\n            active_bikes: {\n              $size: {\n                $filter: {\n                  input: '$bikes',\n                  as: 'b',\n                  cond: { $eq: ['$$b.status', 'AVAILABLE'] }\n                }\n              }\n            },\n            booked_bikes: {\n              $size: {\n                $filter: {\n                  input: '$bikes',\n                  as: 'b',\n                  cond: { $eq: ['$$b.status', 'BOOKED'] }\n                }\n              }\n            },\n            broken_bikes: {\n              $size: {\n                $filter: {\n                  input: '$bikes',\n                  as: 'b',\n                  cond: { $eq: ['$$b.status', 'BROKEN'] }\n                }\n              }\n            },\n            reserve_bikes: {\n              $size: {\n                $filter: {\n                  input: '$bikes',\n                  as: 'b',\n                  cond: { $eq: ['$$b.status', 'RESERVED'] }\n                }\n              }\n            },\n            maintain_bikes: {\n              $size: {\n                $filter: {\n                  input: '$bikes',\n                  as: 'b',\n                  cond: { $eq: ['$$b.status', 'MAINTAINED'] }\n                }\n              }\n            },\n            unavailable_bikes: {\n              $size: {\n                $filter: {\n                  input: '$bikes',\n                  as: 'b',\n                  cond: { $eq: ['$$b.status', 'UNAVAILABLE'] }\n                }\n              }\n            }\n          }\n        }\n      ])\n      .toArray()\n\n    return result\n  }\n\n  async getSupplierBikeStats(supplierID: string) {\n    const result = await databaseService.suppliers\n      .aggregate<SupplierBikeStats>([\n        {\n          $match: {\n            _id: new ObjectId(supplierID)\n          }\n        },\n        {\n          $lookup: {\n            from: 'bikes',\n            localField: '_id',\n            foreignField: 'supplier_id',\n            as: 'bikes'\n          }\n        },\n        {\n          $project: {\n            _id: 0,\n            supplier_id: '$_id',\n            supplier_name: '$name',\n            total_bikes: { $size: '$bikes' },\n            active_bikes: {\n              $size: {\n                $filter: {\n                  input: '$bikes',\n                  as: 'b',\n                  cond: { $eq: ['$$b.status', 'AVAILABLE'] }\n                }\n              }\n            },\n            booked_bikes: {\n              $size: {\n                $filter: {\n                  input: '$bikes',\n                  as: 'b',\n                  cond: { $eq: ['$$b.status', 'BOOKED'] }\n                }\n              }\n            },\n            broken_bikes: {\n              $size: {\n                $filter: {\n                  input: '$bikes',\n                  as: 'b',\n                  cond: { $eq: ['$$b.status', 'BROKEN'] }\n                }\n              }\n            },\n            reserve_bikes: {\n              $size: {\n                $filter: {\n                  input: '$bikes',\n                  as: 'b',\n                  cond: { $eq: ['$$b.status', 'RESERVED'] }\n                }\n              }\n            },\n            maintain_bikes: {\n              $size: {\n                $filter: {\n                  input: '$bikes',\n                  as: 'b',\n                  cond: { $eq: ['$$b.status', 'MAINTAINED'] }\n                }\n              }\n            },\n            unavailable_bikes: {\n              $size: {\n                $filter: {\n                  input: '$bikes',\n                  as: 'b',\n                  cond: { $eq: ['$$b.status', 'UNAVAILABLE'] }\n                }\n              }\n            }\n          }\n        }\n      ])\n      .toArray()\n\n    return result\n  }\n\n  async getAllSupplier(res: Response, next: NextFunction, query: GetSupplierReqQuery) {\n    const { status } = query\n    const filter: any = {}\n\n    if (status) {\n      filter.status = status\n    }\n\n    await sendPaginatedResponse(res, next, databaseService.suppliers, query, filter)\n  }\n}\n\nconst supplierService = new SupplierService()\nexport default supplierService"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/services/users.services.ts:\n"
      },
      {
        "text": "import { ObjectId } from \"mongodb\";\nimport process from \"node:process\";\nimport nodemailer from \"nodemailer\";\n\nimport type { RegisterReqBody, UpdateMeReqBody } from \"~/models/requests/users.requests\";\n\nimport { Role, TokenType, UserVerifyStatus } from \"~/constants/enums\";\nimport HTTP_STATUS from \"~/constants/http-status\";\nimport { USERS_MESSAGES } from \"~/constants/messages\";\nimport { ErrorWithStatus } from \"~/models/errors\";\nimport RefreshToken from \"~/models/schemas/refresh-token.schemas\";\nimport User from \"~/models/schemas/user.schema\";\nimport { hashPassword } from \"~/utils/crypto\";\nimport { readEmailTemplate } from \"~/utils/email-templates\";\nimport { signToken, verifyToken } from \"~/utils/jwt\";\n\nimport databaseService from \"./database.services\";\nimport walletService from \"./wallets.services\";\n\nclass UsersService {\n  private decodeRefreshToken(refresh_token: string) {\n    return verifyToken({\n      token: refresh_token,\n      secretOrPublicKey: process.env.JWT_SECRET_REFRESH_TOKEN as string,\n    });\n  }\n\n  private signEmailVerifyToken({ user_id, verify }: { user_id: string; verify: UserVerifyStatus }) {\n    return signToken({\n      payload: { user_id, token_type: TokenType.EmailVerificationToken, verify },\n      options: { expiresIn: \"1d\" },\n      privateKey: process.env.JWT_SECRET_EMAIL_VERIFY_TOKEN as string,\n    });\n  }\n\n  private signAccessToken({ user_id, verify }: { user_id: string; verify: UserVerifyStatus }) {\n    return signToken({\n      payload: { user_id, token_type: TokenType.AccessToken, verify },\n      options: { expiresIn: \"15m\" },\n      privateKey: process.env.JWT_SECRET_ACCESS_TOKEN as string,\n    });\n  }\n\n  private signRefreshToken({ user_id, verify, exp }: { user_id: string; verify: UserVerifyStatus; exp?: number }) {\n    if (exp) {\n      return signToken({\n        payload: { user_id, token_type: TokenType.RefreshToken, verify, exp },\n        privateKey: process.env.JWT_SECRET_REFRESH_TOKEN as string,\n      });\n    }\n    else {\n      return signToken({\n        payload: { user_id, token_type: TokenType.RefreshToken, verify },\n        options: { expiresIn: \"7d\" },\n        privateKey: process.env.JWT_SECRET_REFRESH_TOKEN as string,\n      });\n    }\n  }\n\n  private signAccessAndRefreshTokens({ user_id, verify }: { user_id: string; verify: UserVerifyStatus }) {\n    return Promise.all([this.signAccessToken({ user_id, verify }), this.signRefreshToken({ user_id, verify })]);\n  }\n\n  private signForgotPasswordToken({ user_id, verify }: { user_id: string; verify: UserVerifyStatus }) {\n    return signToken({\n      payload: { user_id, token_type: TokenType.ForgotPasswordToken, verify },\n      options: { expiresIn: \"1d\" },\n      privateKey: process.env.JWT_SECRET_FORGOT_PASSWORD_TOKEN as string,\n    });\n  }\n\n  async login({ user_id, verify }: { user_id: string; verify: UserVerifyStatus }) {\n    const [access_token, refresh_token] = await this.signAccessAndRefreshTokens({\n      user_id,\n      verify,\n    });\n    const { exp, iat } = await this.decodeRefreshToken(refresh_token);\n\n    await databaseService.refreshTokens.insertOne(\n      new RefreshToken({\n        token: refresh_token,\n        user_id: new ObjectId(user_id),\n        exp,\n        iat,\n      }),\n    );\n    return { access_token, refresh_token };\n  }\n\n  async checkEmailExist(email: string) {\n    const user = await databaseService.users.findOne({ email });\n    return Boolean(user);\n  }\n\n  async register(payload: RegisterReqBody) {\n    const user_id = new ObjectId();\n    const email_verify_token = await this.signEmailVerifyToken({\n      user_id: user_id.toString(),\n      verify: UserVerifyStatus.Unverified,\n    });\n    await databaseService.users.insertOne(\n      new User({\n        ...payload,\n        _id: user_id,\n        fullname: payload.fullname,\n        username: `user${user_id.toString()}`,\n        email_verify_token,\n        password: hashPassword(payload.password),\n        role: Role.User,\n      }),\n    );\n    // create wallet for user\n    await walletService.createWallet(user_id.toString());\n    const [access_token, refresh_token] = await this.signAccessAndRefreshTokens({\n      user_id: user_id.toString(),\n      verify: UserVerifyStatus.Unverified,\n    });\n\n    const { exp, iat } = await this.decodeRefreshToken(refresh_token);\n\n    await databaseService.refreshTokens.insertOne(\n      new RefreshToken({\n        token: refresh_token,\n        user_id: new ObjectId(user_id),\n        exp,\n        iat,\n      }),\n    );\n    try {\n      const transporter = nodemailer.createTransport({\n        service: \"gmail\",\n        auth: {\n          user: process.env.EMAIL_APP,\n          pass: process.env.EMAIL_PASSWORD_APP,\n        },\n      });\n\n      const verifyURL = `${process.env.FRONTEND_URL}/auth/verify-email?email_verify_token=${email_verify_token}`; // Đường dẫn xác nhận email\n\n      const htmlContent = readEmailTemplate(\"verify-email.html\", {\n        fullname: payload.fullname,\n        verifyURL,\n      });\n\n      const mailOptions = {\n        from: `\"MeBike\" <${process.env.EMAIL_APP}>`,\n        to: payload.email,\n        subject: \"Xác nhận đăng ký tài khoản MeBike\",\n        html: htmlContent, // truyền nội dung html vào\n      };\n\n      transporter.sendMail(mailOptions);\n      console.log(\"Email verification sent successfully to:\", payload.email);\n    }\n    catch (error) {\n      console.error(\"Error sending email:\", error);\n    }\n    return { access_token, refresh_token };\n  }\n\n  async logout(refresh_token: string) {\n    await databaseService.refreshTokens.deleteOne({ token: refresh_token });\n    return { message: USERS_MESSAGES.LOGOUT_SUCCESS };\n  }\n\n  async forgotPassword({\n    user_id,\n    verify,\n    email,\n    fullname,\n  }: {\n    user_id: string;\n    verify: UserVerifyStatus;\n    email: string;\n    fullname: string;\n  }) {\n    const forgot_password_token = await this.signForgotPasswordToken({\n      user_id,\n      verify,\n    });\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n\n    await databaseService.users.updateOne(\n      { _id: new ObjectId(user_id) },\n      {\n        $set: {\n          forgot_password_token,\n          updated_at: localTime,\n        },\n      },\n    );\n\n    // mail\n    try {\n      const transporter = nodemailer.createTransport({\n        service: \"gmail\",\n        auth: {\n          user: process.env.EMAIL_APP,\n          pass: process.env.EMAIL_PASSWORD_APP,\n        },\n      });\n\n      // const resetURL = `${process.env.FRONTEND_URL}/reset-password?token=${forgot_password_token}`\n      const resetURL = `${process.env.FRONTEND_URL}/auth/reset-password?token=${forgot_password_token}`;\n\n      const htmlContent = readEmailTemplate(\"forgot-password.html\", {\n        fullname,\n        resetURL,\n      });\n\n      const mailOptions = {\n        from: `\"MeBike\" <${process.env.EMAIL_APP}>`,\n        to: email,\n        subject: \"Yêu cầu đặt lại mật khẩu cho tài khoản MeBike\",\n        html: htmlContent,\n      };\n\n      transporter.sendMail(mailOptions);\n      console.log(\"Forgot password email sent successfully to:\", email);\n    }\n    catch (error) {\n      console.error(\"Error sending forgot-password email:\", error);\n    }\n    return { message: USERS_MESSAGES.CHECK_EMAIL_TO_RESET_PASSWORD };\n  }\n\n  async resetPassword({ user_id, password }: { user_id: string; password: string }) {\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n\n    await databaseService.users.updateOne(\n      { _id: new ObjectId(user_id) },\n      {\n        $set: {\n          password: hashPassword(password),\n          forgot_password_token: \"\",\n          updated_at: localTime,\n        },\n      },\n    );\n    return { message: USERS_MESSAGES.RESET_PASSWORD_SUCCESS };\n  }\n\n  async verifyEmail(user_id: string) {\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n\n    await databaseService.users.updateOne({ _id: new ObjectId(user_id) }, {\n      $set: {\n        verify: UserVerifyStatus.Verified,\n        email_verify_token: \"\",\n        updated_at: localTime,\n      },\n    });\n    const [access_token, refresh_token] = await this.signAccessAndRefreshTokens({\n      user_id,\n      verify: UserVerifyStatus.Verified,\n    });\n    const { exp, iat } = await this.decodeRefreshToken(refresh_token);\n    await databaseService.refreshTokens.insertOne(\n      new RefreshToken({\n        token: refresh_token,\n        user_id: new ObjectId(user_id),\n        exp,\n        iat,\n      }),\n    );\n    return { access_token, refresh_token };\n  }\n\n  async resendEmailVerify(user_id: string) {\n    const user = await databaseService.users.findOne({ _id: new ObjectId(user_id) });\n    if (!user) {\n      throw new ErrorWithStatus({\n        message: USERS_MESSAGES.USER_NOT_FOUND,\n        status: HTTP_STATUS.NOT_FOUND,\n      });\n    }\n    const email_verify_token = await this.signEmailVerifyToken({\n      user_id,\n      verify: UserVerifyStatus.Unverified,\n    });\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n\n    await databaseService.users.updateOne({ _id: new ObjectId(user_id) }, {\n      $set: {\n        email_verify_token,\n        updated_at: localTime,\n      },\n    });\n    // mail\n    try {\n      const transporter = nodemailer.createTransport({\n        service: \"gmail\",\n        auth: {\n          user: process.env.EMAIL_APP,\n          pass: process.env.EMAIL_PASSWORD_APP,\n        },\n      });\n      const verifyURL = `${process.env.FRONTEND_URL}/auth/verify-email?email_verify_token=${email_verify_token}`;\n\n      // Sử dụng template 'resend-verify-email.html'\n      const htmlContent = readEmailTemplate(\"resend-verify-email.html\", {\n        fullname: user.fullname, // Truyền tên người dùng vào template\n        verifyURL,\n      });\n\n      const mailOptions = {\n        from: `\"MeBike\" <${process.env.EMAIL_APP}>`,\n        to: user.email, // Gửi đến email của người dùng\n        subject: \"Yêu cầu gửi lại email xác thực tài khoản MeBike\",\n        html: htmlContent,\n      };\n\n      transporter.sendMail(mailOptions);\n      console.log(\"Resend verification email sent successfully to:\", user.email);\n    }\n    catch (error) {\n      console.error(\"Error sending resend-verification email:\", error);\n    }\n    return { message: USERS_MESSAGES.RESEND_EMAIL_VERIFY_SUCCESS };\n  }\n\n  async changePassword(user_id: string, password: string) {\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n    await databaseService.users.updateOne({ _id: new ObjectId(user_id) }, {\n      $set: {\n        password: hashPassword(password),\n        forgot_password_token: \"\",\n        updated_at: localTime,\n      },\n    });\n    return {\n      message: USERS_MESSAGES.CHANGE_PASSWORD_SUCCESS,\n    };\n  }\n\n  async getMe(user_id: string) {\n    const user = await databaseService.users.findOne(\n      { _id: new ObjectId(user_id) },\n      {\n        projection: {\n          password: 0,\n          email_verify_token: 0,\n          forgot_password_token: 0,\n        },\n      },\n    );\n    return user;\n  }\n\n  async updateMe(user_id: string, payload: UpdateMeReqBody) {\n    const _payload = payload;\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n    try {\n      const user = await databaseService.users.findOneAndUpdate(\n        { _id: new ObjectId(user_id) },\n        {\n          $set: {\n            ..._payload,\n            updated_at: localTime,\n          },\n        },\n        {\n          returnDocument: \"after\",\n          projection: {\n            password: 0,\n            email_verify_token: 0,\n            forgot_password_token: 0,\n          },\n        },\n      );\n      return user;\n    }\n    catch (error) {\n      console.error(\"Error updating user info:\", error);\n      throw new ErrorWithStatus({\n        message: USERS_MESSAGES.UPDATE_ME_ERROR,\n        status: HTTP_STATUS.INTERNAL_SERVER_ERROR,\n      });\n    }\n  }\n\n  async refreshToken({\n    user_id,\n    verify,\n    refresh_token,\n    exp,\n  }: {\n    user_id: string;\n    verify: UserVerifyStatus;\n    refresh_token: string;\n    exp: number;\n  }) {\n    const [access_token, new_refresh_token] = await Promise.all([\n      this.signAccessToken({ user_id, verify }),\n      this.signRefreshToken({ user_id, verify, exp }),\n    ]);\n    const { iat } = await this.decodeRefreshToken(refresh_token);\n    await databaseService.refreshTokens.deleteOne({ token: refresh_token });\n    await databaseService.refreshTokens.insertOne(\n      new RefreshToken({ user_id: new ObjectId(user_id), token: new_refresh_token, exp, iat }),\n    );\n    return { access_token, refresh_token: new_refresh_token };\n  }\n}\n\nconst usersService = new UsersService();\nexport default usersService;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/services/wallets.services.ts:\n"
      },
      {
        "text": "import { Decimal128, Filter, ObjectId } from 'mongodb'\n\nimport type {\n  CreateWithdrawlReqBody,\n  DecreaseBalanceWalletReqBody,\n  GetAllRefundReqQuery,\n  GetTransactionReqQuery,\n  GetWithdrawReqQuery,\n  IncreaseBalanceWalletReqBody,\n  UpdateWithdrawStatusReqBody\n} from '~/models/requests/wallets.requests'\nimport type { TransactionType } from '~/models/schemas/transaction.schema'\nimport type { WalletType } from '~/models/schemas/wallet.schemas'\n\nimport {\n  RefundStatus,\n  Role,\n  TransactionStaus,\n  TransactionTypeEnum,\n  WalletStatus,\n  WithDrawalStatus\n} from '~/constants/enums'\nimport HTTP_STATUS from '~/constants/http-status'\nimport { USERS_MESSAGES, WALLETS_MESSAGE, WITHDRAWLS_MESSAGE } from '~/constants/messages'\nimport { ErrorWithStatus } from '~/models/errors'\nimport Wallet from '~/models/schemas/wallet.schemas'\n\nimport databaseService from './database.services'\nimport Transaction from '~/models/schemas/transaction.schema'\nimport { sendPaginatedResponse } from '~/utils/pagination.helper'\nimport { NextFunction, Response } from 'express'\nimport { CreateRefundReqBody } from '~/models/requests/refunds.request'\nimport Refund, { RefundType } from '~/models/schemas/refund.schema'\nimport Withdraw, { WithdrawType } from '~/models/schemas/withdraw-request'\n\nclass WalletService {\n  async createWallet(user_id: string) {\n    const findWallet = await databaseService.wallets.findOne({ user_id: new ObjectId(user_id) })\n\n    if (findWallet) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.USER_ALREADY_HAVE_WALLET.replace('%s', user_id),\n        status: HTTP_STATUS.BAD_REQUEST\n      })\n    }\n\n    const walletID = new ObjectId()\n    const currentDate = new Date()\n    const vietnamTimezoneOffset = 7 * 60\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n\n    const walletData: WalletType = {\n      _id: walletID,\n      user_id: new ObjectId(user_id),\n      balance: Decimal128.fromString('0'),\n      status: WalletStatus.Active,\n      created_at: localTime,\n      updated_at: localTime\n    }\n\n    const result = await databaseService.wallets.insertOne(new Wallet(walletData))\n\n    return result\n  }\n\n  async increaseBalance({ payload }: { payload: IncreaseBalanceWalletReqBody }) {\n    const findWallet = await databaseService.wallets.findOne({ user_id: new ObjectId(payload.user_id) })\n    if (!findWallet) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.USER_NOT_HAVE_WALLET.replace('%s', payload.user_id),\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    const amount = Number.parseFloat(payload.amount.toString())\n\n    if (amount <= 0) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.AMOUNT_NEGATIVE,\n        status: HTTP_STATUS.BAD_REQUEST\n      })\n    }\n\n    const wallet = await databaseService.wallets.findOneAndUpdate(\n      { _id: new ObjectId(findWallet._id) },\n      { $inc: { balance: Decimal128.fromString(payload.amount.toString()) } },\n      { returnDocument: 'after' }\n    )\n\n    const transactionID = new ObjectId()\n    const transactionData: TransactionType = {\n      _id: transactionID,\n      wallet_id: new ObjectId(findWallet._id),\n      amount: Decimal128.fromString(payload.amount.toString()),\n      fee: Decimal128.fromString(payload.fee.toString()),\n      description: payload.description,\n      transaction_hash: payload.transaction_hash || '',\n      type: TransactionTypeEnum.Deposit,\n      status: TransactionStaus.Success\n    }\n\n    await databaseService.transactions.insertOne(transactionData)\n    return wallet\n  }\n\n  async decreaseBalance({ payload }: { payload: DecreaseBalanceWalletReqBody }) {\n    const findWallet = await databaseService.wallets.findOne({ user_id: new ObjectId(payload.user_id) })\n    if (!findWallet) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.USER_NOT_HAVE_WALLET.replace('%s', payload.user_id),\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    const amount = Number.parseFloat(payload.amount.toString())\n    if (amount <= 0) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.AMOUNT_NEGATIVE,\n        status: HTTP_STATUS.BAD_REQUEST\n      })\n    }\n\n    const currentBalance = Number.parseFloat(findWallet.balance.toString())\n    if (currentBalance < amount) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.INSUFFICIENT_BALANCE.replace('%s', payload.user_id),\n        status: HTTP_STATUS.BAD_REQUEST\n      })\n    }\n\n    const wallet = await databaseService.wallets.findOneAndUpdate(\n      { _id: new ObjectId(findWallet._id) },\n      { $inc: { balance: Decimal128.fromString((-payload.amount).toString()) } },\n      { returnDocument: 'after' }\n    )\n\n    const transactionID = new ObjectId()\n    const transactionData: TransactionType = {\n      _id: transactionID,\n      wallet_id: new ObjectId(findWallet._id),\n      amount: Decimal128.fromString(payload.amount.toString()),\n      fee: Decimal128.fromString(payload.fee.toString()),\n      description: payload.description || 'Admin decrease balance',\n      transaction_hash: payload.transaction_hash || '',\n      type: TransactionTypeEnum.PAYMENT,\n      status: TransactionStaus.Success\n    }\n\n    await databaseService.transactions.insertOne(transactionData)\n    return wallet\n  }\n\n  async changeWalletStatus(id: string, newStatus: WalletStatus) {\n    const result = await databaseService.wallets.findOneAndUpdate(\n      { _id: new ObjectId(id) },\n      { $set: { status: newStatus } },\n      { returnDocument: 'after' }\n    )\n    return result\n  }\n\n  async getUserWallet(user_id: string) {\n    const result = await databaseService.wallets.findOne({ user_id: new ObjectId(user_id) })\n    if (!result) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.USER_NOT_HAVE_WALLET.replace('%s', user_id),\n        status: HTTP_STATUS.BAD_REQUEST\n      })\n    }\n\n    return result\n  }\n\n  // lịch sử cộng trừ tiền của ví\n  async getWalletHistory(res: Response, next: NextFunction, query: GetTransactionReqQuery, user_id: string) {\n    try {\n      const findWallet = await databaseService.wallets.findOne({ user_id: new ObjectId(user_id) })\n      if (!findWallet) {\n        throw new ErrorWithStatus({\n          message: WALLETS_MESSAGE.USER_NOT_HAVE_WALLET.replace('%s', user_id),\n          status: HTTP_STATUS.BAD_REQUEST\n        })\n      }\n\n      const filter: Filter<Transaction> = {\n        wallet_id: new ObjectId(findWallet._id)\n      }\n      if (query.type) {\n        filter.type = query.type\n      }\n\n      await sendPaginatedResponse(res, next, databaseService.transactions, query, filter)\n    } catch (error) {\n      next(error)\n    }\n  }\n\n  async getTransactionDetail(user_id: string, transaction_id: string) {\n    const findUser = await databaseService.users.findOne({ _id: new ObjectId(user_id) })\n    if (!findUser) {\n      throw new ErrorWithStatus({\n        message: USERS_MESSAGES.USER_NOT_FOUND,\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    const findWallet = await databaseService.wallets.findOne({ user_id: new ObjectId(user_id) })\n\n    if (!findWallet && findUser.role !== Role.Admin) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.USER_NOT_HAVE_WALLET.replace('%s', user_id),\n        status: HTTP_STATUS.BAD_REQUEST\n      })\n    }\n\n    let transaction = null\n\n    switch (findUser.role) {\n      case Role.Admin:\n        transaction = await databaseService.transactions.findOne({\n          _id: new ObjectId(transaction_id)\n        })\n        break\n\n      case Role.User:\n        transaction = await databaseService.transactions.findOne({\n          _id: new ObjectId(transaction_id),\n          wallet_id: findWallet?._id\n        })\n        break\n\n      default:\n        throw new ErrorWithStatus({\n          message: WALLETS_MESSAGE.FORBIDDEN,\n          status: HTTP_STATUS.FORBIDDEN\n        })\n    }\n\n    if (!transaction) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.TRANSACTION_NOT_FOUND,\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    return transaction\n  }\n\n  async refundTransaction(user_id: string, payload: CreateRefundReqBody) {\n    const findUser = await databaseService.users.findOne({ _id: new ObjectId(user_id) })\n    if (!findUser) {\n      throw new ErrorWithStatus({\n        message: USERS_MESSAGES.USER_NOT_FOUND,\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    const findTransaction = await databaseService.transactions.findOne({ _id: new ObjectId(payload.transaction_id) })\n    if (!findTransaction) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.TRANSACTION_NOT_FOUND,\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    const refundID = new ObjectId()\n    const refundData: RefundType = {\n      _id: refundID,\n      user_id: new ObjectId(user_id),\n      transaction_id: new ObjectId(findTransaction._id),\n      amount: Decimal128.fromString(payload.amount.toString()),\n      status: RefundStatus.Pending\n    }\n\n    const result = await databaseService.refunds.insertOne(new Refund(refundData))\n\n    return result\n  }\n\n  async updateStatusRefund(refund_id: string, newStatus: string) {\n    const allowedStatuses: Record<RefundStatus, RefundStatus[]> = {\n      [RefundStatus.Pending]: [RefundStatus.Approved, RefundStatus.Rejected],\n      [RefundStatus.Approved]: [RefundStatus.Completed],\n      [RefundStatus.Completed]: [],\n      [RefundStatus.Rejected]: []\n    }\n\n    const findRefund = await databaseService.refunds.findOne({ _id: new ObjectId(refund_id) })\n    if (!findRefund) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.REFUND_NOT_FOUND.replace('%s', refund_id),\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    if (!Object.values(RefundStatus).includes(newStatus as RefundStatus)) {\n      throw new ErrorWithStatus({\n        status: HTTP_STATUS.BAD_REQUEST,\n        message: WALLETS_MESSAGE.INVALID_NEW_STATUS\n      })\n    }\n\n    const currentStatus = findRefund.status as RefundStatus\n    const newStatusTyped = newStatus as RefundStatus\n\n    if (!allowedStatuses[currentStatus]?.includes(newStatusTyped)) {\n      throw new ErrorWithStatus({\n        status: HTTP_STATUS.BAD_REQUEST,\n        message: WALLETS_MESSAGE.INVALID_NEW_STATUS\n      })\n    }\n\n    const currentDate = new Date()\n    const vietnamTimezoneOffset = 7 * 60\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n\n    if (newStatusTyped === RefundStatus.Completed) {\n      const user_id = findRefund.user_id\n      const findWallet = await databaseService.wallets.findOne({ user_id: new ObjectId(user_id) })\n\n      const transactionID = new ObjectId()\n      const transactionData: TransactionType = {\n        _id: transactionID,\n        wallet_id: new ObjectId(findWallet?._id),\n        amount: findRefund.amount,\n        description: 'Refund',\n        fee: Decimal128.fromString('0'),\n        status: TransactionStaus.Success,\n        transaction_hash: '',\n        type: TransactionTypeEnum.Refund,\n        created_at: localTime\n      }\n\n      await databaseService.transactions.insertOne(new Transaction(transactionData))\n    }\n\n    const updateData: any = {\n      status: newStatusTyped,\n      updated_at: localTime\n    }\n\n    const result = await databaseService.refunds.findOneAndUpdate(\n      { _id: new ObjectId(refund_id) },\n      { $set: updateData },\n      { returnDocument: 'after' }\n    )\n\n    return result\n  }\n\n  async createWithdrawal(user_id: string, payload: CreateWithdrawlReqBody) {\n    const findUser = await databaseService.users.findOne({ _id: new ObjectId(user_id) })\n    if (!findUser) {\n      throw new ErrorWithStatus({\n        message: USERS_MESSAGES.USER_NOT_FOUND,\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    const findWallet = await databaseService.wallets.findOne({ user_id: new ObjectId(findUser._id) })\n    if (!findWallet) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.USER_NOT_HAVE_WALLET,\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    if (Decimal128.fromString(findWallet.balance.toString()) < Decimal128.fromString(payload.amount.toString())) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.INSUFFICIENT_BALANCE.replace('%s', user_id),\n        status: HTTP_STATUS.BAD_REQUEST\n      })\n    }\n\n    const currentDate = new Date()\n    const vietnamTimezoneOffset = 7 * 60\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n\n    const withdrawID = new ObjectId()\n    const withdrawData: WithdrawType = {\n      _id: withdrawID,\n      user_id: new ObjectId(user_id),\n      amount: Decimal128.fromString(payload.amount.toString()),\n      account: payload.account,\n      reason: '',\n      note: payload.note || '',\n      status: WithDrawalStatus.Pending,\n      created_at: localTime,\n      updated_at: localTime\n    }\n\n    const result = Promise.all([await databaseService.withdraws.insertOne(new Withdraw(withdrawData))])\n\n    return result\n  }\n\n  async updateWithDrawStatus(withdrawID: string, payload: UpdateWithdrawStatusReqBody) {\n    const allowedStatuses: Record<WithDrawalStatus, WithDrawalStatus[]> = {\n      [WithDrawalStatus.Pending]: [WithDrawalStatus.Approved, WithDrawalStatus.Rejected],\n      [WithDrawalStatus.Approved]: [WithDrawalStatus.Completed],\n      [WithDrawalStatus.Completed]: [],\n      [WithDrawalStatus.Rejected]: []\n    }\n\n    const findWithDraw = await databaseService.withdraws.findOne({ _id: new ObjectId(withdrawID) })\n    if (!findWithDraw) {\n      throw new ErrorWithStatus({\n        message: WITHDRAWLS_MESSAGE.WITHDRAWL_NOT_FOUND.replace('%s', withdrawID),\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    const user_id = findWithDraw.user_id\n    const findWallet = await databaseService.wallets.findOne({ user_id: new ObjectId(user_id) })\n    if (!findWallet) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.USER_NOT_HAVE_WALLET.replace('%s', user_id.toString()),\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    if (findWallet.status === WalletStatus.Frozen) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.WALLET_HAS_BEEN_FROZEN,\n        status: HTTP_STATUS.BAD_REQUEST\n      })\n    }\n\n    if (!Object.values(WithDrawalStatus).includes(payload.newStatus as WithDrawalStatus)) {\n      throw new ErrorWithStatus({\n        status: HTTP_STATUS.BAD_REQUEST,\n        message: WALLETS_MESSAGE.INVALID_NEW_STATUS\n      })\n    }\n\n    const currentStatus = findWithDraw.status as WithDrawalStatus\n    const newStatusTyped = payload.newStatus as WithDrawalStatus\n\n    if (!allowedStatuses[currentStatus]?.includes(newStatusTyped)) {\n      throw new ErrorWithStatus({\n        status: HTTP_STATUS.BAD_REQUEST,\n        message: WALLETS_MESSAGE.INVALID_NEW_STATUS\n      })\n    }\n\n    if (newStatusTyped === WithDrawalStatus.Rejected) {\n      if (!payload.reason || payload.reason.trim() === '') {\n        throw new ErrorWithStatus({\n          message: WITHDRAWLS_MESSAGE.REASON_IS_REQUIRED,\n          status: HTTP_STATUS.BAD_REQUEST\n        })\n      }\n    }\n\n    if (newStatusTyped === WithDrawalStatus.Completed) {\n      const currentDate = new Date()\n      const vietnamTimezoneOffset = 7 * 60\n      const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n\n      await databaseService.wallets.findOneAndUpdate(\n        { _id: findWallet?._id },\n        { $inc: { balance: Decimal128.fromString((-findWithDraw.amount).toString()) } },\n        { returnDocument: 'after' }\n      )\n\n      const transactionID = new ObjectId()\n      const transactionData: TransactionType = {\n        _id: transactionID,\n        wallet_id: findWallet?._id,\n        amount: findWithDraw.amount,\n        description: 'Withdrawal',\n        fee: Decimal128.fromString('0'),\n        status: TransactionStaus.Success,\n        transaction_hash: '',\n        type: TransactionTypeEnum.WithDrawal,\n        created_at: localTime\n      }\n\n      await databaseService.transactions.insertOne(new Transaction(transactionData))\n    }\n\n    const currentDate = new Date()\n    const vietnamTimezoneOffset = 7 * 60\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000)\n\n    const updateData: any = {\n      status: newStatusTyped,\n      reason: payload.reason || '',\n      updated_at: localTime\n    }\n\n    const result = await databaseService.withdraws.findOneAndUpdate(\n      { _id: new ObjectId(withdrawID) },\n      { $set: updateData },\n      { returnDocument: 'after' }\n    )\n\n    return result\n  }\n\n  async getWithdrawRequestDetail(withdrawID: string, role: Role, user_id: string) {\n    const result = await databaseService.withdraws.findOne({ _id: new ObjectId(withdrawID) })\n    if (role !== Role.Admin) {\n      if (result?.user_id.toString() !== user_id) {\n        throw new ErrorWithStatus({\n          message: WALLETS_MESSAGE.FORBIDDEN_WITHDRAW_ACCESS,\n          status: HTTP_STATUS.FORBIDDEN\n        })\n      }\n    }\n\n    return result\n  }\n\n  async getAllWithDrawRequest(res: Response, next: NextFunction, query: GetWithdrawReqQuery) {\n    const { status } = query\n\n    const filter: any = {}\n\n    if (status) {\n      filter.status = status\n    }\n\n    await sendPaginatedResponse(res, next, databaseService.withdraws, query, filter)\n  }\n\n  async getAllUserWithDrawRequest(res: Response, next: NextFunction, query: GetWithdrawReqQuery, user_id: string) {\n    const { status } = query\n\n    const filter: any = {}\n\n    if (status) {\n      filter.status = status\n    }\n    filter.user_id = new ObjectId(user_id)\n\n    await sendPaginatedResponse(res, next, databaseService.withdraws, query, filter)\n  }\n\n  async getAllRefund(res: Response, next: NextFunction, query: GetAllRefundReqQuery) {\n    const { status } = query\n\n    const filter: any = {}\n\n    if (status) {\n      filter.status = status\n    }\n\n    await sendPaginatedResponse(res, next, databaseService.refunds, query, filter)\n  }\n\n  async getAllUserRefund(res: Response, next: NextFunction, query: GetAllRefundReqQuery, user_id: string) {\n    const { status } = query\n\n    const filter: any = {}\n\n    if (status) {\n      filter.status = status\n    }\n    filter.user_id = new ObjectId(user_id)\n\n    await sendPaginatedResponse(res, next, databaseService.refunds, query, filter)\n  }\n\n  async getRefundDetail(refund_id: string, role: Role, user_id: string) {\n    const findRefund = await databaseService.refunds.findOne({ _id: new ObjectId(refund_id) })\n    if (!findRefund) {\n      throw new ErrorWithStatus({\n        message: WALLETS_MESSAGE.REFUND_NOT_FOUND.replace('%s', refund_id),\n        status: HTTP_STATUS.NOT_FOUND\n      })\n    }\n\n    if (role !== Role.Admin) {\n      if (user_id !== findRefund.user_id!.toString()) {\n        throw new ErrorWithStatus({\n          message: WALLETS_MESSAGE.FORBIDDEN_ACCESS,\n          status: HTTP_STATUS.FORBIDDEN\n        })\n      }\n    }\n\n    return findRefund\n  }\n}\n\nconst walletService = new WalletService()\nexport default walletService"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/type.d.ts:\n"
      },
      {
        "text": "import type { TokenPayLoad } from \"./models/requests/users.requests\";\nimport type Bike from \"./models/schemas/bike.schema\";\nimport type Rental from \"./models/schemas/rental.schema\";\nimport type Station from \"./models/schemas/station.schema\";\nimport type User from \"./models/schemas/user.schema\";\n\ndeclare module \"express\" {\n  interface Request {\n    // TypeScript đã tự hiểu 'Request' ở đây là của Express nên không cần import\n    user?: User;\n    decoded_authorization?: TokenPayLoad;\n    decoded_refresh_token?: TokenPayLoad;\n    decoded_email_verify_token?: TokenPayLoad;\n    decoded_forgot_password_token?: TokenPayLoad;\n    bike?: Bike;\n    station?: Station;\n    rental?: Rental;\n  };\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/utils/crypto.ts:\n"
      },
      {
        "text": "import bcrypt from \"bcryptjs\";\nimport { config } from \"dotenv\";\n// import { createHash } from \"node:crypto\";\n\nconfig();\n\n// function sha256(content: string) {\n//   return createHash(\"sha256\").update(content).digest(\"hex\");\n// }\n\nexport function hashPassword(password: string) {\n  // return bcrypt.hashSync(password, 10);\n  // Nếu password đầu vào là undefined hoặc không phải string, hàm hashSync có thể báo lỗi\n  if (!password || typeof password !== \"string\") {\n    // xử lý lỗi ở đây thay vì trả về undefined\n    throw new Error(\"Invalid password to hash\");\n  }\n  const salt = bcrypt.genSaltSync(10); // Tạo salt\n  const hash = bcrypt.hashSync(password, salt); // Hash mật khẩu\n  return hash;\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/utils/date.ts:\n"
      },
      {
        "text": "export const getLocalTime = () => {\n    const currentDate = new Date();\n    const vietnamTimezoneOffset = 7 * 60;\n    const localTime = new Date(currentDate.getTime() + vietnamTimezoneOffset * 60 * 1000);\n    return localTime\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/utils/email-templates.ts:\n"
      },
      {
        "text": "import fs from \"node:fs\";\nimport path from \"node:path\";\n\ntype TemplateData = {\n  [key: string]: string;\n};\n\nconst MBIKE_PRIMARY_COLOR = \"#007bff\";\n\nconst FALLBACK_TEMPLATES: Record<string, (data: TemplateData) => string> = {\n  \"verify-email.html\": data => `\n    <!DOCTYPE html>\n    <html lang=\"vi\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Xác nhận đăng ký - MeBike</title>\n    </head>\n    <body style=\"margin: 0; padding: 20px; font-family: Arial, sans-serif; background-color: #f5f5f5;\">\n      <div style=\"max-width: 500px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px;\">\n        <h1 style=\"color: ${MBIKE_PRIMARY_COLOR}; text-align: center;\">MeBike</h1>\n        <h2>Xin chào ${data.fullname || \"bạn\"},</h2>\n        <p>Cảm ơn bạn đã đăng ký tài khoản MeBike. Vui lòng nhấn vào nút bên dưới để xác nhận email của bạn:</p>\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <a href=\"${data.verifyURL || \"#\"}\" style=\"background: ${MBIKE_PRIMARY_COLOR}; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;\">Xác nhận đăng ký</a>\n        </div>\n        <p style=\"color: #666; font-size: 14px;\">Trân trọng,<br>Đội ngũ MeBike</p>\n      </div>\n    </body>\n    </html>\n  `,\n\n  \"forgot-password.html\": data => `\n    <!DOCTYPE html>\n    <html lang=\"vi\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Quên mật khẩu - MeBike</title>\n    </head>\n    <body style=\"margin: 0; padding: 20px; font-family: Arial, sans-serif; background-color: #f5f5f5;\">\n      <div style=\"max-width: 500px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px;\">\n        <h1 style=\"color: ${MBIKE_PRIMARY_COLOR}; text-align: center;\">MeBike</h1>\n        <h2>Xin chào ${data.fullname || \"bạn\"},</h2>\n        <p>Bạn đã yêu cầu đặt lại mật khẩu. Nhấn vào nút bên dưới để tiếp tục:</p>\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <a href=\"${data.resetURL || \"#\"}\" style=\"background: #dc3545; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;\">Đặt lại mật khẩu</a>\n        </div>\n        <p style=\"color: #666; font-size: 14px;\">Trân trọng,<br>Đội ngũ MeBike</p>\n      </div>\n    </body>\n    </html>\n  `,\n\n  \"google-register-success.html\": data => `\n    <!DOCTYPE html>\n    <html lang=\"vi\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Chào mừng bạn đến với MeBike</title>\n    </head>\n    <body>\n      <p>Xin chào ${data.fullname || \"bạn\"},</p>\n      <p>Cảm ơn bạn đã đăng ký tài khoản MeBike qua Google.</p>\n      <p>Đây là thông tin đăng nhập của bạn:</p>\n      <ul>\n        <li><strong>Email:</strong> ${data.email || \"\"}</li>\n        <li><strong>Mật khẩu tạm thời:</strong> ${data.password || \"\"}</li>\n      </ul>\n      <p>Vui lòng đổi mật khẩu sau khi đăng nhập. Một email xác thực cũng đã được gửi đến bạn.</p>\n      <a href=\"${data.loginURL || \"#\"}\">Đăng nhập ngay</a>\n    </body>\n    </html>\n  `,\n\n  \"resend-verify-email.html\": data => `\n    <!DOCTYPE html>\n    <html lang=\"vi\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Gửi lại email xác thực - MeBike</title>\n    </head>\n    <body style=\"margin: 0; padding: 20px; font-family: Arial, sans-serif; background-color: #f5f5f5;\">\n      <div style=\"max-width: 500px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px;\">\n        <h1 style=\"color: ${MBIKE_PRIMARY_COLOR}; text-align: center;\">MeBike</h1>\n        <h2>Xin chào ${data.fullname || \"bạn\"},</h2>\n        <p>Bạn đã yêu cầu gửi lại email xác thực. Vui lòng nhấn vào nút bên dưới để hoàn tất việc xác thực tài khoản:</p>\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <a href=\"${data.verifyURL || \"#\"}\" style=\"background: ${MBIKE_PRIMARY_COLOR}; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;\">Xác thực tài khoản</a>\n        </div>\n        <p style=\"color: #666; font-size: 14px;\">Trân trọng,<br>Đội ngũ MeBike</p>\n      </div>\n    </body>\n    </html>\n  `,\n};\n\nexport function readEmailTemplate(templateName: string, data: TemplateData): string {\n  try {\n    const templatePath = path.join(__dirname, \"templates\", templateName);\n    let htmlContent = fs.readFileSync(templatePath, \"utf-8\");\n    Object.keys(data).forEach((key) => {\n      const regex = new RegExp(`{{${key}}}`, \"g\");\n      htmlContent = htmlContent.replace(regex, data[key]);\n    });\n    return htmlContent;\n  }\n  catch (error) {\n    console.error(`Error reading email template ${templateName}:`, error);\n    const fallbackTemplate = FALLBACK_TEMPLATES[templateName];\n    if (fallbackTemplate) {\n      return fallbackTemplate(data);\n    }\n    // fallback chung nếu không có template cụ thể\n    return `Xin chào ${data.fullname || \"bạn\"}, cảm ơn bạn đã sử dụng dịch vụ của MeBike.`;\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/utils/handler.ts:\n"
      },
      {
        "text": "import type { NextFunction, Request, RequestHandler, Response } from \"express\";\n\nexport function wrapAsync<P>(func: RequestHandler<P>) {\n  return async (req: Request<P>, res: Response, next: NextFunction) => {\n    try {\n      await func(req, res, next);\n    }\n    catch (error) {\n      next(error);\n    }\n  };\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/utils/jwt.ts:\n"
      },
      {
        "text": "import type { Buffer } from \"node:buffer\";\n\nimport jwt from \"jsonwebtoken\";\n\nimport type { TokenPayLoad } from \"~/models/requests/users.requests\";\n\nexport function signToken({\n  payload,\n  privateKey,\n  options = { algorithm: \"HS256\" },\n}: {\n  payload: string | object | Buffer;\n  privateKey: string;\n  options?: jwt.SignOptions;\n}) {\n  return new Promise<string>((resolve, reject) => {\n    jwt.sign(payload, privateKey, options, (err, token) => {\n      if (err)\n        throw reject(err);\n      resolve(token as string);\n    });\n  });\n}\n\nexport function verifyToken({ token, secretOrPublicKey }: { token: string; secretOrPublicKey: string }) {\n  return new Promise<TokenPayLoad>((resolve, reject) => {\n    jwt.verify(token, secretOrPublicKey, (error, decoded) => {\n      if (error)\n        throw reject(error);\n      resolve(decoded as TokenPayLoad);\n    });\n  });\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/utils/pagination.helper.ts:\n"
      },
      {
        "text": "import type { NextFunction, Request, Response } from \"express\";\nimport type { Collection, Document, Filter, Document as Projection } from \"mongodb\";\nimport { normalizeDecimal } from \"./string\";\n\nexport type IResponseSearch<T> = {\n  data: T[];\n  pagination: {\n    limit: number;\n    currentPage: number;\n    totalPages: number;\n    totalRecords: number;\n  };\n};\n\nexport async function sendPaginatedResponse<T extends Document>(res: Response, next: NextFunction, collection: Collection<T>, query: Request[\"query\"], filter: Filter<T> = {}, projection: Projection = {}) {\n  try {\n    const page = Number.parseInt(query.page as string) || 1;\n    const limit = Number.parseInt(query.limit as string) || 10;\n    const skip = (page - 1) * limit;\n\n    const [totalRecords, data] = await Promise.all([\n      collection.countDocuments(filter),\n      collection.find(filter, { projection }).sort({ created_at: -1 }).skip(skip).limit(limit).toArray(),\n    ]);\n\n    const totalPages = Math.ceil(totalRecords / limit);\n    const normalized = data.map(normalizeDecimal)\n\n    const responseBody: IResponseSearch<any> = {\n      data: normalized,\n      pagination: {\n        limit,\n        currentPage: page,\n        totalPages,\n        totalRecords,\n      },\n    };\n\n    return res.status(200).json(responseBody);\n  }\n  catch (error) {\n    next(error);\n  }\n}\n\nexport function sendPaginatedResponseFromRedis<T>(res: Response, next: NextFunction, data: T[], query: Record<string, any>) {\n  try {\n    const page = Number.parseInt(query.page as string) || 1;\n    const limit = Number.parseInt(query.limit as string) || 10;\n    const start = (page - 1) * limit;\n\n    const paginatedData = data.slice(start, start + limit);\n\n    const responseBody: IResponseSearch<any> = {\n      data: paginatedData,\n      pagination: {\n        limit,\n        currentPage: page,\n        totalPages: Math.ceil(data.length / limit),\n        totalRecords: data.length,\n      },\n    };\n\n    return res.status(200).json(responseBody);\n  }\n  catch (error) {\n    next(error);\n  }\n}\n\nexport async function sendPaginatedAggregationResponse<T extends Document>(\n  res: Response,\n  next: NextFunction,\n  collection: Collection<T>,\n  query: Request['query'],\n  pipeline: Document[]\n) {\n  try {\n    const page = Number.parseInt(query.page as string) || 1\n    const limit = Number.parseInt(query.limit as string) || 10\n    const skip = (page - 1) * limit\n\n    const [totalRecordsResult, data] = await Promise.all([\n      // Pipeline to count the total matching documents\n      collection.aggregate([...pipeline, { $count: 'total' }]).toArray(),\n      // Pipeline to get the actual data for the current page\n      collection.aggregate([...pipeline, { $skip: skip }, { $limit: limit }]).toArray()\n    ])\n\n    const totalRecords = totalRecordsResult.length > 0 ? totalRecordsResult[0].total : 0\n    const totalPages = Math.ceil(totalRecords / limit)\n\n    const normalized = data.map(normalizeDecimal)\n\n    const responseBody: IResponseSearch<any> = {\n      data: normalized,\n      pagination: {\n        limit,\n        currentPage: page,\n        totalPages,\n        totalRecords\n      }\n    }\n\n    return res.status(200).json(responseBody)\n  } catch (error) {\n    next(error)\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/utils/string.ts:\n"
      },
      {
        "text": "import { ObjectId } from \"mongodb\";\n\nexport function toObjectId(id: string | ObjectId) {\n  return typeof id === \"string\" ? new ObjectId(id) : id;\n}\n\nexport function normalizeDecimal(obj: any) {\n  if (!obj || typeof obj !== \"object\") return obj;\n\n  for (const key of Object.keys(obj)) {\n    const value = obj[key];\n    if (value && value._bsontype === \"Decimal128\") {\n      obj[key] = parseFloat(value.toString());\n    } else if (typeof value === \"object\") {\n      normalizeDecimal(value);\n    }\n  }\n  return obj;\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/backend/src/utils/validation.ts:\n"
      },
      {
        "text": "import type { NextFunction, Request, Response } from \"express\";\nimport type { ValidationChain } from \"express-validator\";\nimport type { RunnableValidationChains } from \"express-validator/lib//middlewares/schema\";\n\nimport { validationResult } from \"express-validator\";\n\nimport { EntityError, ErrorWithStatus } from \"~/models/errors\";\n\nexport function validate(validation: RunnableValidationChains<ValidationChain>) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    await validation.run(req);\n    const errors = validationResult(req);\n    if (errors.isEmpty()) {\n      return next();\n    }\n    const errorObjects = errors.mapped();\n    const entityError = new EntityError({ errors: {} });\n    for (const key in errorObjects) {\n      const { msg } = errorObjects[key];\n      if (msg instanceof ErrorWithStatus && msg.status !== 422) {\n        return next(msg);\n      }\n      entityError.errors[key] = { msg: msg instanceof Error ? msg.message : msg };\n    }\n    next(entityError);\n  };\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/(auth)/auth/forgot-password/page.tsx:\n"
      },
      {
        "text": "\"use client\";\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@components/ui/button\";\nimport { Input } from \"@components/ui/input\";\nimport { Label } from \"@components/ui/label\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@components/ui/card\";\nimport { Separator } from \"@components/ui/separator\";\nimport { Bike, Mail, ArrowLeft, Send } from \"lucide-react\";\nimport React from \"react\";\nimport { useAuthActions } from \"@hooks/useAuthAction\";\n\nconst ForgotPassword = () => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const { forgotPassword, isLoadingForgottingPassword } = useAuthActions();\n  const router = useRouter();\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n        forgotPassword({ email });\n      setIsSubmitted(true);\n    } catch (error) {\n      console.error('Forgot password error:', error);\n    }\n  };\n\n  const handleBackToLogin = () => {\n    router.push(\"/auth/login\");\n  };\n\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-metro-primary via-metro-secondary to-metro-accent flex items-center justify-center p-4 \n        bg-[linear-gradient(135deg,hsl(214_100%_40%)_0%,hsl(215_16%_47%)_100%)]\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center animate-fade-in mb-6\">\n            <div className=\"flex items-center justify-center\">\n              <div className=\"p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 shadow-floating\">\n                <Bike className=\"h-12 w-12 text-white\" />\n              </div>\n            </div>\n            <h1 className=\"text-4xl font-bold text-white mb-3 tracking-tight\">\n              MetroBike\n            </h1>\n          </div>\n          <Card className=\"shadow-floating border-0 bg-white/95 backdrop-blur-xl relative z-10 overflow-hidden animate-scale-in\">\n            <div className=\"h-1 bg-gradient-metro rounded-t-lg\"></div>\n            <CardHeader className=\"space-y-2 text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n                <Send className=\"h-8 w-8 text-green-600\" />\n              </div>\n              <CardTitle className=\"text-3xl font-bold text-foreground tracking-tight\">\n                Email đã được gửi!\n              </CardTitle>\n              <CardDescription className=\"text-muted-foreground\">\n                Chúng tôi đã gửi hướng dẫn đặt lại mật khẩu đến email của bạn.\n                Vui lòng kiểm tra hộp thư (và cả thư mục spam).\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <Button\n                  onClick={handleBackToLogin}\n                  className=\"w-full h-12 hover:bg-primary/90 shadow-lg hover:shadow-xl transition-all duration-300 text-primary-foreground font-semibold\n                    bg-[hsl(214,100%,40%)] p-3 shadow-[var(--shadow-metro)] text-white\"\n                >\n                  <ArrowLeft className=\"mr-2 h-5 w-5\" />\n                  Quay lại đăng nhập\n                </Button>\n              </div>\n              \n              <Separator className=\"my-6\" />\n              \n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Không nhận được email?\n                </p>\n                <Button\n                  onClick={() => setIsSubmitted(false)}\n                  variant=\"outline\"\n                  className=\"text-sm text-metro-primary hover:text-metro-secondary transition-colors\"\n                >\n                  Gửi lại email\n                </Button>\n              </div>\n\n              <div className=\"text-center pt-4\">\n                <Button\n                  className=\"text-sm text-muted-foreground hover:text-foreground transition-colors text-white bg-[hsl(214,100%,40%)]\"\n                  onClick={() => router.push(\"/\")}\n                >\n                  ← Về trang chủ\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-metro-primary via-metro-secondary to-metro-accent flex items-center justify-center p-4 \n      bg-[linear-gradient(135deg,hsl(214_100%_40%)_0%,hsl(215_16%_47%)_100%)]\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center animate-fade-in mb-6\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 shadow-floating\">\n              <Bike className=\"h-12 w-12 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mb-3 tracking-tight\">\n            MetroBike\n          </h1>\n        </div>\n        <Card className=\"shadow-floating border-0 bg-white/95 backdrop-blur-xl relative z-10 overflow-hidden animate-scale-in\">\n          <div className=\"h-1 bg-gradient-metro rounded-t-lg\"></div>\n          <CardHeader className=\"space-y-2 text-center\">\n            <CardTitle className=\"text-3xl font-bold text-foreground tracking-tight\">\n              Quên mật khẩu\n            </CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Nhập email của bạn để nhận hướng dẫn đặt lại mật khẩu\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n                  Email\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-4 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"example@email.com\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"pl-10 h-12 w-full rounded-lg border border-gray-300 bg-white shadow-sm focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 \n                      transition-all duration-200\"\n                    required\n                  />\n                </div>\n              </div>\n                \n              <Button\n                type=\"submit\"\n                disabled={isLoadingForgottingPassword}\n                className=\"w-full h-12 hover:bg-primary/90 shadow-lg hover:shadow-xl transition-all duration-300 text-primary-foreground font-semibold\n                  bg-[hsl(214,100%,40%)] p-3 shadow-[var(--shadow-metro)] text-white\"\n              >\n                {isLoadingForgottingPassword ? (\n                  <>\n                    <div className=\"mr-2 h-5 w-5 animate-spin rounded-full border-2 border-white border-t-transparent\"></div>\n                    Đang gửi...\n                  </>\n                ) : (\n                  <>\n                    <Send className=\"mr-2 h-5 w-5\" />\n                    Gửi email đặt lại mật khẩu\n                  </>\n                )}\n              </Button>\n            </form>\n            \n            <Separator className=\"my-6\" />\n            \n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Nhớ mật khẩu rồi?{\" \"}\n                <Button\n                  onClick={handleBackToLogin}\n                  className=\"text-sm text-metro-primary hover:text-metro-secondary transition-colors text-white bg-[hsl(214,100%,40%)]\"\n                >\n                  Đăng nhập ngay\n                </Button>\n              </p>\n            </div>\n\n            <div className=\"text-center pt-4\">\n              <Button\n                className=\"text-sm text-muted-foreground hover:text-foreground transition-colors text-white bg-[hsl(214,100%,40%)]\"\n                onClick={() => router.push(\"/\")}\n              >\n                ← Về trang chủ\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPassword;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/(auth)/auth/login/page.tsx:\n"
      },
      {
        "text": "\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@components/ui/button\";\nimport { Input } from \"@components/ui/input\";\nimport { Label } from \"@components/ui/label\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@components/ui/card\";\nimport { Separator } from \"@components/ui/separator\";\nimport { Bike, Mail, Lock, Eye, EyeOff, Loader2 } from \"lucide-react\";\nimport React from \"react\";\nimport { useAuth } from \"@providers/auth-providers\";\nimport { isBuffer } from \"util\";\n\nconst Login = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const { user, logIn, isLoggingIn, isLoading } = useAuth();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isNavigating, setIsNavigating] = useState(false);\n  const router = useRouter();\n\n  useEffect(() => {\n    if (user && isNavigating) {\n      const timer = setTimeout(() => {\n        if (user?.role === \"ADMIN\"){\n          router.push(\"/admin\");\n        } else if (user?.role === \"STAFF\") {\n          router.push(\"/staff\");\n        } else {\n          router.push(\"/user\");\n        }\n        setIsNavigating(false);\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [user, isNavigating, router]);\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (isLoggingIn || isLoading || isNavigating) return;\n    setIsNavigating(true);\n    logIn({ email, password });\n  };  \n\n  return (\n    <div\n      className=\"min-h-screen bg-gradient-to-br from-metro-primary via-metro-secondary to-metro-accent flex items-center justify-center p-4 \n    bg-[linear-gradient(135deg,hsl(214_100%_40%)_0%,hsl(215_16%_47%)_100%)] \"\n    >\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center animate-fade-in mb-6\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 shadow-floating\">\n              <Bike className=\"h-12 w-12 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mb-3 tracking-tight\">\n            MetroBike\n          </h1>\n        </div>\n        <Card className=\"shadow-floating border-0 bg-white/95 backdrop-blur-xl relative z-10 overflow-hidden animate-scale-in\">\n          <div className=\"h-1 bg-gradient-metro rounded-t-lg\"></div>\n          <CardHeader className=\"space-y-2 text-center \">\n            <CardTitle className=\"text-3xl font-bold text-foreground tracking-tight\">\n              Đăng nhập\n            </CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Nhập thông tin để truy cập tài khoản của bạn\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              {/* Email */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n                  Email\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-4 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"example@email.com\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    disabled={isLoggingIn || isLoading}\n                    className=\"pl-10 h-12\"\n                    required\n                  />\n                </div>\n              </div>\n\n              {/* Password */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                  Mật khẩu\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-4 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Nhập mật khẩu\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    disabled={isLoggingIn || isLoading}\n                    className=\"pl-10 h-12\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    disabled={isLoggingIn || isLoading}\n                    className=\"absolute right-3 top-3\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-5 w-4\" />\n                    ) : (\n                      <Eye className=\"h-5 w-4\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n\n              {/* Forgot password */}\n              <div className=\"text-right\">\n                <Button\n                  type=\"button\"\n                  disabled={isLoggingIn || isLoading}\n                  variant=\"link\"\n                  onClick={() => router.push(\"/auth/forgot-password\")}\n                >\n                  Quên mật khẩu?\n                </Button>\n              </div>\n\n              {/* Login button */}\n              <Button\n                type=\"submit\"\n                disabled={isLoggingIn || isLoading || isNavigating}\n                className=\"w-full h-12\"\n              >\n                {isLoggingIn || isLoading || isNavigating ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                    Đang đăng nhập...\n                  </>\n                ) : (\n                  <>\n                    <Bike className=\"mr-2 h-5 w-5\" />\n                    Đăng nhập\n                  </>\n                )}\n              </Button>\n            </form>\n\n            <Separator className=\"my-6\" />\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Chưa có tài khoản?{\" \"}\n                <Button\n                  disabled={isLoggingIn || isLoading}\n                  variant=\"link\"\n                  onClick={() => router.push(\"/auth/register\")}\n                >\n                  Đăng ký ngay\n                </Button>\n              </p>\n            </div>\n\n            <div className=\"text-center pt-4\">\n              <Button\n                disabled={isLoggingIn || isLoading}\n                variant=\"link\"\n                onClick={() => router.push(\"/\")}\n              >\n                ← Về trang chủ\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/(auth)/auth/register/page.tsx:\n"
      },
      {
        "text": "\"use client\";\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RegisterSchemaFormData, registerSchema } from \"@/schemas/authSchema\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Bike, Mail, Lock, Eye, EyeOff, User } from \"lucide-react\";\nimport { useAuthActions } from \"@/hooks/useAuthAction\";\nimport { toast } from \"sonner\";\nimport { useAuth } from \"@/providers/auth-providers\";\nconst RegisterPage = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [agreeTerms, setAgreeTerms] = useState(false);\n  const router = useRouter();\n  const { user } = useAuth();\n  const { register: registerUser } = useAuthActions();\n  const {\n    register,\n    handleSubmit, \n    formState: { errors, isSubmitting },\n  } = useForm<RegisterSchemaFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      full_name: \"\",\n      email: \"\",\n      password: \"\",\n      phone_number: \"\",\n      confirm_password: \"\",\n    },\n  });\n\n  const handleRegister = async (data: RegisterSchemaFormData) => {\n    if (!agreeTerms) {\n      toast.error(\"Vui lòng đồng ý với điều khoản sử dụng!\");\n      return;\n    }\n    const registerData = { ...data };\n    if (!registerData.phone_number || registerData.phone_number.trim() === '') {\n      delete registerData.phone_number;\n    }\n    registerUser(registerData);\n    console.log(user);\n\n  };\n\n  return (\n    <div\n      className=\"min-h-screen bg-gradient-to-br from-metro-primary via-metro-secondary to-metro-accent flex items-center justify-center p-4 \n    bg-[linear-gradient(135deg,hsl(214_100%_40%)_0%,hsl(215_16%_47%)_100%)] \n    overflow-hidden\"\n    >\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center animate-fade-in mb-4\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 shadow-floating\">\n              <Bike className=\"h-12 w-12 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mt-3 tracking-tight\">\n            MetroBike\n          </h1>\n        </div>\n      \n        <Card className=\"shadow-floating border-0 bg-white/95 backdrop-blur-xl relative z-10 overflow-hidden animate-scale-in max-h-[90vh] flex flex-col\">\n          <div className=\"h-1 bg-gradient-metro rounded-t-lg\"></div>\n          <CardHeader className=\"space-y-2 text-center \">\n            <CardTitle className=\"text-3xl font-bold text-foreground tracking-tight\">\n              Đăng ký\n            </CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Nhập thông tin để tạo tài khoản mới\n            </CardDescription>\n          </CardHeader>\n        \n          <CardContent className=\"space-y-4 overflow-y-auto\">\n            \n            <form onSubmit={handleSubmit(handleRegister)} className=\"space-y-4\">\n            \n              {/* Họ và tên */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"full_name\" className=\"text-sm font-medium\">\n                  Họ và tên\n                </Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"full_name\"\n                    {...register(\"full_name\")}\n                    type=\"text\"\n                    placeholder=\"Nguyễn Văn A\"\n                    className=\"pl-10 h-12 w-full rounded-lg border border-gray-300 bg-white shadow-sm focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\n                  />\n                  {errors.full_name && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.full_name.message}</p>\n                  )}\n                </div>\n              </div>\n              {/* Email */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n                  Email\n                </Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"email\"\n                    {...register(\"email\")}\n                    type=\"email\"\n                    placeholder=\"example@email.com\"\n                    className=\"pl-10 h-12 w-full rounded-lg border border-gray-300 bg-white shadow-sm focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\n                  />\n                  {errors.email && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.email.message}</p>\n                  )}\n                </div>\n              </div>\n\n              {/* Số điện thoại */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone_number\" className=\"text-sm font-medium\">\n                  Số điện thoại (tùy chọn)\n                </Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"phone_number\"\n                    {...register(\"phone_number\")}\n                    type=\"tel\"\n                    placeholder=\"0912345678\"\n                    className=\"pl-10 h-12 w-full rounded-lg border border-gray-300 bg-white shadow-sm focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\n                  />\n                  {errors.phone_number && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.phone_number.message}</p>\n                  )}\n                </div>\n              </div>\n\n              {/* Mật khẩu */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                  Mật khẩu\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"password\"\n                    {...register(\"password\")}\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Tối thiếu 8 ký tự\"\n                    className=\"pl-10 pr-10 h-12 w-full rounded-lg border border-gray-300 bg-white shadow-sm focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-5 w-4\" />\n                    ) : (\n                      <Eye className=\"h-5 w-4\" />\n                    )}\n                  </button>\n                  {errors.password && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.password.message}</p>\n                  )}\n                </div>\n              </div>\n\n             \n              <div className=\"space-y-2\">\n                <Label\n                  htmlFor=\"confirm_password\"\n                  className=\"text-sm font-medium\"\n                >\n                  Xác nhận mật khẩu\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"confirm_password\"\n                    {...register(\"confirm_password\")}\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    placeholder=\"Nhập lại mật khẩu\"\n                    className=\"pl-10 pr-10 h-12 w-full rounded-lg border border-gray-300 bg-white shadow-sm focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    {showConfirmPassword ? (\n                      <EyeOff className=\"h-5 w-4\" />\n                    ) : (\n                      <Eye className=\"h-5 w-4\" />\n                    )}\n                  </button>\n                  {errors.confirm_password && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.confirm_password.message}</p>\n                  )}\n                </div>\n              </div>\n\n         \n              <div className=\"flex items-start space-x-3 pt-2\">\n                <Checkbox\n                  id=\"terms\"\n                  checked={agreeTerms}\n                  onCheckedChange={(checked) => setAgreeTerms(checked as boolean)}\n                  className=\"mt-1\"\n                />\n                <label\n                  htmlFor=\"terms\"\n                  className=\"text-sm text-muted-foreground leading-relaxed cursor-pointer peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                >\n                  Tôi đồng ý với{\" \"}\n                  <a\n                    href=\"/terms\"\n                    target=\"_blank\"\n                    className=\"font-medium text-primary hover:underline\"\n                  >\n                    điều khoản sử dụng\n                  </a>{\" \"}\n                  và{\" \"}\n                  <a\n                    href=\"/privacy\"\n                    target=\"_blank\"\n                    className=\"font-medium text-primary hover:underline\"\n                  >\n                    chính sách bảo mật\n                  </a>\n                </label>\n              </div>\n\n    \n              <div>\n                <Button\n                  type=\"submit\"\n                  className=\"w-full h-12 bg-primary hover:bg-primary/90 shadow-lg hover:shadow-xl transition-all duration-300 text-primary-foreground font-semibold\n                  bg-[hsl(214,100%,40%)] p-3 shadow-[var(--shadow-metro)] text-white\"\n                  disabled={!agreeTerms || isSubmitting}\n                >\n                  <Bike className=\"mr-2 h-5 w-5\" />\n                  {isSubmitting ? \"Đang đăng ký...\" : \"Đăng ký\"}\n                </Button>\n              </div>\n            </form>\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Đã có tài khoản?{\" \"}\n                <Button\n                  variant=\"link\"\n                  className=\"text-sm text-primary p-0 h-auto\"\n                  onClick={() => router.push(\"/auth/login\")}\n                >\n                  Đăng nhập ngay\n                </Button>\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <Button\n                variant=\"link\"\n                className=\"text-sm text-muted-foreground hover:text-foreground transition-colors p-0 h-auto\"\n                onClick={() => router.push(\"/\")}\n              >\n                ← Về trang chủ\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterPage;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/(auth)/auth/reset-password/page.tsx:\n"
      },
      {
        "text": "\"use client\";\nimport { useState } from \"react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { Button } from \"@components/ui/button\";\nimport { Input } from \"@components/ui/input\";\nimport { Label } from \"@components/ui/label\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@components/ui/card\";\nimport { Separator } from \"@components/ui/separator\";\nimport { Bike, Lock, Eye, EyeOff, Shield, Loader2 } from \"lucide-react\";\nimport React from \"react\";\nimport { useAuthActions } from \"@hooks/useAuthAction\";\nimport { Suspense } from \"react\";\nfunction ResetPasswordContent() {\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { resetPassword } = useAuthActions();\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const token = searchParams.get(\"token\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (password !== confirmPassword) {\n      return;\n    }\n\n    if (!token) {\n      return;\n    }\n\n    setIsLoading(true);\n    resetPassword({\n      password,\n      confirm_password: confirmPassword,\n      forgot_password_token: token,\n    });\n    setIsLoading(false);\n  };\n\n  const handleBackToLogin = () => {\n    router.push(\"/auth/login\");\n  };\n\n  // If no token, redirect to forgot password\n  React.useEffect(() => {\n    if (!token) {\n      router.push(\"/auth/forgot-password\");\n    }\n  }, [token, router]);\n\n  if (!token) {\n    return (\n      <div\n        className=\"min-h-screen bg-gradient-to-br from-metro-primary via-metro-secondary to-metro-accent flex items-center justify-center p-4 \n        bg-[linear-gradient(135deg,hsl(214_100%_40%)_0%,hsl(215_16%_47%)_100%)]\"\n      >\n        <div className=\"text-center text-white\">\n          <p>Redirecting...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className=\"min-h-screen bg-gradient-to-br from-metro-primary via-metro-secondary to-metro-accent flex items-center justify-center p-4 \n      bg-[linear-gradient(135deg,hsl(214_100%_40%)_0%,hsl(215_16%_47%)_100%)]\"\n    >\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center animate-fade-in mb-6\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"p-4 rounded-2xl bg-white/10 backdrop-blur-sm border border-white/20 shadow-floating\">\n              <Bike className=\"h-12 w-12 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mb-3 tracking-tight\">\n            MetroBike\n          </h1>\n        </div>\n        <Card className=\"shadow-floating border-0 bg-white/95 backdrop-blur-xl relative z-10 overflow-hidden animate-scale-in\">\n          <div className=\"h-1 bg-gradient-metro rounded-t-lg\"></div>\n          <CardHeader className=\"space-y-2 text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\n              <Shield className=\"h-8 w-8 text-blue-600\" />\n            </div>\n            <CardTitle className=\"text-3xl font-bold text-foreground tracking-tight\">\n              Đặt lại mật khẩu\n            </CardTitle>\n            <CardDescription className=\"text-muted-foreground\">\n              Nhập mật khẩu mới cho tài khoản của bạn\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                  Mật khẩu mới\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-4 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Nhập mật khẩu mới\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"pl-10 h-12 w-full rounded-lg border border-gray-300 bg-white shadow-sm focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 \n                      transition-all duration-200\"\n                    required\n                    minLength={8}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-3 h-4 w-4 text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-5 w-4\" />\n                    ) : (\n                      <Eye className=\"h-5 w-4\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label\n                  htmlFor=\"confirmPassword\"\n                  className=\"text-sm font-medium\"\n                >\n                  Xác nhận mật khẩu\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-4 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    placeholder=\"Xác nhận mật khẩu mới\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    className=\"pl-10 h-12 w-full rounded-lg border border-gray-300 bg-white shadow-sm focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 \n                      transition-all duration-200\"\n                    required\n                    minLength={8}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    className=\"absolute right-3 top-3 h-4 w-4 text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    {showConfirmPassword ? (\n                      <EyeOff className=\"h-5 w-4\" />\n                    ) : (\n                      <Eye className=\"h-5 w-4\" />\n                    )}\n                  </button>\n                </div>\n                {password &&\n                  confirmPassword &&\n                  password !== confirmPassword && (\n                    <p className=\"text-sm text-red-500\">\n                      Mật khẩu xác nhận không khớp\n                    </p>\n                  )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"text-sm text-muted-foreground\">\n                  <p>Mật khẩu phải có ít nhất 8 ký tự</p>\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={\n                  isLoading ||\n                  password !== confirmPassword ||\n                  password.length < 8\n                }\n                className=\"w-full h-12 hover:bg-primary/90 shadow-lg hover:shadow-xl transition-all duration-300 text-primary-foreground font-semibold\n                  bg-[hsl(214,100%,40%)] p-3 shadow-[var(--shadow-metro)] text-white disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isLoading ? (\n                  <>\n                    <div className=\"mr-2 h-5 w-5 animate-spin rounded-full border-2 border-white border-t-transparent\"></div>\n                    Đang xử lý...\n                  </>\n                ) : (\n                  <>\n                    <Shield className=\"mr-2 h-5 w-5\" />\n                    Đặt lại mật khẩu\n                  </>\n                )}\n              </Button>\n            </form>\n\n            <Separator className=\"my-6\" />\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Nhớ mật khẩu rồi?{\" \"}\n                <Button\n                  onClick={handleBackToLogin}\n                  className=\"text-sm text-metro-primary hover:text-metro-secondary transition-colors text-white bg-[hsl(214,100%,40%)]\"\n                >\n                  Đăng nhập ngay\n                </Button>\n              </p>\n            </div>\n\n            <div className=\"text-center pt-4\">\n              <Button\n                className=\"text-sm text-muted-foreground hover:text-foreground transition-colors text-white bg-[hsl(214,100%,40%)]\"\n                onClick={() => router.push(\"/\")}\n              >\n                ← Về trang chủ\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default function ResetPasswordPage() {\n  return (\n    <Suspense\n      fallback={\n        <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"text-2xl\">Reset Password</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n                <p className=\"text-center text-muted-foreground\">Đang tải...</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      }\n    >\n      <ResetPasswordContent />\n    </Suspense>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/(auth)/auth/verify-email/page.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport { useEffect, useState, Suspense } from \"react\";\nimport { useSearchParams, useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircle, XCircle, Loader2, ArrowLeft } from \"lucide-react\";\nimport { useAuthActions } from \"@/hooks/useAuthAction\";\nimport { useAuth } from \"@/providers/auth-providers\";\n\nfunction VerifyEmailContent() {\n  const searchParams = useSearchParams();\n  const router = useRouter();\n  const { user } = useAuth();\n  const { verifyEmail } = useAuthActions();\n  const [status, setStatus] = useState<\"loading\" | \"success\" | \"error\">(\"loading\");\n  const [message, setMessage] = useState(\"\");\n  const [hasVerified, setHasVerified] = useState<boolean>(false); \n  useEffect(() => {\n    const token = searchParams.get(\"email_verify_token\");\n    if (!token) {\n      setStatus(\"error\");\n      setMessage(\"Token xác thực không hợp lệ\");\n      return;\n    }\n    if (hasVerified) {\n      return; \n    }\n    console.log(\"Starting email verification with token:\", token);\n    setHasVerified(true); \n    verifyEmail(token)\n      .then(() => {\n        setStatus(\"success\");\n        setMessage(\"Xác thực email thành công!\");\n        setTimeout(() => {\n          if (user?.role === \"ADMIN\") {\n            router.push(\"/admin/profile\");\n            return;\n          }\n          else if(user?.role === \"STAFF\"){\n            router.push(\"/staff/profile\");\n            return;\n          }\n          router.push(\"/user/profile\");\n        }, 3000);\n      })\n      .catch((error) => {\n        console.error(\"Email verification failed:\", error);\n        setStatus(\"error\");\n        setMessage(\"Xác thực email thất bại. Vui lòng thử lại.\");\n        setHasVerified(false); \n      });\n\n  }, [searchParams, router,hasVerified, verifyEmail , user?.role]); \n\n  const handleGoBack = () => {\n    if (user?.role === \"ADMIN\") {\n      router.push(\"/admin/profile\");\n      return;\n    } else if (user?.role === \"STAFF\") {\n      router.push(\"/staff/profile\");\n      return;\n    }\n    router.push(\"/user/profile\");\n  };\n  const handleResendVerifyEmail = () => {\n    setHasVerified(false);\n    router.refresh();\n  }\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl\">Xác thực Email</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex flex-col items-center space-y-4\">\n            {status === \"loading\" && (\n              <>\n                <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n                <p className=\"text-center text-muted-foreground\">\n                  Đang xác thực email của bạn...\n                </p>\n              </>\n            )}\n\n            {status === \"success\" && (\n              <>\n                <CheckCircle className=\"h-12 w-12 text-green-500\" />\n                <div className=\"text-center\">\n                  <p className=\"text-green-600 font-medium\">{message}</p>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Bạn sẽ được chuyển hướng về trang hồ sơ trong 3 giây...\n                  </p>\n                </div>\n              </>\n            )}\n\n            {status === \"error\" && (\n              <>\n                <XCircle className=\"h-12 w-12 text-red-500\" />\n                <div className=\"text-center\">\n                  <p className=\"text-red-600 font-medium\">{message}</p>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Vui lòng kiểm tra lại link xác thực hoặc yêu cầu gửi lại\n                    email.\n                  </p>\n                </div>\n              </>\n            )}\n          </div>\n\n          <div className=\"flex flex-col space-y-2\">\n            <Button onClick={() => handleGoBack()} variant=\"outline\" className=\"w-full\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Quay lại hồ sơ\n            </Button>\n\n            {status === \"error\" && (\n              <Button\n                onClick={() => handleResendVerifyEmail()}\n                className=\"w-full\"\n              >\n                Gửi lại email xác thực\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default function VerifyEmailPage() {\n  return (\n    <Suspense fallback={\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl\">Xác thực Email</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex flex-col items-center space-y-4\">\n              <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n              <p className=\"text-center text-muted-foreground\">\n                Đang tải...\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    }>\n      <VerifyEmailContent />\n    </Suspense>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/(public)/page.tsx:\n"
      },
      {
        "text": "\"use client\";\nimport { Hero } from \"@/components/landing/landing-header\";\nimport Header from \"@/components/ui/layout/Header\";\nimport { Features } from \"@/components/landing/landing-feature\";\nimport { HowItWorks } from \"@/components/landing/how-it-work\";\nimport { Stations } from \"@/components/landing/landing-station\";\nimport { CTA } from \"@/components/landing/cta\";\nimport { Footer } from \"@/components/landing/landing-footer\";\n// import Header from \"@/components/ui/layout/Header\";\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <Hero />\n      <Features />\n      <HowItWorks />\n      <Stations />\n      <CTA />\n      <Footer />\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/admin/layout.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport { useAuth } from \"@/providers/auth-providers\";\nimport { clearTokens } from \"@/utils/tokenManager\";\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport Image from \"next/image\";\ninterface AdminLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function AdminLayout({ children }: AdminLayoutProps) {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const router = useRouter();\n  const [showUnauthorized, setShowUnauthorized] = useState(false);\n\n  useEffect(() => {\n    if (isLoading) return;\n\n    if (!isAuthenticated || !user || user.role !== \"ADMIN\") {\n      clearTokens();\n      setShowUnauthorized(true);\n      const timer = setTimeout(() => {\n        router.push(\"/auth/login\");\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [isAuthenticated, user, isLoading, router]);\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-16 w-16 border-4 border-blue-200 border-t-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 font-medium\">\n            Đang kiểm tra quyền truy cập...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (showUnauthorized) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50\">\n        <div className=\"max-w-2xl mx-auto px-6\">\n          <div className=\"bg-white rounded-3xl shadow-2xl overflow-hidden transform hover:scale-105 transition-all duration-300\">\n            {/* Header với gradient */}\n            <div className=\"bg-gradient-to-r from-red-500 to-orange-500 h-2\"></div>\n\n            <div className=\"p-8 text-center\">\n              {/* Ảnh 401 với shadow và animation */}\n              <div className=\"mb-8 relative\">\n                <div className=\"absolute inset-0 bg-red-100 rounded-2xl blur-xl opacity-50 animate-pulse\"></div>\n                <Image\n                  src=\"/401-status-code.png\"\n                  alt=\"Unauthorized access - 401 status code\"\n                  width={300}\n                  height={300}\n                  className=\"relative z-10 mx-auto rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300\"\n                  priority\n                />\n              </div>\n\n              {/* Content với spacing tốt hơn */}\n              <div className=\"space-y-6\">\n                <div>\n                  <h2 className=\"text-3xl font-bold text-gray-900 mb-3\">\n                    🚫 Truy cập bị từ chối\n                  </h2>\n                  <div className=\"w-20 h-1 bg-gradient-to-r from-red-500 to-orange-500 mx-auto rounded-full\"></div>\n                </div>\n\n                <p className=\"text-gray-600 text-lg leading-relaxed max-w-md mx-auto\">\n                  Bạn không có quyền truy cập vào trang này. Chỉ\n                  <span className=\"font-semibold text-orange-600\">\n                    {\" \"}\n                     (ADMIN){\" \"}\n                  </span>\n                  mới có thể truy cập khu vực này.\n                </p>\n\n                {/* Countdown với design đẹp hơn */}\n                <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-100\">\n                  <div className=\"flex items-center justify-center space-x-3\">\n                    <div className=\"relative\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-3 border-blue-200\"></div>\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-3 border-t-blue-600 absolute top-0 left-0\"></div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-blue-700 font-semibold text-lg\">\n                        🔄 Đang chuyển hướng...\n                      </div>\n                      <div className=\"text-blue-600 text-sm\">\n                        Sẽ chuyển về trang đăng nhập trong vài giây\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Tips */}\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4\">\n                  <p className=\"text-yellow-800 text-sm\">\n                    💡 <strong>Gợi ý:</strong> Hãy đăng nhập bằng tài khoản\n                    Staff để truy cập trang này.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <main>\n        <div>\n          <div>{children}</div>\n        </div>\n      </main>\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/admin/page.tsx:\n"
      },
      {
        "text": "\"use client\";\nimport { ProfileHeader } from \"@/components/dashboard/profile-header\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { RentalChart } from \"@/components/dashboard/rental-chart\";\nimport { RecentActivity } from \"@/components/dashboard/recent-activity\";\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\";\nimport { Bike, TrendingUp, Users, DollarSign } from \"lucide-react\";\nimport { useAuth } from \"@/providers/auth-providers\";\nimport { Progress } from \"@/components/ui/progress\";\nexport default function DashboardPage() {\n  const { user } = useAuth();\n  if (!user) {\n    return (\n      <div>\n        <Progress />\n      </div>\n    );\n  }\n  return (\n    <DashboardLayout user={user}>\n      <div className=\"space-y-8\">\n        <section>\n          <ProfileHeader user={user} />\n        </section>\n        <section>\n          <h2 className=\"text-2xl font-bold text-foreground mb-4\">\n            Thống kê tổng quan\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <StatsCard\n              title=\"Tổng lượt thuê hôm nay\"\n              value=\"127\"\n              change=\"+12% so với hôm qua\"\n              changeType=\"positive\"\n              icon={Bike}\n            />\n            <StatsCard\n              title=\"Xe đang cho thuê\"\n              value=\"45\"\n              change=\"68% tổng số xe\"\n              changeType=\"neutral\"\n              icon={TrendingUp}\n            />\n            <StatsCard\n              title=\"Khách hàng mới\"\n              value=\"23\"\n              change=\"+8% tuần này\"\n              changeType=\"positive\"\n              icon={Users}\n            />\n            <StatsCard\n              title=\"Doanh thu hôm nay\"\n              value=\"12.5M ₫\"\n              change=\"+15% so với hôm qua\"\n              changeType=\"positive\"\n              icon={DollarSign}\n            />\n          </div>\n        </section>\n\n        <section className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2\">\n            <RentalChart />\n          </div>\n          <div className=\"lg:col-span-1\">\n            <RecentActivity />\n          </div>\n        </section>\n      </div>\n    </DashboardLayout>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/admin/profile/change-password/page.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Eye, EyeOff, Lock, ArrowLeft, Shield, User, Key } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/providers/auth-providers\";\nimport { useAuthActions } from \"@/hooks/useAuthAction\";\nimport { changePasswordSchema, ChangePasswordSchemaFormData } from \"@/schemas/authSchema\";\nimport Link from \"next/link\";\nimport { Progress } from \"@radix-ui/react-progress\";\n\nexport default function ChangePasswordPage() {\n  const { user } = useAuth();\n  const { changePassword } = useAuthActions();\n  const [showPasswords, setShowPasswords] = useState({\n    oldPassword: false,\n    newPassword: false,\n    confirmPassword: false,\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n    reset,\n  } = useForm<ChangePasswordSchemaFormData>({\n    resolver: zodResolver(changePasswordSchema),\n  });\n\n  const togglePasswordVisibility = (field: keyof typeof showPasswords) => {\n    setShowPasswords((prev) => ({\n      ...prev,\n      [field]: !prev[field],\n    }));\n  };\n\n  const onSubmit = async (data: ChangePasswordSchemaFormData) => {\n    try {\n      changePassword(data.old_password, data.password, data.confirm_password);\n      reset();\n    } catch (error) {\n      console.error(\"Error changing password:\", error);\n    }\n  };\n\n\n\n  if (!user) {\n    return <div className=\"flex items-center justify-center h-screen\"><Progress /></div>;\n  }\n\n  return (\n    <DashboardLayout user={user}>\n      <div className=\"space-y-6 max-w-4xl mx-auto\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-4\">\n            <Link\n              href=\"/admin/profile\"\n              className=\"p-2 hover:bg-accent rounded-lg transition-colors\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Link>\n            <div className=\"flex-1\">\n              <h1 className=\"text-3xl font-bold text-foreground\">\n                Thay đổi mật khẩu\n              </h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Cập nhật mật khẩu để bảo mật tài khoản của bạn\n              </p>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-card border border-border rounded-lg p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Trạng thái bảo mật</p>\n                  <p className=\"font-semibold text-foreground\">\n                    {user.verify === \"VERIFIED\" ? \"Đã xác thực\" : \"Cần xác thực\"}\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-card border border-border rounded-lg p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center\">\n                  <User className=\"w-5 h-5 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Vai trò</p>\n                  <p className=\"font-semibold text-foreground\">Nhân viên</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-card border border-border rounded-lg p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-amber-100 dark:bg-amber-900/20 rounded-full flex items-center justify-center\">\n                  <Key className=\"w-5 h-5 text-amber-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Lần cuối đổi</p>\n                  <p className=\"font-semibold text-foreground\">\n                    {new Date(user.updated_at).toLocaleDateString(\"vi-VN\")}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-card border border-border rounded-xl p-8\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-xl font-semibold text-foreground mb-2\">\n                  Cập nhật mật khẩu\n                </h2>\n                <p className=\"text-sm text-muted-foreground\">\n                  Vui lòng nhập mật khẩu hiện tại và mật khẩu mới để cập nhật bảo mật tài khoản\n                </p>\n              </div>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label\n                  htmlFor=\"old_password\"\n                  className=\"text-sm font-medium text-foreground\"\n                >\n                  Mật khẩu hiện tại\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"old_password\"\n                    type={showPasswords.oldPassword ? \"text\" : \"password\"}\n                    {...register(\"old_password\")}\n                    placeholder=\"Nhập mật khẩu hiện tại\"\n                    className={cn(\n                      \"bg-background border-border pr-10\",\n                      errors.old_password && \"border-destructive\"\n                    )}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => togglePasswordVisibility(\"oldPassword\")}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                  >\n                    {showPasswords.oldPassword ? (\n                      <EyeOff className=\"w-4 h-4\" />\n                    ) : (\n                      <Eye className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n                {errors.old_password && (\n                  <p className=\"text-sm text-destructive\">\n                    {errors.old_password.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label\n                  htmlFor=\"password\"\n                  className=\"text-sm font-medium text-foreground\"\n                >\n                  Mật khẩu mới\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPasswords.newPassword ? \"text\" : \"password\"}\n                    {...register(\"password\")}\n                    placeholder=\"Nhập mật khẩu mới\"\n                    className={cn(\n                      \"bg-background border-border pr-10\",\n                      errors.password && \"border-destructive\"\n                    )}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => togglePasswordVisibility(\"newPassword\")}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                  >\n                    {showPasswords.newPassword ? (\n                      <EyeOff className=\"w-4 h-4\" />\n                    ) : (\n                      <Eye className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n                {errors.password && (\n                  <p className=\"text-sm text-destructive\">\n                    {errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label\n                  htmlFor=\"confirm_password\"\n                  className=\"text-sm font-medium text-foreground\"\n                >\n                  Xác nhận mật khẩu mới\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirm_password\"\n                    type={showPasswords.confirmPassword ? \"text\" : \"password\"}\n                    {...register(\"confirm_password\")}\n                    placeholder=\"Nhập lại mật khẩu mới\"\n                    className={cn(\n                      \"bg-background border-border pr-10\",\n                      errors.confirm_password && \"border-destructive\"\n                    )}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => togglePasswordVisibility(\"confirmPassword\")}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                  >\n                    {showPasswords.confirmPassword ? (\n                      <EyeOff className=\"w-4 h-4\" />\n                    ) : (\n                      <Eye className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n                {errors.confirm_password && (\n                  <p className=\"text-sm text-destructive\">\n                    {errors.confirm_password.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Submit Button */}\n              <div className=\"flex gap-3 pt-6 border-t border-border\">\n                <Link href=\"/admin/profile\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"bg-transparent\"\n                  >\n                    Hủy\n                  </Button>\n                </Link>\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"bg-primary hover:bg-primary/90 gap-2\"\n                >\n                  <Lock className=\"w-4 h-4\" />\n                  {isSubmitting ? \"Đang cập nhật...\" : \"Cập nhật mật khẩu\"}\n                </Button>\n              </div>\n            </form>\n          </div>\n          </div>\n\n          {/* Security Section */}\n          <div className=\"space-y-6\">\n            {/* Current User Info */}\n            <div className=\"bg-card border border-border rounded-xl p-6\">\n              <div className=\"flex items-center gap-4 mb-4\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <Lock className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-foreground\">Bảo mật tài khoản</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {user.email}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-3 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Vai trò:</span>\n                  <span className=\"font-medium text-foreground\">\n                    Nhân viên\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Trạng thái:</span>\n                  <span className={`font-medium ${user.verify === \"VERIFIED\" ? \"text-green-600\" : \"text-amber-600\"}`}>\n                    {user.verify === \"VERIFIED\" ? \"Đã xác thực\" : \"Chưa xác thực\"}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Lần cuối cập nhật:</span>\n                  <span className=\"font-medium text-foreground\">\n                    {new Date(user.updated_at).toLocaleDateString(\"vi-VN\")}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Security Tips */}\n            <div className=\"bg-card border border-border rounded-xl p-6\">\n              <div className=\"flex items-center gap-3 mb-4\">\n                <div className=\"w-8 h-8 bg-amber-100 dark:bg-amber-900/20 rounded-full flex items-center justify-center\">\n                  <span className=\"text-lg\">💡</span>\n                </div>\n                <h4 className=\"font-semibold text-foreground\">Lời khuyên bảo mật</h4>\n              </div>\n              \n              <ul className=\"space-y-3 text-sm text-muted-foreground\">\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Sử dụng mật khẩu mạnh với ít nhất 8 ký tự</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Kết hợp chữ hoa, chữ thường, số và ký tự đặc biệt</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Không sử dụng thông tin cá nhân dễ đoán</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Thay đổi mật khẩu định kỳ để đảm bảo an toàn</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Không chia sẻ mật khẩu với bất kỳ ai</span>\n                </li>\n              </ul>\n            </div>\n\n            {/* Password Strength Indicator */}\n            <div className=\"bg-card border border-border rounded-xl p-6\">\n              <h4 className=\"font-semibold text-foreground mb-4 flex items-center gap-2\">\n                <span className=\"text-lg\">🔐</span>\n                Mức độ bảo mật\n              </h4>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                  <span className=\"text-sm text-muted-foreground\">Yếu</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-amber-500 rounded-full\"></div>\n                  <span className=\"text-sm text-muted-foreground\">Trung bình</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-sm text-muted-foreground\">Mạnh</span>\n                </div>\n              </div>\n              \n              <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <p className=\"text-xs text-blue-600 dark:text-blue-400\">\n                  Mật khẩu mạnh giúp bảo vệ tài khoản khỏi các cuộc tấn công mạng\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/admin/profile/page.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport type React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\";\nimport type { DetailUser } from \"@/services/authService\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Camera, Save, X, Mail } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/providers/auth-providers\";\nimport { Progress } from \"@radix-ui/react-progress\";\nimport { useAuthActions } from \"@/hooks/useAuthAction\";\nimport Image from \"next/image\";\nimport { UpdateProfileSchemaFormData } from \"@/schemas/authSchema\";\nexport default function ProfilePage() {\n  const { user, updateProfile } = useAuth();\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [data, setData] = useState<DetailUser | null>(null);\n  const [formData, setFormData] = useState<DetailUser>(\n    () => user || ({} as DetailUser)\n  );\n  const [avatarPreview, setAvatarPreview] = useState(user?.avatar ?? \"\");\n  const { resendVerifyEmail } = useAuthActions();\n  useEffect(() => {\n    if (user) {\n      setData(user);\n      setFormData(user as DetailUser);\n      setAvatarPreview(user.avatar ?? \"\");\n      console.log(user);\n    }\n  }, [user]);\n  if (!user || !data) {\n    return (\n      <div>\n        <Progress />\n      </div>\n    );\n  }\n  const handleInputChange = (field: keyof DetailUser, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setAvatarPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const handleSave = () => {\n    if (!user) return;\n    const fields: (keyof UpdateProfileSchemaFormData)[] = [\n      \"fullname\",\n      \"username\",\n      \"phone_number\",\n      \"location\",\n      \"avatar\",\n    ];\n\n    const updatedData = fields.reduce((acc, field) => {\n      const newValue = field === \"avatar\" ? avatarPreview : formData[field];\n      const oldValue = user[field as keyof DetailUser] ?? \"\";\n\n      if (newValue !== oldValue) {\n        acc[field] = newValue || \"\";\n      }\n      return acc;\n    }, {} as UpdateProfileSchemaFormData);\n\n    // Nếu có field nào thay đổi mới gọi API\n    if (Object.keys(updatedData).length > 0) {\n      updateProfile(updatedData);\n    }\n\n    setIsEditing(false);\n  };\n\n  const handleCancel = () => {\n    if (data) {\n      setFormData(data as DetailUser);\n      setAvatarPreview(data.avatar || \"\");\n    }\n    setIsEditing(false);\n  };\n  const handleResendVerifyEmail = () => {\n    if (formData?.verify === \"VERIFIED\") {\n      return;\n    }\n    resendVerifyEmail();\n  };\n  return (\n    <DashboardLayout user={data}>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">\n              Hồ sơ cá nhân\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Quản lý thông tin tài khoản của bạn\n            </p>\n          </div>\n          {!isEditing ? (\n            <Button\n              onClick={() => setIsEditing(true)}\n              className=\"bg-primary hover:bg-primary/90 cursor-pointer gap-2\"\n            >\n              Chỉnh sửa hồ sơ\n            </Button>\n          ) : (\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={handleCancel}\n                variant=\"outline\"\n                className=\"gap-2 bg-transparent cursor-pointer\"\n              >\n                <X className=\"w-4 h-4\" />\n                Hủy\n              </Button>\n              <Button\n                onClick={() => handleSave()}\n                className=\"bg-primary hover:bg-primary/90 gap-2 cursor-pointer\"\n              >\n                <Save className=\"w-4 h-4\" />\n                Lưu thay đổi\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <div className=\"bg-card border border-border rounded-xl p-8\">\n          <div className=\"flex flex-col md:flex-row gap-8\">\n            <div className=\"flex flex-col items-center gap-4\">\n              <div className=\"relative group\">\n                <div className=\"w-32 h-32 rounded-full overflow-hidden border-4 border-primary/20\">\n                  <Image\n                    src={avatarPreview || \"/placeholder.svg\"}\n                    alt=\"Avatar\"\n                    className=\"w-full h-full object-cover\"\n                    width={128}\n                    height={128}\n                  />\n                </div>\n                {isEditing && (\n                  <label\n                    htmlFor=\"avatar-upload\"\n                    className=\"absolute inset-0 flex items-center justify-center bg-black/50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer\"\n                  >\n                    <Camera className=\"w-8 h-8 text-white\" />\n                    <input\n                      id=\"avatar-upload\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                      onChange={handleAvatarChange}\n                    />\n                  </label>\n                )}\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-sm font-medium text-foreground\">\n                  {formData?.fullname || \"Chưa có tên\"}\n                </p>\n                <p\n                  className={cn(\n                    \"text-xs px-2 py-1 rounded-full inline-block mt-1\",\n                    formData?.role === \"ADMIN\"\n                      ? \"bg-primary/20 text-primary\"\n                      : \"bg-accent/20 text-accent-foreground\"\n                  )}\n                >\n                  {formData?.role === \"ADMIN\" ? \"Quản trị viên\" : \"Nhân viên\"}\n                </p>\n              </div>\n            </div>\n\n            {/* Form Section */}\n            <div className=\"flex-1 space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label\n                    htmlFor=\"fullname\"\n                    className=\"text-sm font-medium text-foreground\"\n                  >\n                    Họ và tên\n                  </Label>\n                  <Input\n                    id=\"fullname\"\n                    value={formData?.fullname || \"\"}\n                    onChange={(e) =>\n                      handleInputChange(\"fullname\", e.target.value)\n                    }\n                    disabled={!isEditing}\n                    className={cn(\n                      \"bg-background border-border\",\n                      !isEditing && \"opacity-70 cursor-not-allowed\"\n                    )}\n                  />\n                </div>\n\n                {/* Username */}\n                <div className=\"space-y-2\">\n                  <Label\n                    htmlFor=\"username\"\n                    className=\"text-sm font-medium text-foreground\"\n                  >\n                    Tên đăng nhập\n                  </Label>\n                  <Input\n                    id=\"username\"\n                    value={formData?.username || \"\"}\n                    onChange={(e) =>\n                      handleInputChange(\"username\", e.target.value)\n                    }\n                    disabled={!isEditing}\n                    className={cn(\n                      \"bg-background border-border\",\n                      !isEditing && \"opacity-70 cursor-not-allowed\"\n                    )}\n                  />\n                </div>\n\n                {/* Email */}\n                <div className=\"space-y-2\">\n                  <Label\n                    htmlFor=\"email\"\n                    className=\"text-sm font-medium text-foreground\"\n                  >\n                    Email\n                  </Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData?.email || \"\"}\n                    onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                    disabled\n                    className={cn(\n                      \"bg-background border-border\",\n                      !isEditing && \"opacity-70 cursor-not-allowed\"\n                    )}\n                  />\n                </div>\n\n                {/* Phone Number */}\n                <div className=\"space-y-2\">\n                  <Label\n                    htmlFor=\"phone\"\n                    className=\"text-sm font-medium text-foreground\"\n                  >\n                    Số điện thoại\n                  </Label>\n                  <Input\n                    id=\"phone\"\n                    value={formData?.phone_number || \"\"}\n                    onChange={(e) =>\n                      handleInputChange(\"phone_number\", e.target.value)\n                    }\n                    disabled={!isEditing}\n                    className={cn(\n                      \"bg-background border-border\",\n                      !isEditing && \"opacity-70 cursor-not-allowed\"\n                    )}\n                  />\n                </div>\n\n                {/* Location */}\n                <div className=\"space-y-2 md:col-span-2\">\n                  <Label\n                    htmlFor=\"location\"\n                    className=\"text-sm font-medium text-foreground\"\n                  >\n                    Địa chỉ\n                  </Label>\n                  <Input\n                    id=\"location\"\n                    value={formData?.location || \"\"}\n                    onChange={(e) =>\n                      handleInputChange(\"location\", e.target.value)\n                    }\n                    disabled={!isEditing}\n                    className={cn(\n                      \"bg-background border-border\",\n                      !isEditing && \"opacity-70 cursor-not-allowed\"\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Account Info */}\n              <div className=\"pt-6 border-t border-border\">\n                <h3 className=\"text-sm font-semibold text-foreground mb-4\">\n                  Thông tin tài khoản\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-muted-foreground\">Trạng thái xác thực</p>\n                    <p\n                      className={cn(\n                        \"font-medium mt-1\",\n                        formData?.verify === \"VERIFIED\"\n                          ? \"text-accent\"\n                          : \"text-destructive\"\n                      )}\n                    >\n                      {formData?.verify === \"VERIFIED\"\n                        ? \"Đã xác thực\"\n                        : \"Chưa xác thực\"}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-muted-foreground\">Ngày tạo tài khoản</p>\n                    <p className=\"font-medium text-foreground mt-1\">\n                      {formData?.created_at\n                        ? new Date(formData.created_at).toLocaleDateString(\n                            \"vi-VN\"\n                          )\n                        : \"Chưa có thông tin\"}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-muted-foreground\">Cập nhật lần cuối</p>\n                    <p className=\"font-medium text-foreground mt-1\">\n                      {formData?.updated_at\n                        ? new Date(formData.updated_at).toLocaleDateString(\n                            \"vi-VN\"\n                          )\n                        : \"Chưa có thông tin\"}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-muted-foreground\">ID tài khoản</p>\n                    <p className=\"font-medium text-foreground mt-1 font-mono text-xs\">\n                      {formData?._id || \"Chưa có ID\"}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Security Section */}\n        <div className=\"bg-card border border-border rounded-xl p-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n            Bảo mật\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium text-foreground\">Đổi mật khẩu</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Cập nhật mật khẩu của bạn\n                </p>\n              </div>\n              <Button variant=\"outline\">Thay đổi</Button>\n            </div>\n            <div className=\"flex items-center justify-between pt-4 border-t border-border\">\n              <div>\n                <p className=\"font-medium text-foreground\">Xác thực email</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Tăng cường bảo mật tài khoản\n                </p>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={() => handleResendVerifyEmail()}\n                className=\"gap-2\"\n                disabled={formData?.verify === \"VERIFIED\"}\n              >\n                <Mail className=\"w-4 h-4\" />\n                {formData?.verify === \"VERIFIED\"\n                  ? \"Đã xác thực\"\n                  : \"Gửi email xác thực\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/contact/page.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport type React from \"react\";\nimport Header from \"@components/ui/layout/Header\";\nimport { Footer as LandingFooter} from \"@components/landing/landing-footer\";\nimport { Card } from \"@components/ui/card\";\nimport { Button } from \"@components/ui/button\";\nimport { Input } from \"@components/ui/input\";\nimport { Textarea } from \"@components/ui/textarea\";\nimport { Label } from \"@components/ui/label\";\nimport { Mail, Phone, MapPin, Clock } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { toast } from \"sonner\";\nexport default function ContactPage() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    subject: \"\",\n    message: \"\",\n  });\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"[v0] Contact form submitted:\", formData);\n    toast.success(\"Tin nhắn của bạn đã được gửi thành công!\");\n  };\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <main className=\"pt-24\">\n        <section className=\"py-16 bg-gradient-to-b from-primary/5 to-background\">\n          <div className=\"container mx-auto px-4 lg:px-8\">\n            <div className=\"max-w-3xl mx-auto text-center\">\n              <h1 className=\"text-5xl md:text-6xl font-bold text-foreground mb-6 text-balance\">\n                Liên hệ với chúng tôi\n              </h1>\n              <p className=\"text-xl text-muted-foreground text-pretty\">\n                Có câu hỏi? Chúng tôi luôn sẵn sàng hỗ trợ bạn\n              </p>\n            </div>\n          </div>\n        </section>\n        <section className=\"py-16\">\n          <div className=\"container mx-auto px-4 lg:px-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n              <div className=\"lg:col-span-2\">\n                <Card className=\"p-8\">\n                  <h2 className=\"text-2xl font-bold text-foreground mb-6\">\n                    Gửi tin nhắn\n                  </h2>\n                  <form onSubmit={handleSubmit} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"name\">Họ và tên *</Label>\n                        <Input\n                          id=\"name\"\n                          placeholder=\"Nguyễn Văn A\"\n                          value={formData.name}\n                          onChange={(e) =>\n                            setFormData({ ...formData, name: e.target.value })\n                          }\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email *</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          placeholder=\"email@example.com\"\n                          value={formData.email}\n                          onChange={(e) =>\n                            setFormData({ ...formData, email: e.target.value })\n                          }\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"phone\">Số điện thoại</Label>\n                        <Input\n                          id=\"phone\"\n                          type=\"tel\"\n                          placeholder=\"0901234567\"\n                          value={formData.phone}\n                          onChange={(e) =>\n                            setFormData({ ...formData, phone: e.target.value })\n                          }\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"subject\">Chủ đề *</Label>\n                        <Input\n                          id=\"subject\"\n                          placeholder=\"Vấn đề cần hỗ trợ\"\n                          value={formData.subject}\n                          onChange={(e) =>\n                            setFormData({\n                              ...formData,\n                              subject: e.target.value,\n                            })\n                          }\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"message\">Nội dung *</Label>\n                      <Textarea\n                        id=\"message\"\n                        placeholder=\"Mô tả chi tiết vấn đề của bạn...\"\n                        rows={6}\n                        value={formData.message}\n                        onChange={(e) =>\n                          setFormData({ ...formData, message: e.target.value })\n                        }\n                        required\n                      />\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      size=\"lg\"\n                      className=\"w-full md:w-auto\"\n                    >\n                      Gửi tin nhắn\n                    </Button>\n                  </form>\n                </Card>\n              </div>\n\n              <div className=\"space-y-6\">\n                <Card className=\"p-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <Mail className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground mb-1\">\n                        Email\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        support@metrobike.vn\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        info@metrobike.vn\n                      </p>\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <Phone className=\"w-6 h-6 text-secondary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground mb-1\">\n                        Điện thoại\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Hotline: 1900 1234\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Hỗ trợ: 028 1234 5678\n                      </p>\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <MapPin className=\"w-6 h-6 text-accent\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground mb-1\">\n                        Văn phòng\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        123 Đường Lê Lợi, Phường Bến Thành, Quận 1, TP. Hồ Chí\n                        Minh\n                      </p>\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <Clock className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground mb-1\">\n                        Giờ làm việc\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Thứ 2 - Thứ 6: 8:00 - 18:00\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Thứ 7: 8:00 - 12:00\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Chủ nhật: Nghỉ\n                      </p>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <section className=\"py-16 bg-muted/30\">\n          <div className=\"container mx-auto px-4 lg:px-8\">\n            <div className=\"max-w-4xl mx-auto\">\n              <h2 className=\"text-3xl font-bold text-foreground mb-8 text-center\">\n                Vị trí văn phòng\n              </h2>\n              <Card className=\"p-8 bg-muted/50\">\n                <div className=\"aspect-video bg-background rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <MapPin className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                    <p className=\"text-muted-foreground\">\n                      Bản đồ Google Maps sẽ hiển thị ở đây\n                    </p>\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                      123 Đường Lê Lợi, Quận 1, TP.HCM\n                    </p>\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      <LandingFooter />\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/favicon.ico:\n"
      },
      {
        "text": "Cannot display content of binary file: apps/frontend/src/app/favicon.ico"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/globals.css:\n"
      },
      {
        "text": "@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(0.98 0.002 264);\n  --foreground: oklch(0.15 0.01 264);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.15 0.01 264);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.15 0.01 264);\n  --primary: oklch(0.45 0.15 264);\n  --primary-foreground: oklch(0.98 0.002 264);\n  --secondary: oklch(0.92 0.01 264);\n  --secondary-foreground: oklch(0.15 0.01 264);\n  --muted: oklch(0.95 0.005 264);\n  --muted-foreground: oklch(0.5 0.01 264);\n  --accent: oklch(0.55 0.2 180);\n  --accent-foreground: oklch(0.98 0.002 264);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.98 0.002 264);\n  --border: oklch(0.9 0.005 264);\n  --input: oklch(0.9 0.005 264);\n  --ring: oklch(0.45 0.15 264);\n  --chart-1: oklch(0.55 0.2 264);\n  --chart-2: oklch(0.6 0.18 180);\n  --chart-3: oklch(0.65 0.15 140);\n  --chart-4: oklch(0.7 0.12 60);\n  --chart-5: oklch(0.5 0.22 300);\n  --radius: 0.5rem;\n  --sidebar: oklch(0.98 0.002 264);\n  --sidebar-foreground: oklch(0.15 0.01 264);\n  --sidebar-primary: oklch(0.45 0.15 264);\n  --sidebar-primary-foreground: oklch(0.98 0.002 264);\n  --sidebar-accent: oklch(0.92 0.01 264);\n  --sidebar-accent-foreground: oklch(0.15 0.01 264);\n  --sidebar-border: oklch(0.9 0.005 264);\n  --sidebar-ring: oklch(0.45 0.15 264);\n}\n\n.dark {\n  --background: oklch(0.12 0.01 264);\n  --foreground: oklch(0.95 0.005 264);\n  --card: oklch(0.15 0.01 264);\n  --card-foreground: oklch(0.95 0.005 264);\n  --popover: oklch(0.15 0.01 264);\n  --popover-foreground: oklch(0.95 0.005 264);\n  --primary: oklch(0.65 0.18 264);\n  --primary-foreground: oklch(0.12 0.01 264);\n  --secondary: oklch(0.2 0.01 264);\n  --secondary-foreground: oklch(0.95 0.005 264);\n  --muted: oklch(0.18 0.01 264);\n  --muted-foreground: oklch(0.6 0.01 264);\n  --accent: oklch(0.55 0.2 180);\n  --accent-foreground: oklch(0.95 0.005 264);\n  --destructive: oklch(0.5 0.2 27);\n  --destructive-foreground: oklch(0.95 0.005 264);\n  --border: oklch(0.22 0.01 264);\n  --input: oklch(0.22 0.01 264);\n  --ring: oklch(0.65 0.18 264);\n  --chart-1: oklch(0.6 0.2 264);\n  --chart-2: oklch(0.65 0.18 180);\n  --chart-3: oklch(0.7 0.15 140);\n  --chart-4: oklch(0.75 0.12 60);\n  --chart-5: oklch(0.55 0.22 300);\n  --sidebar: oklch(0.1 0.01 264);\n  --sidebar-foreground: oklch(0.95 0.005 264);\n  --sidebar-primary: oklch(0.6 0.2 264);\n  --sidebar-primary-foreground: oklch(0.95 0.005 264);\n  --sidebar-accent: oklch(0.18 0.01 264);\n  --sidebar-accent-foreground: oklch(0.95 0.005 264);\n  --sidebar-border: oklch(0.22 0.01 264);\n  --sidebar-ring: oklch(0.65 0.18 264);\n}\n\n@theme inline {\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/guide/layout.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport { Logo as MetroLogo } from \"@/components/logo\";\nimport { Button } from \"@/components/ui/button\";\nimport { useRouter } from \"next/navigation\";\nimport Header from \"@/components/ui/layout/Header\";\nexport default function GuideLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const router = useRouter();\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <main>{children}</main>\n      <section className=\"py-16 bg-gradient-hero text-white  bg-[linear-gradient(135deg,_#2563eb,_#60a5fa)]\">\n        <div className=\"container mx-auto px-4 text-center \">\n          <h2 className=\"text-3xl font-bold mb-6\">\n            Sẵn sàng trải nghiệm MetroBike?\n          </h2>\n          <p className=\"text-xl mb-8 opacity-90\">\n            Tham gia cộng đồng MetroBike và trải nghiệm cách di chuyển thông\n            minh nhất thành phố\n          </p>\n          <Button\n            size=\"lg\"\n            className=\"bg-[hsl(38_95%_49%)] text-black hover:bg-metro-yellow-light\"\n            onClick={() => router.push(\"/customer\")}\n          >\n            Bắt đầu ngay\n          </Button>\n        </div>\n      </section>\n      <footer className=\" bg-gradient-card py-8\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <MetroLogo />\n          <p className=\"text-muted-foreground mt-4\">\n            © 2025 MetroBike. Tất cả quyền được bảo lưu.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/guide/page.tsx:\n"
      },
      {
        "text": "import Stepper from \"@/components/ui/Stepper\";\nimport React from \"react\";\n\nconst page = () => {\n  return (\n    <div className=\"w-full\">\n      <div\n        className=\"relative w-full h-96 bg-cover bg-center flex items-center justify-center\"\n        style={{\n          backgroundImage: \"url('/5228.jpg')\",\n        }}\n      >\n        <div className=\"absolute inset-0 bg-black opacity-50\"></div>\n        <div className=\"relative z-10 text-center text-white p-4\">\n          <h1 className=\"text-4xl md:text-6xl font-bold drop-shadow-lg\">\n            Hướng dẫn sử dụng MeBike\n          </h1>\n          <p className=\"mt-4 text-lg md:text-xl drop-shadow-md\">\n            Và đây là dòng mô tả phụ, giải thích thêm.\n          </p>\n          <button className=\"mt-6 px-6 py-3 bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold transition-colors\">\n            Tìm hiểu thêm\n          </button>\n        </div>\n      </div>\n      <div className=\"container px-4 mx-auto my-12 text-center\">\n        <h1 className=\"text-xl md:text-4xl drop-shadow-lg\">\n          Hướng dẫn sử dụng MeBike\n        </h1>\n      </div>\n      <div className=\"container px-4 mx-auto my-12\">\n        <p className=\"mt-4 text-lg md:text-xl drop-shadow-md\">\n          Sau khi đăng ký {\"\"}\n          <span className=\"text-blue-500 font-bold\">đăng ký tài khoản</span> và\n          bắt đầu sử dụng dịch vụ\n        </p>\n      </div>\n      <div className=\"container px-4 mx-auto my-12\">\n        <Stepper />\n      </div>\n    </div>\n  );\n};\n\nexport default page;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/layout.tsx:\n"
      },
      {
        "text": "import \"./globals.css\";\nimport Providers from \"@providers/providers\";\nimport { AuthProvider } from \"@/providers/auth-providers\";\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Providers>\n          <AuthProvider>{children}</AuthProvider>\n        </Providers>\n      </body>\n    </html>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/pricing/page.tsx:\n"
      },
      {
        "text": "import Header from \"@/components/ui/layout/Header\";\nimport { Footer as LandingFooter } from \"@/components/landing/landing-footer\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check } from \"lucide-react\";\n\nconst pricingPlans = [\n  {\n    name: \"Thuê theo giờ\",\n    price: \"10.000\",\n    unit: \"VNĐ/giờ\",\n    description: \"Phù hợp cho chuyến đi ngắn\",\n    features: [\n      \"Thuê tối thiểu 1 giờ\",\n      \"Trả xe tại bất kỳ trạm nào\",\n      \"Không cần đăng ký trước\",\n      \"Thanh toán qua app\",\n      \"Bảo hiểm cơ bản\",\n    ],\n    popular: false,\n  },\n  {\n    name: \"Gói ngày\",\n    price: \"50.000\",\n    unit: \"VNĐ/ngày\",\n    description: \"Tiết kiệm cho cả ngày khám phá\",\n    features: [\n      \"Thuê không giới hạn trong ngày\",\n      \"Trả xe tại bất kỳ trạm nào\",\n      \"Ưu tiên hỗ trợ\",\n      \"Thanh toán qua app\",\n      \"Bảo hiểm toàn diện\",\n      \"Giảm 50% so với thuê theo giờ\",\n    ],\n    popular: true,\n  },\n  {\n    name: \"Gói tháng\",\n    price: \"500.000\",\n    unit: \"VNĐ/tháng\",\n    description: \"Tốt nhất cho người đi làm hàng ngày\",\n    features: [\n      \"Thuê không giới hạn cả tháng\",\n      \"Trả xe tại bất kỳ trạm nào\",\n      \"Hỗ trợ ưu tiên 24/7\",\n      \"Thanh toán qua app\",\n      \"Bảo hiểm toàn diện\",\n      \"Tích điểm thưởng\",\n      \"Giảm 67% so với thuê theo ngày\",\n    ],\n    popular: false,\n  },\n];\n\nconst additionalServices = [\n  { name: \"Mũ bảo hiểm\", price: \"5.000 VNĐ/lần\" },\n  { name: \"Khóa xe bổ sung\", price: \"10.000 VNĐ/lần\" },\n  { name: \"Giỏ xe\", price: \"5.000 VNĐ/lần\" },\n  { name: \"Bảo hiểm mở rộng\", price: \"20.000 VNĐ/ngày\" },\n];\n\nexport default function PricingPage() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n\n      <main className=\"pt-24\">\n        <section className=\"py-16 bg-gradient-to-b from-primary/5 to-background\">\n          <div className=\"container mx-auto px-4 lg:px-8\">\n            <div className=\"max-w-3xl mx-auto text-center\">\n              <h1 className=\"text-5xl md:text-6xl font-bold text-foreground mb-6 text-balance\">\n                Bảng giá dịch vụ\n              </h1>\n              <p className=\"text-xl text-muted-foreground text-pretty\">\n                Chọn gói phù hợp với nhu cầu di chuyển của bạn\n              </p>\n            </div>\n          </div>\n        </section>\n\n        <section className=\"py-16\">\n          <div className=\"container mx-auto px-4 lg:px-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n              {pricingPlans.map((plan, index) => (\n                <Card\n                  key={index}\n                  className={`p-8 relative ${plan.popular ? \"border-primary border-2 shadow-xl\" : \"\"}`}\n                >\n                  {plan.popular && (\n                    <div className=\"absolute -top-4 left-1/2 -translate-x-1/2\">\n                      <span className=\"bg-primary text-primary-foreground px-4 py-1 rounded-full text-sm font-semibold\">\n                        Phổ biến nhất\n                      </span>\n                    </div>\n                  )}\n\n                  <div className=\"text-center mb-6\">\n                    <h3 className=\"text-2xl font-bold text-foreground mb-2\">\n                      {plan.name}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      {plan.description}\n                    </p>\n                    <div className=\"flex items-baseline justify-center gap-1\">\n                      <span className=\"text-4xl font-bold text-foreground\">\n                        {plan.price}\n                      </span>\n                      <span className=\"text-muted-foreground\">{plan.unit}</span>\n                    </div>\n                  </div>\n\n                  <ul className=\"space-y-3 mb-8\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-start gap-3\">\n                        <Check className=\"w-5 h-5 text-primary flex-shrink-0 mt-0.5\" />\n                        <span className=\"text-sm text-foreground\">\n                          {feature}\n                        </span>\n                      </li>\n                    ))}\n                  </ul>\n\n                  <Button\n                    className=\"w-full\"\n                    variant={plan.popular ? \"default\" : \"outline\"}\n                  >\n                    Chọn gói này\n                  </Button>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        <section className=\"py-16 bg-muted/30\">\n          <div className=\"container mx-auto px-4 lg:px-8\">\n            <div className=\"max-w-4xl mx-auto\">\n              <h2 className=\"text-3xl font-bold text-foreground mb-8 text-center\">\n                Dịch vụ bổ sung\n              </h2>\n              <Card className=\"p-8\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {additionalServices.map((service, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\"\n                    >\n                      <span className=\"font-medium text-foreground\">\n                        {service.name}\n                      </span>\n                      <span className=\"text-primary font-semibold\">\n                        {service.price}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        <section className=\"py-16\">\n          <div className=\"container mx-auto px-4 lg:px-8\">\n            <div className=\"max-w-3xl mx-auto\">\n              <h2 className=\"text-3xl font-bold text-foreground mb-8 text-center\">\n                Câu hỏi thường gặp\n              </h2>\n              <div className=\"space-y-6\">\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-foreground mb-2\">\n                    Làm sao để thanh toán?\n                  </h3>\n                  <p className=\"text-muted-foreground\">\n                    Bạn có thể thanh toán qua app MetroBike bằng thẻ tín dụng,\n                    ví điện tử (MoMo, ZaloPay) hoặc chuyển khoản ngân hàng.\n                  </p>\n                </Card>\n\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-foreground mb-2\">\n                    Có thể trả xe ở trạm khác không?\n                  </h3>\n                  <p className=\"text-muted-foreground\">\n                    Có, bạn có thể trả xe tại bất kỳ trạm MetroBike nào trên hệ\n                    thống. Không cần trả về trạm ban đầu.\n                  </p>\n                </Card>\n\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-foreground mb-2\">\n                    Nếu xe bị hỏng trong lúc thuê thì sao?\n                  </h3>\n                  <p className=\"text-muted-foreground\">\n                    Hãy liên hệ ngay với bộ phận hỗ trợ qua app. Chúng tôi sẽ hỗ\n                    trợ bạn đổi xe hoặc sửa chữa miễn phí nếu không phải lỗi của\n                    bạn.\n                  </p>\n                </Card>\n\n                <Card className=\"p-6\">\n                  <h3 className=\"font-semibold text-foreground mb-2\">\n                    Có thể hủy gói đã mua không?\n                  </h3>\n                  <p className=\"text-muted-foreground\">\n                    Gói ngày và gói tháng có thể được hoàn tiền trong vòng 24\n                    giờ đầu tiên nếu chưa sử dụng. Vui lòng liên hệ bộ phận chăm\n                    sóc khách hàng.\n                  </p>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      <LandingFooter />\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/staff/bikes/page.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@components/dashboard/dashboard-layout\";\nimport { BikeCard } from \"@components/bikes/bike-card\";\nimport { BikeFilters } from \"@components/bikes/bike-filter\"\nimport { Button } from \"@components/ui/button\";\nimport type { Bike, BikeStatus, BikeType } from \"@custom-types\";\nimport type { User as DetailUser } from \"@custom-types\";\nimport { Plus, Download } from \"lucide-react\";\n\n// Mock data\nconst mockBikes: Bike[] = [\n  {\n    _id: \"1\",\n    name: \"Giant Talon 3\",\n    type: \"mountain\",\n    brand: \"Giant\",\n    model: \"Talon 3 2024\",\n    status: \"available\",\n    price_per_hour: 50000,\n    price_per_day: 300000,\n    image: \"/mountain-bike-trail.png\",\n    description: \"Xe đạp địa hình chất lượng cao, phù hợp mọi địa hình\",\n    features: [\"Phanh đĩa thủy lực\", \"Khung nhôm\", \"27 tốc độ\"],\n    location: \"Chi nhánh Quận 1\",\n    total_rentals: 45,\n    rating: 4.8,\n    created_at: \"2024-01-15T00:00:00Z\",\n    updated_at: \"2024-01-15T00:00:00Z\",\n  },\n  {\n    _id: \"2\",\n    name: \"Trek FX 3\",\n    type: \"hybrid\",\n    brand: \"Trek\",\n    model: \"FX 3 Disc\",\n    status: \"rented\",\n    price_per_hour: 45000,\n    price_per_day: 250000,\n    image: \"/hybrid-bike.jpg\",\n    description: \"Xe đạp hybrid đa năng, phù hợp đi phố và đường trường\",\n    features: [\"Phanh đĩa\", \"Khung carbon\", \"21 tốc độ\"],\n    location: \"Chi nhánh Quận 3\",\n    total_rentals: 67,\n    rating: 4.9,\n    created_at: \"2024-01-10T00:00:00Z\",\n    updated_at: \"2024-01-10T00:00:00Z\",\n  },\n  {\n    _id: \"3\",\n    name: \"VinFast Klara S\",\n    type: \"electric\",\n    brand: \"VinFast\",\n    model: \"Klara S 2024\",\n    status: \"available\",\n    price_per_hour: 80000,\n    price_per_day: 500000,\n    image: \"/electric-bike.png\",\n    description: \"Xe đạp điện hiện đại, tiết kiệm năng lượng\",\n    features: [\"Pin lithium\", \"Tốc độ tối đa 50km/h\", \"Màn hình LCD\"],\n    location: \"Chi nhánh Quận 7\",\n    total_rentals: 89,\n    rating: 4.7,\n    created_at: \"2024-02-01T00:00:00Z\",\n    updated_at: \"2024-02-01T00:00:00Z\",\n  },\n  {\n    _id: \"4\",\n    name: \"Specialized Sirrus\",\n    type: \"city\",\n    brand: \"Specialized\",\n    model: \"Sirrus 2.0\",\n    status: \"maintenance\",\n    price_per_hour: 40000,\n    price_per_day: 220000,\n    image: \"/classic-city-bike.png\",\n    description: \"Xe đạp thành phố thoải mái, dễ điều khiển\",\n    features: [\"Yên êm ái\", \"Giỏ xe\", \"Đèn LED\"],\n    location: \"Chi nhánh Quận 5\",\n    total_rentals: 34,\n    rating: 4.5,\n    created_at: \"2024-01-20T00:00:00Z\",\n    updated_at: \"2024-01-20T00:00:00Z\",\n  },\n  {\n    _id: \"5\",\n    name: \"Cannondale CAAD13\",\n    type: \"road\",\n    brand: \"Cannondale\",\n    model: \"CAAD13 105\",\n    status: \"available\",\n    price_per_hour: 70000,\n    price_per_day: 400000,\n    image: \"/sleek-red-road-bike.png\",\n    description: \"Xe đạp đường trường tốc độ cao, nhẹ và bền\",\n    features: [\"Khung carbon\", \"Shimano 105\", \"Bánh xe 700c\"],\n    location: \"Chi nhánh Quận 2\",\n    total_rentals: 56,\n    rating: 4.9,\n    created_at: \"2024-01-25T00:00:00Z\",\n    updated_at: \"2024-01-25T00:00:00Z\",\n  },\n  {\n    _id: \"6\",\n    name: \"Merida Big Nine\",\n    type: \"mountain\",\n    brand: \"Merida\",\n    model: \"Big Nine 100\",\n    status: \"available\",\n    price_per_hour: 55000,\n    price_per_day: 320000,\n    image: \"/mountain-bike-merida.jpg\",\n    description: \"Xe đạp địa hình bánh lớn 29 inch\",\n    features: [\"Phanh đĩa\", \"Khung nhôm\", \"24 tốc độ\"],\n    location: \"Chi nhánh Quận 1\",\n    total_rentals: 41,\n    rating: 4.6,\n    created_at: \"2024-02-05T00:00:00Z\",\n    updated_at: \"2024-02-05T00:00:00Z\",\n  },\n];\n\nconst mockUser: DetailUser = {\n  _id: \"507f1f77bcf86cd799439011\",\n  fullname: \"Nguyễn Văn Minh\",\n  email: \"minh.nguyen@bikerental.vn\",\n  verify: \"verified\",\n  location: \"Hà Nội, Việt Nam\",\n  username: \"minh_staff\",\n  phone_number: \"+84 912 345 678\",\n  avatar: \"/professional-avatar.png\",\n  role: \"ADMIN\",\n  created_at: \"2024-01-15T08:30:00Z\",\n  updated_at: \"2025-01-06T10:20:00Z\",\n  password: \"\",\n  email_verify_token: \"\",\n  forgot_verify_token: \"\",\n};\n\nexport default function BikesPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<BikeStatus | \"all\">(\"all\");\n  const [typeFilter, setTypeFilter] = useState<BikeType | \"all\">(\"all\");\n\n  const filteredBikes = mockBikes.filter((bike) => {\n    const matchesSearch =\n      bike.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      bike.brand.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus =\n      statusFilter === \"all\" || bike.status === statusFilter;\n    const matchesType = typeFilter === \"all\" || bike.type === typeFilter;\n\n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const handleReset = () => {\n    setSearchQuery(\"\");\n    setStatusFilter(\"all\");\n    setTypeFilter(\"all\");\n  };\n\n  const stats = {\n    total: mockBikes.length,\n    available: mockBikes.filter((b) => b.status === \"available\").length,\n    rented: mockBikes.filter((b) => b.status === \"rented\").length,\n    maintenance: mockBikes.filter((b) => b.status === \"maintenance\").length,\n  };\n\n  return (\n    <DashboardLayout user={mockUser}>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">\n              Quản lý xe đạp\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Quản lý danh sách xe đạp và trạng thái cho thuê\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Button variant=\"outline\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Xuất Excel\n            </Button>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Thêm xe mới\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"bg-card border border-border rounded-lg p-4\">\n            <p className=\"text-sm text-muted-foreground\">Tổng số xe</p>\n            <p className=\"text-2xl font-bold text-foreground mt-1\">\n              {stats.total}\n            </p>\n          </div>\n          <div className=\"bg-card border border-border rounded-lg p-4\">\n            <p className=\"text-sm text-muted-foreground\">Sẵn sàng</p>\n            <p className=\"text-2xl font-bold text-green-500 mt-1\">\n              {stats.available}\n            </p>\n          </div>\n          <div className=\"bg-card border border-border rounded-lg p-4\">\n            <p className=\"text-sm text-muted-foreground\">Đang thuê</p>\n            <p className=\"text-2xl font-bold text-blue-500 mt-1\">\n              {stats.rented}\n            </p>\n          </div>\n          <div className=\"bg-card border border-border rounded-lg p-4\">\n            <p className=\"text-sm text-muted-foreground\">Bảo trì</p>\n            <p className=\"text-2xl font-bold text-orange-500 mt-1\">\n              {stats.maintenance}\n            </p>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <BikeFilters\n          searchQuery={searchQuery}\n          onSearchChange={setSearchQuery}\n          statusFilter={statusFilter}\n          onStatusChange={setStatusFilter}\n          typeFilter={typeFilter}\n          onTypeChange={setTypeFilter}\n          onReset={handleReset}\n        />\n\n        {/* Results */}\n        <div>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Hiển thị {filteredBikes.length} / {mockBikes.length} xe đạp\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredBikes.map((bike) => (\n              <BikeCard\n                key={bike._id}\n                bike={bike}\n                onView={(bike) => console.log(\"[v0] View bike:\", bike._id)}\n                onEdit={(bike) => console.log(\"[v0] Edit bike:\", bike._id)}\n                onDelete={(bike) => console.log(\"[v0] Delete bike:\", bike._id)}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/staff/customers/page.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@components/dashboard/dashboard-layout\";\nimport { RentalTable } from \"@components/rentals/rental-table\";\nimport { RentalFilters } from \"@components/rentals/rental-filters\";\nimport { RentalStats } from \"@components/rentals/rental-stats\";\nimport { Button } from \"@components/ui/button\";\nimport type { Rental, RentalStatus, PaymentStatus } from \"@custom-types\";\nimport type { User as DetailUser } from \"@custom-types\";\nimport { Plus, Download } from \"lucide-react\";\n\n// Mock data\nconst mockRentals: Rental[] = [\n  {\n    _id: \"1\",\n    rental_code: \"RNT-2024-001\",\n    customer_id: \"c1\",\n    customer_name: \"Nguyễn Văn An\",\n    customer_phone: \"0901234567\",\n    customer_email: \"nguyenvanan@email.com\",\n    bike_id: \"1\",\n    bike_name: \"Giant Talon 3\",\n    bike_type: \"Xe đạp địa hình\",\n    start_date: \"2024-06-10T08:00:00Z\",\n    end_date: \"2024-06-10T18:00:00Z\",\n    rental_hours: 10,\n    rental_days: 0,\n    price_per_hour: 50000,\n    price_per_day: 300000,\n    total_amount: 500000,\n    deposit_amount: 200000,\n    payment_status: \"paid\",\n    payment_method: \"card\",\n    status: \"active\",\n    staff_id: \"s1\",\n    staff_name: \"Trần Thị Bình\",\n    created_at: \"2024-06-10T07:30:00Z\",\n    updated_at: \"2024-06-10T07:30:00Z\",\n  },\n  {\n    _id: \"2\",\n    rental_code: \"RNT-2024-002\",\n    customer_id: \"c2\",\n    customer_name: \"Lê Thị Mai\",\n    customer_phone: \"0912345678\",\n    customer_email: \"lethimai@email.com\",\n    bike_id: \"2\",\n    bike_name: \"Trek FX 3\",\n    bike_type: \"Xe đạp hybrid\",\n    start_date: \"2024-06-09T09:00:00Z\",\n    end_date: \"2024-06-11T09:00:00Z\",\n    actual_return_date: \"2024-06-11T08:30:00Z\",\n    rental_hours: 0,\n    rental_days: 2,\n    price_per_hour: 45000,\n    price_per_day: 250000,\n    total_amount: 500000,\n    deposit_amount: 150000,\n    payment_status: \"paid\",\n    payment_method: \"momo\",\n    status: \"completed\",\n    staff_id: \"s1\",\n    staff_name: \"Trần Thị Bình\",\n    created_at: \"2024-06-09T08:30:00Z\",\n    updated_at: \"2024-06-11T08:30:00Z\",\n  },\n  {\n    _id: \"3\",\n    rental_code: \"RNT-2024-003\",\n    customer_id: \"c3\",\n    customer_name: \"Phạm Minh Tuấn\",\n    customer_phone: \"0923456789\",\n    customer_email: \"phamminhtuan@email.com\",\n    bike_id: \"3\",\n    bike_name: \"VinFast Klara S\",\n    bike_type: \"Xe đạp điện\",\n    start_date: \"2024-06-10T14:00:00Z\",\n    end_date: \"2024-06-10T20:00:00Z\",\n    rental_hours: 6,\n    rental_days: 0,\n    price_per_hour: 80000,\n    price_per_day: 500000,\n    total_amount: 480000,\n    deposit_amount: 300000,\n    payment_status: \"pending\",\n    payment_method: \"cash\",\n    status: \"pending\",\n    staff_id: \"s2\",\n    staff_name: \"Hoàng Văn Cường\",\n    created_at: \"2024-06-10T13:45:00Z\",\n    updated_at: \"2024-06-10T13:45:00Z\",\n  },\n  {\n    _id: \"4\",\n    rental_code: \"RNT-2024-004\",\n    customer_id: \"c4\",\n    customer_name: \"Võ Thị Hương\",\n    customer_phone: \"0934567890\",\n    customer_email: \"vothihuong@email.com\",\n    bike_id: \"5\",\n    bike_name: \"Cannondale CAAD13\",\n    bike_type: \"Xe đạp đường trường\",\n    start_date: \"2024-06-08T07:00:00Z\",\n    end_date: \"2024-06-09T19:00:00Z\",\n    rental_hours: 0,\n    rental_days: 1,\n    price_per_hour: 70000,\n    price_per_day: 400000,\n    total_amount: 400000,\n    deposit_amount: 200000,\n    payment_status: \"paid\",\n    payment_method: \"transfer\",\n    status: \"overdue\",\n    notes: \"Khách hàng chưa trả xe\",\n    staff_id: \"s1\",\n    staff_name: \"Trần Thị Bình\",\n    created_at: \"2024-06-08T06:30:00Z\",\n    updated_at: \"2024-06-09T19:00:00Z\",\n  },\n  {\n    _id: \"5\",\n    rental_code: \"RNT-2024-005\",\n    customer_id: \"c5\",\n    customer_name: \"Đặng Quốc Bảo\",\n    customer_phone: \"0945678901\",\n    customer_email: \"dangquocbao@email.com\",\n    bike_id: \"6\",\n    bike_name: \"Merida Big Nine\",\n    bike_type: \"Xe đạp địa hình\",\n    start_date: \"2024-06-07T10:00:00Z\",\n    end_date: \"2024-06-07T16:00:00Z\",\n    actual_return_date: \"2024-06-07T15:45:00Z\",\n    rental_hours: 6,\n    rental_days: 0,\n    price_per_hour: 55000,\n    price_per_day: 320000,\n    total_amount: 330000,\n    deposit_amount: 150000,\n    payment_status: \"paid\",\n    payment_method: \"zalopay\",\n    status: \"completed\",\n    staff_id: \"s2\",\n    staff_name: \"Hoàng Văn Cường\",\n    created_at: \"2024-06-07T09:30:00Z\",\n    updated_at: \"2024-06-07T15:45:00Z\",\n  },\n  {\n    _id: \"6\",\n    rental_code: \"RNT-2024-006\",\n    customer_id: \"c6\",\n    customer_name: \"Bùi Thị Lan\",\n    customer_phone: \"0956789012\",\n    customer_email: \"buithilan@email.com\",\n    bike_id: \"4\",\n    bike_name: \"Specialized Sirrus\",\n    bike_type: \"Xe đạp thành phố\",\n    start_date: \"2024-06-09T11:00:00Z\",\n    end_date: \"2024-06-09T15:00:00Z\",\n    rental_hours: 4,\n    rental_days: 0,\n    price_per_hour: 40000,\n    price_per_day: 220000,\n    total_amount: 160000,\n    deposit_amount: 100000,\n    payment_status: \"refunded\",\n    payment_method: \"card\",\n    status: \"cancelled\",\n    notes: \"Khách hàng hủy do thời tiết xấu\",\n    staff_id: \"s1\",\n    staff_name: \"Trần Thị Bình\",\n    created_at: \"2024-06-09T10:45:00Z\",\n    updated_at: \"2024-06-09T11:15:00Z\",\n  },\n];\n\n// Mock user for DashboardLayout\nconst mockUser: DetailUser = {\n  _id: \"507f1f77bcf86cd799439011\",\n  fullname: \"Nguyễn Văn Minh\",\n  email: \"minh.nguyen@bikerental.vn\",\n  verify: \"verified\",\n  location: \"Hà Nội, Việt Nam\",\n  username: \"minh_staff\",\n  phone_number: \"+84 912 345 678\",\n  avatar: \"/professional-avatar.png\",\n  role: \"ADMIN\",\n  created_at: \"2024-01-15T08:30:00Z\",\n  updated_at: \"2025-01-06T10:20:00Z\",\n  password: \"\",\n  email_verify_token: \"\",\n  forgot_verify_token: \"\",\n};\n\nexport default function RentalsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<RentalStatus | \"all\">(\"all\");\n  const [paymentFilter, setPaymentFilter] = useState<PaymentStatus | \"all\">(\n    \"all\"\n  );\n  const [dateFrom, setDateFrom] = useState(\"\");\n  const [dateTo, setDateTo] = useState(\"\");\n\n  const filteredRentals = mockRentals.filter((rental) => {\n    const matchesSearch =\n      rental.rental_code.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      rental.customer_name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      rental.customer_phone.includes(searchQuery);\n\n    const matchesStatus =\n      statusFilter === \"all\" || rental.status === statusFilter;\n    const matchesPayment =\n      paymentFilter === \"all\" || rental.payment_status === paymentFilter;\n\n    const matchesDateFrom =\n      !dateFrom || new Date(rental.start_date) >= new Date(dateFrom);\n    const matchesDateTo =\n      !dateTo || new Date(rental.start_date) <= new Date(dateTo);\n\n    return (\n      matchesSearch &&\n      matchesStatus &&\n      matchesPayment &&\n      matchesDateFrom &&\n      matchesDateTo\n    );\n  });\n\n  const handleReset = () => {\n    setSearchQuery(\"\");\n    setStatusFilter(\"all\");\n    setPaymentFilter(\"all\");\n    setDateFrom(\"\");\n    setDateTo(\"\");\n  };\n\n  const stats = {\n    pending: mockRentals.filter((r) => r.status === \"pending\").length,\n    active: mockRentals.filter((r) => r.status === \"active\").length,\n    completed: mockRentals.filter((r) => r.status === \"completed\").length,\n    cancelled: mockRentals.filter((r) => r.status === \"cancelled\").length,\n    overdue: mockRentals.filter((r) => r.status === \"overdue\").length,\n    todayRevenue: mockRentals\n      .filter(\n        (r) =>\n          r.payment_status === \"paid\" &&\n          new Date(r.created_at).toDateString() === new Date().toDateString()\n      )\n      .reduce((sum, r) => sum + r.total_amount, 0),\n    totalRevenue: mockRentals\n      .filter((r) => r.payment_status === \"paid\")\n      .reduce((sum, r) => sum + r.total_amount, 0),\n  };\n\n  return (\n    <DashboardLayout user={mockUser}>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">\n              Quản lý đơn thuê\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Theo dõi và quản lý các đơn thuê xe đạp\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Button variant=\"outline\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Xuất Excel\n            </Button>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Tạo đơn mới\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats */}\n        <RentalStats stats={stats} />\n\n        {/* Filters */}\n        <RentalFilters\n          searchQuery={searchQuery}\n          onSearchChange={setSearchQuery}\n          statusFilter={statusFilter}\n          onStatusChange={setStatusFilter}\n          paymentFilter={paymentFilter}\n          onPaymentChange={setPaymentFilter}\n          dateFrom={dateFrom}\n          onDateFromChange={setDateFrom}\n          dateTo={dateTo}\n          onDateToChange={setDateTo}\n          onReset={handleReset}\n        />\n\n        {/* Results */}\n        <div>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Hiển thị {filteredRentals.length} / {mockRentals.length} đơn thuê\n          </p>\n          <RentalTable\n            rentals={filteredRentals}\n            onView={(rental) => console.log(\"[v0] View rental:\", rental._id)}\n            onEdit={(rental) => console.log(\"[v0] Edit rental:\", rental._id)}\n            onComplete={(rental) =>\n              console.log(\"[v0] Complete rental:\", rental._id)\n            }\n            onCancel={(rental) =>\n              console.log(\"[v0] Cancel rental:\", rental._id)\n            }\n          />\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/staff/layout.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport { useAuth } from \"@/providers/auth-providers\";\nimport { clearTokens } from \"@/utils/tokenManager\";\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport Image from \"next/image\";\ninterface StaffLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function StaffLayout({ children }: StaffLayoutProps) {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const router = useRouter();\n  const [showUnauthorized, setShowUnauthorized] = useState(false);\n\n  useEffect(() => {\n    if (isLoading) return;\n    \n    if (!isAuthenticated || !user || user.role !== \"STAFF\") {\n      clearTokens();\n      setShowUnauthorized(true);\n      \n      // Delay 3 giây trước khi navigate\n      const timer = setTimeout(() => {\n        router.push(\"/auth/login\");\n      }, 3000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [isAuthenticated, user, isLoading, router]);\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-16 w-16 border-4 border-blue-200 border-t-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 font-medium\">Đang kiểm tra quyền truy cập...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (showUnauthorized) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50\">\n        <div className=\"max-w-2xl mx-auto px-6\">\n          <div className=\"bg-white rounded-3xl shadow-2xl overflow-hidden transform hover:scale-105 transition-all duration-300\">\n            {/* Header với gradient */}\n            <div className=\"bg-gradient-to-r from-red-500 to-orange-500 h-2\"></div>\n            \n            <div className=\"p-8 text-center\">\n              {/* Ảnh 401 với shadow và animation */}\n              <div className=\"mb-8 relative\">\n                <div className=\"absolute inset-0 bg-red-100 rounded-2xl blur-xl opacity-50 animate-pulse\"></div>\n                <Image\n                  src=\"/401-status-code.png\"\n                  alt=\"Unauthorized access - 401 status code\"\n                  width={300}\n                  height={300}\n                  className=\"relative z-10 mx-auto rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300\"\n                  priority\n                />\n              </div>\n\n              {/* Content với spacing tốt hơn */}\n              <div className=\"space-y-6\">\n                <div>\n                  <h2 className=\"text-3xl font-bold text-gray-900 mb-3\">\n                    🚫 Truy cập bị từ chối\n                  </h2>\n                  <div className=\"w-20 h-1 bg-gradient-to-r from-red-500 to-orange-500 mx-auto rounded-full\"></div>\n                </div>\n\n                <p className=\"text-gray-600 text-lg leading-relaxed max-w-md mx-auto\">\n                  Bạn không có quyền truy cập vào trang này. Chỉ \n                  <span className=\"font-semibold text-orange-600\"> nhân viên (Staff) </span>\n                  mới có thể truy cập khu vực này.\n                </p>\n\n                {/* Countdown với design đẹp hơn */}\n                <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-100\">\n                  <div className=\"flex items-center justify-center space-x-3\">\n                    <div className=\"relative\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-3 border-blue-200\"></div>\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-3 border-t-blue-600 absolute top-0 left-0\"></div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-blue-700 font-semibold text-lg\">\n                        🔄 Đang chuyển hướng...\n                      </div>\n                      <div className=\"text-blue-600 text-sm\">\n                        Sẽ chuyển về trang đăng nhập trong vài giây\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Tips */}\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4\">\n                  <p className=\"text-yellow-800 text-sm\">\n                    💡 <strong>Gợi ý:</strong> Hãy đăng nhập bằng tài khoản Staff để truy cập trang này.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <main>\n        <div>\n          <div>\n            {children}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/staff/page.tsx:\n"
      },
      {
        "text": "\"use client\";\nimport { ProfileHeader } from \"@/components/dashboard/profile-header\";\nimport { StatsCard } from \"@/components/dashboard/stats-card\";\nimport { RentalChart } from \"@/components/dashboard/rental-chart\";\nimport { RecentActivity } from \"@/components/dashboard/recent-activity\";\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\";\nimport { Bike, TrendingUp, Users, DollarSign } from \"lucide-react\";\nimport { useAuth } from \"@/providers/auth-providers\";\nimport { Progress } from \"@/components/ui/progress\";\nexport default function DashboardPage() {\n  const { user } = useAuth();\n  if (!user) {\n    return <div><Progress /></div>;\n  }\n  return (\n    <DashboardLayout user={user}>\n      <div className=\"space-y-8\">\n        <section>\n          <ProfileHeader user={user} />\n        </section>\n        <section>\n          <h2 className=\"text-2xl font-bold text-foreground mb-4\">\n            Thống kê tổng quan\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <StatsCard\n              title=\"Tổng lượt thuê hôm nay\"\n              value=\"127\"\n              change=\"+12% so với hôm qua\"\n              changeType=\"positive\"\n              icon={Bike}\n            />\n            <StatsCard\n              title=\"Xe đang cho thuê\"\n              value=\"45\"\n              change=\"68% tổng số xe\"\n              changeType=\"neutral\"\n              icon={TrendingUp}\n            />\n            <StatsCard\n              title=\"Khách hàng mới\"\n              value=\"23\"\n              change=\"+8% tuần này\"\n              changeType=\"positive\"\n              icon={Users}\n            />\n            <StatsCard\n              title=\"Doanh thu hôm nay\"\n              value=\"12.5M ₫\"\n              change=\"+15% so với hôm qua\"\n              changeType=\"positive\"\n              icon={DollarSign}\n            />\n          </div>\n        </section>\n\n        <section className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2\">\n            <RentalChart />\n          </div>\n          <div className=\"lg:col-span-1\">\n            <RecentActivity />\n          </div>\n        </section>\n      </div>\n    </DashboardLayout>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/staff/profile/change-password/page.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Eye, EyeOff, Lock, ArrowLeft, Shield, User, Key } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/providers/auth-providers\";\nimport { useAuthActions } from \"@/hooks/useAuthAction\";\nimport { changePasswordSchema, ChangePasswordSchemaFormData } from \"@/schemas/authSchema\";\nimport Link from \"next/link\";\nimport { Progress } from \"@radix-ui/react-progress\";\n\nexport default function ChangePasswordPage() {\n  const { user } = useAuth();\n  const { changePassword } = useAuthActions();\n  const [showPasswords, setShowPasswords] = useState({\n    oldPassword: false,\n    newPassword: false,\n    confirmPassword: false,\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n    reset,\n  } = useForm<ChangePasswordSchemaFormData>({\n    resolver: zodResolver(changePasswordSchema),\n  });\n\n  const togglePasswordVisibility = (field: keyof typeof showPasswords) => {\n    setShowPasswords((prev) => ({\n      ...prev,\n      [field]: !prev[field],\n    }));\n  };\n\n  const onSubmit = async (data: ChangePasswordSchemaFormData) => {\n    try {\n      changePassword(data.old_password, data.password, data.confirm_password);\n      reset();\n    } catch (error) {\n      console.error(\"Error changing password:\", error);\n    }\n  };\n\n\n  if (!user) {\n    return <div className=\"flex items-center justify-center h-screen\"><Progress /></div>;\n  }\n\n  return (\n    <DashboardLayout user={user}>\n      <div className=\"space-y-6 max-w-4xl mx-auto\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-4\">\n            <Link\n              href=\"/staff/profile\"\n              className=\"p-2 hover:bg-accent rounded-lg transition-colors\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Link>\n            <div className=\"flex-1\">\n              <h1 className=\"text-3xl font-bold text-foreground\">\n                Thay đổi mật khẩu\n              </h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Cập nhật mật khẩu để bảo mật tài khoản của bạn\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-card border border-border rounded-lg p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Trạng thái bảo mật</p>\n                  <p className=\"font-semibold text-foreground\">\n                    {user.verify === \"VERIFIED\" ? \"Đã xác thực\" : \"Cần xác thực\"}\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-card border border-border rounded-lg p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center\">\n                  <User className=\"w-5 h-5 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Vai trò</p>\n                  <p className=\"font-semibold text-foreground\">Nhân viên</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-card border border-border rounded-lg p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-amber-100 dark:bg-amber-900/20 rounded-full flex items-center justify-center\">\n                  <Key className=\"w-5 h-5 text-amber-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Lần cuối đổi</p>\n                  <p className=\"font-semibold text-foreground\">\n                    {new Date(user.updated_at).toLocaleDateString(\"vi-VN\")}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-card border border-border rounded-xl p-8\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-xl font-semibold text-foreground mb-2\">\n                  Cập nhật mật khẩu\n                </h2>\n                <p className=\"text-sm text-muted-foreground\">\n                  Vui lòng nhập mật khẩu hiện tại và mật khẩu mới để cập nhật bảo mật tài khoản\n                </p>\n              </div>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label\n                  htmlFor=\"old_password\"\n                  className=\"text-sm font-medium text-foreground\"\n                >\n                  Mật khẩu hiện tại\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"old_password\"\n                    type={showPasswords.oldPassword ? \"text\" : \"password\"}\n                    {...register(\"old_password\")}\n                    placeholder=\"Nhập mật khẩu hiện tại\"\n                    className={cn(\n                      \"bg-background border-border pr-10\",\n                      errors.old_password && \"border-destructive\"\n                    )}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => togglePasswordVisibility(\"oldPassword\")}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                  >\n                    {showPasswords.oldPassword ? (\n                      <EyeOff className=\"w-4 h-4\" />\n                    ) : (\n                      <Eye className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n                {errors.old_password && (\n                  <p className=\"text-sm text-destructive\">\n                    {errors.old_password.message}\n                  </p>\n                )}\n              </div>\n\n              {/* New Password */}\n              <div className=\"space-y-2\">\n                <Label\n                  htmlFor=\"password\"\n                  className=\"text-sm font-medium text-foreground\"\n                >\n                  Mật khẩu mới\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPasswords.newPassword ? \"text\" : \"password\"}\n                    {...register(\"password\")}\n                    placeholder=\"Nhập mật khẩu mới\"\n                    className={cn(\n                      \"bg-background border-border pr-10\",\n                      errors.password && \"border-destructive\"\n                    )}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => togglePasswordVisibility(\"newPassword\")}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                  >\n                    {showPasswords.newPassword ? (\n                      <EyeOff className=\"w-4 h-4\" />\n                    ) : (\n                      <Eye className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n                {errors.password && (\n                  <p className=\"text-sm text-destructive\">\n                    {errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Confirm Password */}\n              <div className=\"space-y-2\">\n                <Label\n                  htmlFor=\"confirm_password\"\n                  className=\"text-sm font-medium text-foreground\"\n                >\n                  Xác nhận mật khẩu mới\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirm_password\"\n                    type={showPasswords.confirmPassword ? \"text\" : \"password\"}\n                    {...register(\"confirm_password\")}\n                    placeholder=\"Nhập lại mật khẩu mới\"\n                    className={cn(\n                      \"bg-background border-border pr-10\",\n                      errors.confirm_password && \"border-destructive\"\n                    )}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => togglePasswordVisibility(\"confirmPassword\")}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                  >\n                    {showPasswords.confirmPassword ? (\n                      <EyeOff className=\"w-4 h-4\" />\n                    ) : (\n                      <Eye className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n                {errors.confirm_password && (\n                  <p className=\"text-sm text-destructive\">\n                    {errors.confirm_password.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Submit Button */}\n              <div className=\"flex gap-3 pt-6 border-t border-border\">\n                <Link href=\"/staff/profile\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"bg-transparent\"\n                  >\n                    Hủy\n                  </Button>\n                </Link>\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"bg-primary hover:bg-primary/90 gap-2\"\n                >\n                  <Lock className=\"w-4 h-4\" />\n                  {isSubmitting ? \"Đang cập nhật...\" : \"Cập nhật mật khẩu\"}\n                </Button>\n              </div>\n            </form>\n          </div>\n          </div>\n\n          <div className=\"space-y-6\">\n            <div className=\"bg-card border border-border rounded-xl p-6\">\n              <div className=\"flex items-center gap-4 mb-4\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <Lock className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-foreground\">Bảo mật tài khoản</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {user.email}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-3 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Vai trò:</span>\n                  <span className=\"font-medium text-foreground\">\n                    Nhân viên\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Trạng thái:</span>\n                  <span className={`font-medium ${user.verify === \"VERIFIED\" ? \"text-green-600\" : \"text-amber-600\"}`}>\n                    {user.verify === \"VERIFIED\" ? \"Đã xác thực\" : \"Chưa xác thực\"}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Lần cuối cập nhật:</span>\n                  <span className=\"font-medium text-foreground\">\n                    {new Date(user.updated_at).toLocaleDateString(\"vi-VN\")}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-card border border-border rounded-xl p-6\">\n              <div className=\"flex items-center gap-3 mb-4\">\n                <div className=\"w-8 h-8 bg-amber-100 dark:bg-amber-900/20 rounded-full flex items-center justify-center\">\n                  <span className=\"text-lg\">💡</span>\n                </div>\n                <h4 className=\"font-semibold text-foreground\">Lời khuyên bảo mật</h4>\n              </div>\n              \n              <ul className=\"space-y-3 text-sm text-muted-foreground\">\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Sử dụng mật khẩu mạnh với ít nhất 8 ký tự</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Kết hợp chữ hoa, chữ thường, số và ký tự đặc biệt</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Không sử dụng thông tin cá nhân dễ đoán</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Thay đổi mật khẩu định kỳ để đảm bảo an toàn</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Không chia sẻ mật khẩu với bất kỳ ai</span>\n                </li>\n              </ul>\n            </div>\n\n            {/* Password Strength Indicator */}\n            <div className=\"bg-card border border-border rounded-xl p-6\">\n              <h4 className=\"font-semibold text-foreground mb-4 flex items-center gap-2\">\n                <span className=\"text-lg\">🔐</span>\n                Mức độ bảo mật\n              </h4>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                  <span className=\"text-sm text-muted-foreground\">Yếu</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-amber-500 rounded-full\"></div>\n                  <span className=\"text-sm text-muted-foreground\">Trung bình</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-sm text-muted-foreground\">Mạnh</span>\n                </div>\n              </div>\n              \n              <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <p className=\"text-xs text-blue-600 dark:text-blue-400\">\n                  Mật khẩu mạnh giúp bảo vệ tài khoản khỏi các cuộc tấn công mạng\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/staff/profile/page.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport type React from \"react\";\n\nimport { useEffect, useState } from \"react\";\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\";\nimport type { DetailUser } from \"@/services/authService\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Camera, Save, X, Mail } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/providers/auth-providers\";\nimport { Progress } from \"@radix-ui/react-progress\";\nimport { useAuthActions } from \"@/hooks/useAuthAction\";\nimport Image from \"next/image\";\nimport { UpdateProfileSchemaFormData } from \"@/schemas/authSchema\";\nimport { clearTokens } from \"@/utils/tokenManager\";\nimport Link from \"next/link\";\nexport default function ProfilePage() {\n  const { user, updateProfile  } = useAuth();\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [data,setData] = useState<DetailUser | null>(null);\n  const [formData, setFormData] = useState<DetailUser>(() => user || {} as DetailUser);\n  const [avatarPreview, setAvatarPreview] = useState(user?.avatar ?? \"\");\n  const { resendVerifyEmail } = useAuthActions();\n  useEffect(() => {\n    if (user) {\n      setData(user);\n      setFormData(user as DetailUser);\n      setAvatarPreview(user.avatar ?? \"\");\n      console.log(user);\n    }\n  }, [user]);\n  if (!user || !data) {\n    return <div><Progress /></div>;\n  }\n  const handleInputChange = (field: keyof DetailUser, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setAvatarPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };  \n  const handleSave = () => {\n    if (!user) return;\n    const fields: (keyof UpdateProfileSchemaFormData)[] = [\n      \"fullname\",\n      \"username\",\n      \"phone_number\",\n      \"location\",\n      \"avatar\",\n    ];\n\n    const updatedData = fields.reduce((acc, field) => {\n      const newValue = field === \"avatar\" ? avatarPreview : formData[field];\n      const oldValue = user[field as keyof DetailUser] ?? \"\";\n\n      if (newValue !== oldValue) {\n        acc[field] = newValue || \"\";\n      }\n      return acc;\n    }, {} as UpdateProfileSchemaFormData);\n\n    // Nếu có field nào thay đổi mới gọi API\n    if (Object.keys(updatedData).length > 0) {\n      updateProfile(updatedData);\n    }\n\n    setIsEditing(false);\n  };\n\n  const handleCancel = () => {\n    if (data) {\n      setFormData(data as DetailUser);\n      setAvatarPreview(data.avatar || \"\");\n    }\n    setIsEditing(false);\n  };\n  const handleResendVerifyEmail = () => {\n    if (formData?.verify === \"VERIFIED\") {\n      return;\n    }\n    resendVerifyEmail();\n  };\n  if (user.role !== \"STAFF\") {\n    clearTokens();\n    window.location.href = \"/auth/login\";\n    return null;\n  }\n    return (\n      <DashboardLayout user={data}>\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">\n                Hồ sơ cá nhân\n              </h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Quản lý thông tin tài khoản của bạn\n              </p>\n            </div>\n            {!isEditing ? (\n              <Button\n                onClick={() => setIsEditing(true)}\n                className=\"bg-primary hover:bg-primary/90\"\n              >\n                Chỉnh sửa hồ sơ\n              </Button>\n            ) : (\n              <div className=\"flex gap-2\">\n                <Button\n                  onClick={handleCancel}\n                  variant=\"outline\"\n                  className=\"gap-2 bg-transparent\"\n                >\n                  <X className=\"w-4 h-4\" />\n                  Hủy\n                </Button>\n                <Button\n                  onClick={() => handleSave()}\n                  className=\"bg-primary hover:bg-primary/90 gap-2\"\n                >\n                  <Save className=\"w-4 h-4\" />\n                  Lưu thay đổi\n                </Button>\n              </div>\n            )}\n          </div>\n\n          <div className=\"bg-card border border-border rounded-xl p-8\">\n            <div className=\"flex flex-col md:flex-row gap-8\">\n              <div className=\"flex flex-col items-center gap-4\">\n                <div className=\"relative group\">\n                  <div className=\"w-32 h-32 rounded-full overflow-hidden border-4 border-primary/20\">\n                    <Image\n                      src={avatarPreview || \"/placeholder.svg\"}\n                      alt=\"Avatar\"\n                      className=\"w-full h-full object-cover\"\n                      width={128}\n                      height={128}\n                    />\n                  </div>\n                  {isEditing && (\n                    <label\n                      htmlFor=\"avatar-upload\"\n                      className=\"absolute inset-0 flex items-center justify-center bg-black/50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer\"\n                    >\n                      <Camera className=\"w-8 h-8 text-white\" />\n                      <input\n                        id=\"avatar-upload\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                        onChange={handleAvatarChange}\n                      />\n                    </label>\n                  )}\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {formData?.fullname || \"Chưa có tên\"}\n                  </p>\n                  <p\n                    className={cn(\n                      \"text-xs px-2 py-1 rounded-full inline-block mt-1\",\n                      formData?.role === \"ADMIN\"\n                        ? \"bg-primary/20 text-primary\"\n                        : \"bg-accent/20 text-accent-foreground\"\n                    )}\n                  >\n                    {formData?.role === \"ADMIN\" ? \"Quản trị viên\" : \"Nhân viên\"}\n                  </p>\n                </div>\n              </div>\n\n              {/* Form Section */}\n              <div className=\"flex-1 space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label\n                      htmlFor=\"fullname\"\n                      className=\"text-sm font-medium text-foreground\"\n                    >\n                      Họ và tên\n                    </Label>\n                    <Input\n                      id=\"fullname\"\n                      value={formData?.fullname || \"\"}\n                      onChange={(e) =>\n                        handleInputChange(\"fullname\", e.target.value)\n                      }\n                      disabled={!isEditing}\n                      className={cn(\n                        \"bg-background border-border\",\n                        !isEditing && \"opacity-70 cursor-not-allowed\"\n                      )}\n                    />\n                  </div>\n\n                  {/* Username */}\n                  <div className=\"space-y-2\">\n                    <Label\n                      htmlFor=\"username\"\n                      className=\"text-sm font-medium text-foreground\"\n                    >\n                      Tên đăng nhập\n                    </Label>\n                    <Input\n                      id=\"username\"\n                      value={formData?.username || \"\"}\n                      onChange={(e) =>\n                        handleInputChange(\"username\", e.target.value)\n                      }\n                      disabled={!isEditing}\n                      className={cn(\n                        \"bg-background border-border\",\n                        !isEditing && \"opacity-70 cursor-not-allowed\"\n                      )}\n                    />\n                  </div>\n\n                  {/* Email */}\n                  <div className=\"space-y-2\">\n                    <Label\n                      htmlFor=\"email\"\n                      className=\"text-sm font-medium text-foreground\"\n                    >\n                      Email\n                    </Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData?.email || \"\"}\n                      onChange={(e) =>\n                        handleInputChange(\"email\", e.target.value)\n                      }\n                      disabled\n                      className={cn(\n                        \"bg-background border-border\",\n                        !isEditing && \"opacity-70 cursor-not-allowed\"\n                      )}\n                    />\n                  </div>\n\n                  {/* Phone Number */}\n                  <div className=\"space-y-2\">\n                    <Label\n                      htmlFor=\"phone\"\n                      className=\"text-sm font-medium text-foreground\"\n                    >\n                      Số điện thoại\n                    </Label>\n                    <Input\n                      id=\"phone\"\n                      value={formData?.phone_number || \"\"}\n                      onChange={(e) =>\n                        handleInputChange(\"phone_number\", e.target.value)\n                      }\n                      disabled={!isEditing}\n                      className={cn(\n                        \"bg-background border-border\",\n                        !isEditing && \"opacity-70 cursor-not-allowed\"\n                      )}\n                    />\n                  </div>\n\n                  {/* Location */}\n                  <div className=\"space-y-2 md:col-span-2\">\n                    <Label\n                      htmlFor=\"location\"\n                      className=\"text-sm font-medium text-foreground\"\n                    >\n                      Địa chỉ\n                    </Label>\n                    <Input\n                      id=\"location\"\n                      value={formData?.location || \"\"}\n                      onChange={(e) =>\n                        handleInputChange(\"location\", e.target.value)\n                      }\n                      disabled={!isEditing}\n                      className={cn(\n                        \"bg-background border-border\",\n                        !isEditing && \"opacity-70 cursor-not-allowed\"\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/* Account Info */}\n                <div className=\"pt-6 border-t border-border\">\n                  <h3 className=\"text-sm font-semibold text-foreground mb-4\">\n                    Thông tin tài khoản\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-muted-foreground\">\n                        Trạng thái xác thực\n                      </p>\n                      <p\n                        className={cn(\n                          \"font-medium mt-1\",\n                          formData?.verify === \"VERIFIED\"\n                            ? \"text-accent\"\n                            : \"text-destructive\"\n                        )}\n                      >\n                        {formData?.verify === \"VERIFIED\"\n                          ? \"Đã xác thực\"\n                          : \"Chưa xác thực\"}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">\n                        Ngày tạo tài khoản\n                      </p>\n                      <p className=\"font-medium text-foreground mt-1\">\n                        {formData?.created_at\n                          ? new Date(formData.created_at).toLocaleDateString(\n                              \"vi-VN\"\n                            )\n                          : \"Chưa có thông tin\"}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">Cập nhật lần cuối</p>\n                      <p className=\"font-medium text-foreground mt-1\">\n                        {formData?.updated_at\n                          ? new Date(formData.updated_at).toLocaleDateString(\n                              \"vi-VN\"\n                            )\n                          : \"Chưa có thông tin\"}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">ID tài khoản</p>\n                      <p className=\"font-medium text-foreground mt-1 font-mono text-xs\">\n                        {formData?._id || \"Chưa có ID\"}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Security Section */}\n          <div className=\"bg-card border border-border rounded-xl p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n              Bảo mật\n            </h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium text-foreground\">Đổi mật khẩu</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Cập nhật mật khẩu của bạn\n                  </p>\n                </div>\n                <Link href=\"/staff/profile/change-password\">\n                  <Button variant=\"outline\">Thay đổi</Button>\n                </Link>\n              </div>\n              <div className=\"flex items-center justify-between pt-4 border-t border-border\">\n                <div>\n                  <p className=\"font-medium text-foreground\">Xác thực email</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Tăng cường bảo mật tài khoản\n                  </p>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => handleResendVerifyEmail()}\n                  className=\"gap-2\"\n                  disabled={formData?.verify === \"VERIFIED\"}\n                >\n                  <Mail className=\"w-4 h-4\" />\n                  {formData?.verify === \"VERIFIED\"\n                    ? \"Đã xác thực\"\n                    : \"Gửi email xác thực\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/staff/rentals/page.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport { useState } from \"react\";\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\";\nimport { RentalTable } from \"@/components/rentals/rental-table\";\nimport { RentalFilters } from \"@/components/rentals/rental-filters\";\nimport { RentalStats } from \"@/components/rentals/rental-stats\";\nimport { Button } from \"@/components/ui/button\";\nimport type { Rental, RentalStatus, PaymentStatus } from \"@custom-types\";\nimport type { User as DetailUser } from \"@custom-types\";\nimport { Plus, Download } from \"lucide-react\";\n\n// Mock data\nconst mockRentals: Rental[] = [\n  {\n    _id: \"1\",\n    rental_code: \"RNT-2024-001\",\n    customer_id: \"c1\",\n    customer_name: \"Nguyễn Văn An\",\n    customer_phone: \"0901234567\",\n    customer_email: \"nguyenvanan@email.com\",\n    bike_id: \"1\",\n    bike_name: \"Giant Talon 3\",\n    bike_type: \"Xe đạp địa hình\",\n    start_date: \"2024-06-10T08:00:00Z\",\n    end_date: \"2024-06-10T18:00:00Z\",\n    rental_hours: 10,\n    rental_days: 0,\n    price_per_hour: 50000,\n    price_per_day: 300000,\n    total_amount: 500000,\n    deposit_amount: 200000,\n    payment_status: \"paid\",\n    payment_method: \"card\",\n    status: \"active\",\n    staff_id: \"s1\",\n    staff_name: \"Trần Thị Bình\",\n    created_at: \"2024-06-10T07:30:00Z\",\n    updated_at: \"2024-06-10T07:30:00Z\",\n  },\n  {\n    _id: \"2\",\n    rental_code: \"RNT-2024-002\",\n    customer_id: \"c2\",\n    customer_name: \"Lê Thị Mai\",\n    customer_phone: \"0912345678\",\n    customer_email: \"lethimai@email.com\",\n    bike_id: \"2\",\n    bike_name: \"Trek FX 3\",\n    bike_type: \"Xe đạp hybrid\",\n    start_date: \"2024-06-09T09:00:00Z\",\n    end_date: \"2024-06-11T09:00:00Z\",\n    actual_return_date: \"2024-06-11T08:30:00Z\",\n    rental_hours: 0,\n    rental_days: 2,\n    price_per_hour: 45000,\n    price_per_day: 250000,\n    total_amount: 500000,\n    deposit_amount: 150000,\n    payment_status: \"paid\",\n    payment_method: \"momo\",\n    status: \"completed\",\n    staff_id: \"s1\",\n    staff_name: \"Trần Thị Bình\",\n    created_at: \"2024-06-09T08:30:00Z\",\n    updated_at: \"2024-06-11T08:30:00Z\",\n  },\n  {\n    _id: \"3\",\n    rental_code: \"RNT-2024-003\",\n    customer_id: \"c3\",\n    customer_name: \"Phạm Minh Tuấn\",\n    customer_phone: \"0923456789\",\n    customer_email: \"phamminhtuan@email.com\",\n    bike_id: \"3\",\n    bike_name: \"VinFast Klara S\",\n    bike_type: \"Xe đạp điện\",\n    start_date: \"2024-06-10T14:00:00Z\",\n    end_date: \"2024-06-10T20:00:00Z\",\n    rental_hours: 6,\n    rental_days: 0,\n    price_per_hour: 80000,\n    price_per_day: 500000,\n    total_amount: 480000,\n    deposit_amount: 300000,\n    payment_status: \"pending\",\n    payment_method: \"cash\",\n    status: \"pending\",\n    staff_id: \"s2\",\n    staff_name: \"Hoàng Văn Cường\",\n    created_at: \"2024-06-10T13:45:00Z\",\n    updated_at: \"2024-06-10T13:45:00Z\",\n  },\n  {\n    _id: \"4\",\n    rental_code: \"RNT-2024-004\",\n    customer_id: \"c4\",\n    customer_name: \"Võ Thị Hương\",\n    customer_phone: \"0934567890\",\n    customer_email: \"vothihuong@email.com\",\n    bike_id: \"5\",\n    bike_name: \"Cannondale CAAD13\",\n    bike_type: \"Xe đạp đường trường\",\n    start_date: \"2024-06-08T07:00:00Z\",\n    end_date: \"2024-06-09T19:00:00Z\",\n    rental_hours: 0,\n    rental_days: 1,\n    price_per_hour: 70000,\n    price_per_day: 400000,\n    total_amount: 400000,\n    deposit_amount: 200000,\n    payment_status: \"paid\",\n    payment_method: \"transfer\",\n    status: \"overdue\",\n    notes: \"Khách hàng chưa trả xe\",\n    staff_id: \"s1\",\n    staff_name: \"Trần Thị Bình\",\n    created_at: \"2024-06-08T06:30:00Z\",\n    updated_at: \"2024-06-09T19:00:00Z\",\n  },\n  {\n    _id: \"5\",\n    rental_code: \"RNT-2024-005\",\n    customer_id: \"c5\",\n    customer_name: \"Đặng Quốc Bảo\",\n    customer_phone: \"0945678901\",\n    customer_email: \"dangquocbao@email.com\",\n    bike_id: \"6\",\n    bike_name: \"Merida Big Nine\",\n    bike_type: \"Xe đạp địa hình\",\n    start_date: \"2024-06-07T10:00:00Z\",\n    end_date: \"2024-06-07T16:00:00Z\",\n    actual_return_date: \"2024-06-07T15:45:00Z\",\n    rental_hours: 6,\n    rental_days: 0,\n    price_per_hour: 55000,\n    price_per_day: 320000,\n    total_amount: 330000,\n    deposit_amount: 150000,\n    payment_status: \"paid\",\n    payment_method: \"zalopay\",\n    status: \"completed\",\n    staff_id: \"s2\",\n    staff_name: \"Hoàng Văn Cường\",\n    created_at: \"2024-06-07T09:30:00Z\",\n    updated_at: \"2024-06-07T15:45:00Z\",\n  },\n  {\n    _id: \"6\",\n    rental_code: \"RNT-2024-006\",\n    customer_id: \"c6\",\n    customer_name: \"Bùi Thị Lan\",\n    customer_phone: \"0956789012\",\n    customer_email: \"buithilan@email.com\",\n    bike_id: \"4\",\n    bike_name: \"Specialized Sirrus\",\n    bike_type: \"Xe đạp thành phố\",\n    start_date: \"2024-06-09T11:00:00Z\",\n    end_date: \"2024-06-09T15:00:00Z\",\n    rental_hours: 4,\n    rental_days: 0,\n    price_per_hour: 40000,\n    price_per_day: 220000,\n    total_amount: 160000,\n    deposit_amount: 100000,\n    payment_status: \"refunded\",\n    payment_method: \"card\",\n    status: \"cancelled\",\n    notes: \"Khách hàng hủy do thời tiết xấu\",\n    staff_id: \"s1\",\n    staff_name: \"Trần Thị Bình\",\n    created_at: \"2024-06-09T10:45:00Z\",\n    updated_at: \"2024-06-09T11:15:00Z\",\n  },\n];\n\n// Mock user for DashboardLayout\nconst mockUser: DetailUser = {\n  _id: \"507f1f77bcf86cd799439011\",\n  fullname: \"Nguyễn Văn Minh\",\n  email: \"minh.nguyen@bikerental.vn\",\n  verify: \"verified\",\n  location: \"Hà Nội, Việt Nam\",\n  username: \"minh_staff\",\n  phone_number: \"+84 912 345 678\",\n  avatar: \"/professional-avatar.png\",\n  role: \"ADMIN\",\n  created_at: \"2024-01-15T08:30:00Z\",\n  updated_at: \"2025-01-06T10:20:00Z\",\n  password: \"\",\n  email_verify_token: \"\",\n  forgot_verify_token: \"\",\n};\n\nexport default function RentalsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<RentalStatus | \"all\">(\"all\");\n  const [paymentFilter, setPaymentFilter] = useState<PaymentStatus | \"all\">(\n    \"all\"\n  );\n  const [dateFrom, setDateFrom] = useState(\"\");\n  const [dateTo, setDateTo] = useState(\"\");\n\n  const filteredRentals = mockRentals.filter((rental) => {\n    const matchesSearch =\n      rental.rental_code.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      rental.customer_name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      rental.customer_phone.includes(searchQuery);\n\n    const matchesStatus =\n      statusFilter === \"all\" || rental.status === statusFilter;\n    const matchesPayment =\n      paymentFilter === \"all\" || rental.payment_status === paymentFilter;\n\n    const matchesDateFrom =\n      !dateFrom || new Date(rental.start_date) >= new Date(dateFrom);\n    const matchesDateTo =\n      !dateTo || new Date(rental.start_date) <= new Date(dateTo);\n\n    return (\n      matchesSearch &&\n      matchesStatus &&\n      matchesPayment &&\n      matchesDateFrom &&\n      matchesDateTo\n    );\n  });\n\n  const handleReset = () => {\n    setSearchQuery(\"\");\n    setStatusFilter(\"all\");\n    setPaymentFilter(\"all\");\n    setDateFrom(\"\");\n    setDateTo(\"\");\n  };\n\n  const stats = {\n    pending: mockRentals.filter((r) => r.status === \"pending\").length,\n    active: mockRentals.filter((r) => r.status === \"active\").length,\n    completed: mockRentals.filter((r) => r.status === \"completed\").length,\n    cancelled: mockRentals.filter((r) => r.status === \"cancelled\").length,\n    overdue: mockRentals.filter((r) => r.status === \"overdue\").length,\n    todayRevenue: mockRentals\n      .filter(\n        (r) =>\n          r.payment_status === \"paid\" &&\n          new Date(r.created_at).toDateString() === new Date().toDateString()\n      )\n      .reduce((sum, r) => sum + r.total_amount, 0),\n    totalRevenue: mockRentals\n      .filter((r) => r.payment_status === \"paid\")\n      .reduce((sum, r) => sum + r.total_amount, 0),\n  };\n\n  return (\n    <DashboardLayout user={mockUser}>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">\n              Quản lý đơn thuê\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Theo dõi và quản lý các đơn thuê xe đạp\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Button variant=\"outline\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Xuất Excel\n            </Button>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Tạo đơn mới\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats */}\n        <RentalStats stats={stats} />\n\n        {/* Filters */}\n        <RentalFilters\n          searchQuery={searchQuery}\n          onSearchChange={setSearchQuery}\n          statusFilter={statusFilter}\n          onStatusChange={setStatusFilter}\n          paymentFilter={paymentFilter}\n          onPaymentChange={setPaymentFilter}\n          dateFrom={dateFrom}\n          onDateFromChange={setDateFrom}\n          dateTo={dateTo}\n          onDateToChange={setDateTo}\n          onReset={handleReset}\n        />\n\n        {/* Results */}\n        <div>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Hiển thị {filteredRentals.length} / {mockRentals.length} đơn thuê\n          </p>\n          <RentalTable\n            rentals={filteredRentals}\n            onView={(rental) => console.log(\"[v0] View rental:\", rental._id)}\n            onEdit={(rental) => console.log(\"[v0] Edit rental:\", rental._id)}\n            onComplete={(rental) =>\n              console.log(\"[v0] Complete rental:\", rental._id)\n            }\n            onCancel={(rental) =>\n              console.log(\"[v0] Cancel rental:\", rental._id)\n            }\n          />\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/station/page.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport type { Station } from \"@custom-types\";\nimport Image from \"next/image\";\nimport { Footer } from \"@/components/landing/landing-footer\";\nimport { CTA } from \"@/components/landing/cta\";\nimport Header from \"@/components/ui/layout/Header\";\nconst Page = () => {\n  const stations: Station[] = [\n    {\n      name: \"Ga Bến Thành\",\n      description:\n        \"Ga Bến Thành nằm tại trung tâm TP.HCM, kết nối với Chợ Bến Thành và Công viên 23/9, là ga ngầm lớn nhất của tuyến Metro số 1.\",\n      address: \"Lê Lợi, Bến Thành, Quận 1, TP.HCM\",\n      type: \"Ga ngầm\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n    {\n      name: \"Ga Nhà Hát Thành Phố\",\n      description:\n        \"Ga Nhà hát Thành phố là một trong những nhà ga ngầm của Tuyến Metro số 1, nằm trên đường Lê Lợi, Quận 1, TP.HCM. Đây là nhà ga ngầm độc đáo, lấy cảm hứng thiết kế từ Nhà hát Thành phố với lối kiến trúc hiện đại, sang trọng.\",\n      address: \"Đồng Khởi, Bến Nghé, Quận 1, TP.HCM\",\n      type: \"Ga ngầm\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n    {\n      name: \"Ga Ba Son\",\n      description:\n        \"Ga Ba Son là một trong những nhà ga ngầm của Tuyến Metro số 1 nằm tại khu đô thị Vinhomes Golden River và Grand Marina Saigon. Ga được thiết kế với màu sắc chủ đạo là màu xanh và các thiết kế hình lượn sóng.\",\n      address: \"Tôn Đức Thắng, Bến Nghé, Quận 1, TP.HCM\",\n      type: \"Ga ngầm\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n    {\n      name: \"Ga Văn Thánh\",\n      description:\n        \"Ga Văn Thánh là nhà ga loại A một trong những nhà ga trên cao của Tuyến số 1, là nhà ga trên cao chuyển tiếp xuống đoạn ngầm tại Ga Ba Son.\",\n      address: \"Điện Biên Phủ, Đa Kao, Quận 1, TP.HCM\",\n      type: \"Ga trên cao\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n    {\n      name: \"Ga Tân Cảng\",\n      description:\n        \"Ga Tân Cảng là nhà ga loại B, là nhà ga lớn nhất so với 10 nhà ga trên cao khác của tuyến đường sắt số 1 Bến Thành - Suối Tiên, với 4 làn tàu, 6.200m²\",\n      address: \"Điện Biên Phủ, 25, Quận Bình Thạnh, TP.HCM\",\n      type: \"Ga trên cao\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n    {\n      name: \"Ga Thảo Điền\",\n      description:\n        \"Ga Thảo Điền là nhà ga loại A nằm tại phường Thảo Điền, có cầu bộ hành đi bộ băng qua Võ Nguyên Giáp (Xa lộ Hà Nội) và kết nối với bãi đỗ xe\",\n      address: \"Võ Nguyên Giáp, Thảo Điền, TP. Thủ Đức, TP.HCM\",\n      type: \"Ga trên cao\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n    {\n      name: \"Ga An Phú\",\n      description:\n        \"Ga An Phú là nhà ga loại C, nằm tại phường Thảo Điền, thành phố Thủ Đức, TP.HCM.\",\n      address: \"Xa lộ Hà Nội, Thảo Điền, TP. Thủ Đức, TP.HCM\",\n      type: \"Ga trên cao\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n    {\n      name: \"Ga Rạch Chiếc\",\n      description:\n        \"Ga Rạch Chiếc là nhà ga loại A, một trong những nhà ga của Tuyến Metro số 1, nằm tại phường An Phú, thành phố Thủ Đức, TP.HCM\",\n      address: \"Xa lộ Hà Nội, An Phú, TP. Thủ Đức, TP.HCM\",\n      type: \"Ga trên cao\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n    {\n      name: \"Ga Phước Long\",\n      description:\n        \"Ga Phước Long là nhà ga loại A, một trong những nhà ga của Tuyến số 1, nằm tại cảng Phước Long, phường Trường Thọ, thành phố Thủ Đức, TP.HCM\",\n      address: \"Cảng Phước Long, Trường Thọ, TP. Thủ Đức, TP.HCM\",\n      type: \"Ga trên cao\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n    {\n      name: \"Ga Bình Thái\",\n      description:\n        \"Ga Bình Thái là nhà ga loại A, một trong những nhà ga tàu điện của Tuyến Metro số 1, cách trường Đại học Kiến trúc TP.HCM (950m – 10 phút đi bộ)\",\n      address: \"Đỗ Xuân Hợp, Trường Thọ, TP. Thủ Đức, TP.HCM\",\n      type: \"Ga trên cao\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n    {\n      name: \"Ga Thủ Đức\",\n      description:\n        \"Ga Thủ Đức là nhà ga loại A, nằm tại phường Bình Thọ, thành phố Thủ Đức, cách trường Đại học Sư phạm Kỹ thuật TP.HCM 600m (10 phút đi bộ).\",\n      address: \"Bình Thọ, TP. Thủ Đức, TP.HCM\",\n      type: \"Ga trên cao\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n    {\n      name: \"Ga Khu Cộng Nghệ Cao\",\n      description:\n        \"Ga Khu Công nghệ cao là nhà ga loại A, nằm đối diện Khu công nghệ cao TP.HCM, dự kiến thu hút lưu lượng lớn hành khách để đi làm việc, học tập tại đây\",\n      address: \"Đại học Quốc Gia, Linh Trung, TP. Thủ Đức, TP.HCM\",\n      type: \"Ga trên cao\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n    {\n      name: \"Ga Đại Học Quốc Gia\",\n      description:\n        \"Ga Đại học Quốc Gia là nhà ga loại A, một trong những nhà ga tàu điện của Tuyến Metro số 1, nằm đối diện Khu du lịch Văn hóa Suối Tiên\",\n      address: \"Đại học Quốc Gia, Linh Trung, TP. Thủ Đức, TP.HCM\",\n      type: \"Ga trên cao\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n    {\n      name: \"Ga Suối Tiên\",\n      description:\n        \"Ga Bến xe Suối Tiên là nhà ga loại D, là nhà ga cuối cùng của Tuyến Metro số 1, nằm ngay Bến xe Miền Đông mới. Khoảng 5 – 15 phút đi bộ từ ga là Bến xe Miền Đông mới, Bệnh viện Ung Bướu TP. HCM – Cơ sở 2\",\n      address: \"Bình Thắng, TP. Dĩ An, Bình Dương\",\n      type: \"Ga cuối\",\n      bikeStation: {\n        id: \"BS001\",\n        stationId: 1,\n        totalBikes: 20,\n        availableBikes: 15,\n        location: {\n          lat: 10.7769,\n          lng: 106.6951,\n        },\n        distance: 300,\n      },\n      stationNumber: \"\",\n    },\n  ];\n\n  const [selectedStation, setSelectedStation] = useState<Station | null>(null);\n  const [, setBikeStation] = useState(\n  stations.length > 0 && stations[0].bikeStation ? stations[0].bikeStation : null\n);\n  const handleStationClick = (station: Station) => {\n    setSelectedStation(station);\n    setBikeStation(station.bikeStation);\n  };\n\n  const getStationTypeColor = (type: string) => {\n    switch (type) {\n      case \"Ga ngầm\":\n        return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"Ga trên cao\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"Ga cuối\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50\">\n      <Header />\n      <div className=\"relative\">\n        <div className=\"w-full h-64 bg-gradient-to-r from-blue-600 to-green-600 relative overflow-hidden\">\n          <Image\n          width={1920}\n          height={1080}\n            src=\"/cam-nang-Metro.jpeg\"\n            alt=\"Metro Guide\"\n            className=\"w-full h-full object-cover opacity-30\"\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600/80 to-green-600/80\" />\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"text-center text-white\">\n              <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">\n                Tuyến Metro Số 1\n              </h1>\n              <p className=\"text-xl md:text-2xl font-light\">\n                Bến Thành - Suối Tiên\n              </p>\n              <div className=\"mt-4 flex items-center justify-center space-x-2\">\n                <span className=\"px-3 py-1 bg-white/20 rounded-full text-sm\">\n                  14 Ga\n                </span>\n                <span className=\"px-3 py-1 bg-white/20 rounded-full text-sm\">\n                  19.7 km\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Station Selection Grid */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-6 text-center\">\n            Chọn ga để xem thông tin chi tiết\n          </h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-7 gap-3\">\n            {stations.map((station, index) => (\n              <div key={index} className=\"flex flex-col\">\n                <Button\n                  variant={\n                    selectedStation?.name === station.name\n                      ? \"default\"\n                      : \"outline\"\n                  }\n                  className={`h-auto p-3 text-center transition-all duration-200 hover:scale-105 ${\n                    selectedStation?.name === station.name\n                      ? \"bg-blue-600 hover:bg-blue-700 text-white shadow-lg\"\n                      : \"hover:bg-blue-50 hover:border-blue-300\"\n                  }`}\n                  onClick={() => handleStationClick(station)}\n                >\n                  <div className=\"flex flex-col items-center space-y-1\">\n                    <div\n                      className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${\n                        selectedStation?.name === station.name\n                          ? \"bg-white text-blue-600\"\n                          : \"bg-blue-600 text-white\"\n                      }`}\n                    >\n                      {station.stationNumber}\n                    </div>\n                    <span className=\"text-xs leading-tight\">\n                      {station.name.replace(\"Ga \", \"\")}\n                    </span>\n                  </div>\n                </Button>\n              </div>\n            ))}\n          </div>\n        </div>\n        {selectedStation && (\n          <div className=\"animate-in slide-in-from-bottom-4 duration-300\">\n            <Card className=\"max-w-4xl mx-auto shadow-xl border-0 bg-white/80 backdrop-blur-sm\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-2xl md:text-3xl text-blue-800 mb-2\">\n                      {selectedStation.name}\n                    </CardTitle>\n                    <div className=\"flex items-center space-x-3\">\n                      <span\n                        className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium border ${getStationTypeColor(\n                          selectedStation.type || \"\"\n                        )}`}\n                      >\n                        {selectedStation.type}\n                      </span>\n                      <span className=\"text-sm text-gray-500\">\n                        Ga số {selectedStation.stationNumber}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">\n                    Địa chỉ\n                  </h3>\n                  <p className=\"text-gray-600 bg-gray-50 p-3 rounded-lg\">\n                    {selectedStation.address}\n                  </p>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">\n                    Thông tin chi tiết\n                  </h3>\n                  <p className=\"text-gray-600 leading-relaxed bg-blue-50 p-4 rounded-lg\">\n                    {selectedStation.description}\n                  </p>\n                </div>\n\n                <div className=\"flex flex-wrap gap-4 pt-4 border-t\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"flex-1 hover:bg-blue-50\"\n                    onClick={() =>\n                      alert(\n                        \"Chức năng này đang được phát triển. Vui lòng quay lại sau!\"\n                      )\n                    }\n                  >\n                    Xem bản đồ\n                  </Button>\n                  <Button\n                    variant=\"success\"\n                    className=\"flex-1 hover:bg-green-50\"\n                    onClick={() =>\n                      alert(\n                        \"Chức năng này đang được phát triển. Vui lòng quay lại sau!\"\n                      )\n                    }\n                  >\n                    Thuê xe\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className=\"flex-1 hover:bg-purple-50\"\n                    onClick={() =>\n                      alert(\n                        \"Chức năng này đang được phát triển. Vui lòng quay lại sau!\"\n                      )\n                    }\n                  >\n                    📱 Chia sẻ\n                  </Button>\n                </div>\n                \n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {!selectedStation && (\n          <div className=\"text-center py-12\">\n            <div className=\"text-6xl mb-4\">🚇</div>\n            <h3 className=\"text-xl text-gray-600 mb-2\">\n              Chọn một ga để xem thông tin chi tiết\n            </h3>\n            <p className=\"text-gray-500\">\n              Nhấn vào bất kỳ ga nào ở trên để tìm hiểu thêm về ga đó\n            </p>\n          </div>\n        )}\n      </div>\n      <CTA/>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Page;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/user/booking-history/page.tsx:\n"
      },
      {
        "text": "import React from 'react'\n\nconst page = () => {\n  return (\n    <div>\n      \n    </div>\n  )\n}\n\nexport default page"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/user/page.tsx:\n"
      },
      {
        "text": "\"use client\";\nimport { ProfileHeader } from \"@/components/dashboard/profile-header\";\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\";\nimport { useAuth } from \"@/providers/auth-providers\";\nimport { Progress } from \"@/components/ui/progress\";\nexport default function DashboardPage() {\n  const { user } = useAuth();\n  if (!user) {\n    return (\n      <div>\n        <Progress />\n      </div>\n    );\n  }\n  return (\n    <DashboardLayout user={user}>\n      <div className=\"space-y-8\">\n        <section>\n          <ProfileHeader user={user} />\n        </section>\n\n      </div>\n    </DashboardLayout>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/user/profile/change-password/page.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Eye, EyeOff, Lock, ArrowLeft, Shield, User, Key } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/providers/auth-providers\";\nimport { useAuthActions } from \"@/hooks/useAuthAction\";\nimport { changePasswordSchema, ChangePasswordSchemaFormData } from \"@/schemas/authSchema\";\nimport Link from \"next/link\";\nimport { Progress } from \"@radix-ui/react-progress\";\n\nexport default function ChangePasswordPage() {\n  const { user } = useAuth();\n  const { changePassword } = useAuthActions();\n  const [showPasswords, setShowPasswords] = useState({\n    oldPassword: false,\n    newPassword: false,\n    confirmPassword: false,\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n    reset,\n  } = useForm<ChangePasswordSchemaFormData>({\n    resolver: zodResolver(changePasswordSchema),\n  });\n\n  const togglePasswordVisibility = (field: keyof typeof showPasswords) => {\n    setShowPasswords((prev) => ({\n      ...prev,\n      [field]: !prev[field],\n    }));\n  };\n\n  const onSubmit = async (data: ChangePasswordSchemaFormData) => {\n    try {\n      changePassword(data.old_password, data.password, data.confirm_password);\n      reset();\n    } catch (error) {\n      console.error(\"Error changing password:\", error);\n    }\n  };\n\n  // Check role permission\n\n\n  if (!user) {\n    return <div className=\"flex items-center justify-center h-screen\"><Progress /></div>;\n  }\n\n  return (\n    <DashboardLayout user={user}>\n      <div className=\"space-y-6 max-w-4xl mx-auto\">\n        {/* Header Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-4\">\n            <Link\n              href=\"/user/profile\"\n              className=\"p-2 hover:bg-accent rounded-lg transition-colors\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Link>\n            <div className=\"flex-1\">\n              {/* <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-1\">\n                <User className=\"w-4 h-4\" />\n                <span>Hồ sơ cá nhân</span>\n                <span>/</span>\n                <Key className=\"w-4 h-4\" />\n                <span>Thay đổi mật khẩu</span>\n              </div> */}\n              <h1 className=\"text-3xl font-bold text-foreground\">\n                Thay đổi mật khẩu\n              </h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Cập nhật mật khẩu để bảo mật tài khoản của bạn\n              </p>\n            </div>\n          </div>\n          \n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-card border border-border rounded-lg p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Trạng thái bảo mật</p>\n                  <p className=\"font-semibold text-foreground\">\n                    {user.verify === \"VERIFIED\" ? \"Đã xác thực\" : \"Cần xác thực\"}\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-card border border-border rounded-lg p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center\">\n                  <User className=\"w-5 h-5 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Vai trò</p>\n                  <p className=\"font-semibold text-foreground\">Nhân viên</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-card border border-border rounded-lg p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-amber-100 dark:bg-amber-900/20 rounded-full flex items-center justify-center\">\n                  <Key className=\"w-5 h-5 text-amber-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Lần cuối đổi</p>\n                  <p className=\"font-semibold text-foreground\">\n                    {new Date(user.updated_at).toLocaleDateString(\"vi-VN\")}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Form Section */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-card border border-border rounded-xl p-8\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-xl font-semibold text-foreground mb-2\">\n                  Cập nhật mật khẩu\n                </h2>\n                <p className=\"text-sm text-muted-foreground\">\n                  Vui lòng nhập mật khẩu hiện tại và mật khẩu mới để cập nhật bảo mật tài khoản\n                </p>\n              </div>\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label\n                  htmlFor=\"old_password\"\n                  className=\"text-sm font-medium text-foreground\"\n                >\n                  Mật khẩu hiện tại\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"old_password\"\n                    type={showPasswords.oldPassword ? \"text\" : \"password\"}\n                    {...register(\"old_password\")}\n                    placeholder=\"Nhập mật khẩu hiện tại\"\n                    className={cn(\n                      \"bg-background border-border pr-10\",\n                      errors.old_password && \"border-destructive\"\n                    )}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => togglePasswordVisibility(\"oldPassword\")}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                  >\n                    {showPasswords.oldPassword ? (\n                      <EyeOff className=\"w-4 h-4\" />\n                    ) : (\n                      <Eye className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n                {errors.old_password && (\n                  <p className=\"text-sm text-destructive\">\n                    {errors.old_password.message}\n                  </p>\n                )}\n              </div>\n\n              {/* New Password */}\n              <div className=\"space-y-2\">\n                <Label\n                  htmlFor=\"password\"\n                  className=\"text-sm font-medium text-foreground\"\n                >\n                  Mật khẩu mới\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPasswords.newPassword ? \"text\" : \"password\"}\n                    {...register(\"password\")}\n                    placeholder=\"Nhập mật khẩu mới\"\n                    className={cn(\n                      \"bg-background border-border pr-10\",\n                      errors.password && \"border-destructive\"\n                    )}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => togglePasswordVisibility(\"newPassword\")}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                  >\n                    {showPasswords.newPassword ? (\n                      <EyeOff className=\"w-4 h-4\" />\n                    ) : (\n                      <Eye className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n                {errors.password && (\n                  <p className=\"text-sm text-destructive\">\n                    {errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Confirm Password */}\n              <div className=\"space-y-2\">\n                <Label\n                  htmlFor=\"confirm_password\"\n                  className=\"text-sm font-medium text-foreground\"\n                >\n                  Xác nhận mật khẩu mới\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirm_password\"\n                    type={showPasswords.confirmPassword ? \"text\" : \"password\"}\n                    {...register(\"confirm_password\")}\n                    placeholder=\"Nhập lại mật khẩu mới\"\n                    className={cn(\n                      \"bg-background border-border pr-10\",\n                      errors.confirm_password && \"border-destructive\"\n                    )}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => togglePasswordVisibility(\"confirmPassword\")}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                  >\n                    {showPasswords.confirmPassword ? (\n                      <EyeOff className=\"w-4 h-4\" />\n                    ) : (\n                      <Eye className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n                {errors.confirm_password && (\n                  <p className=\"text-sm text-destructive\">\n                    {errors.confirm_password.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"flex gap-3 pt-6 border-t border-border\">\n                <Link href=\"/user/profile\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"bg-transparent\"\n                  >\n                    Hủy\n                  </Button>\n                </Link>\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"bg-primary hover:bg-primary/90 gap-2\"\n                >\n                  <Lock className=\"w-4 h-4\" />\n                  {isSubmitting ? \"Đang cập nhật...\" : \"Cập nhật mật khẩu\"}\n                </Button>\n              </div>\n            </form>\n          </div>\n          </div>\n\n          {/* Security Section */}\n          <div className=\"space-y-6\">\n            {/* Current User Info */}\n            <div className=\"bg-card border border-border rounded-xl p-6\">\n              <div className=\"flex items-center gap-4 mb-4\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <Lock className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-foreground\">Bảo mật tài khoản</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {user.email}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-3 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Vai trò:</span>\n                  <span className=\"font-medium text-foreground\">\n                    Nhân viên\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Trạng thái:</span>\n                  <span className={`font-medium ${user.verify === \"VERIFIED\" ? \"text-green-600\" : \"text-amber-600\"}`}>\n                    {user.verify === \"VERIFIED\" ? \"Đã xác thực\" : \"Chưa xác thực\"}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Lần cuối cập nhật:</span>\n                  <span className=\"font-medium text-foreground\">\n                    {new Date(user.updated_at).toLocaleDateString(\"vi-VN\")}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Security Tips */}\n            <div className=\"bg-card border border-border rounded-xl p-6\">\n              <div className=\"flex items-center gap-3 mb-4\">\n                <div className=\"w-8 h-8 bg-amber-100 dark:bg-amber-900/20 rounded-full flex items-center justify-center\">\n                  <span className=\"text-lg\">💡</span>\n                </div>\n                <h4 className=\"font-semibold text-foreground\">Lời khuyên bảo mật</h4>\n              </div>\n              \n              <ul className=\"space-y-3 text-sm text-muted-foreground\">\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Sử dụng mật khẩu mạnh với ít nhất 8 ký tự</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Kết hợp chữ hoa, chữ thường, số và ký tự đặc biệt</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Không sử dụng thông tin cá nhân dễ đoán</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Thay đổi mật khẩu định kỳ để đảm bảo an toàn</span>\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <span className=\"text-green-500 mt-1\">•</span>\n                  <span>Không chia sẻ mật khẩu với bất kỳ ai</span>\n                </li>\n              </ul>\n            </div>\n\n            {/* Password Strength Indicator */}\n            <div className=\"bg-card border border-border rounded-xl p-6\">\n              <h4 className=\"font-semibold text-foreground mb-4 flex items-center gap-2\">\n                <span className=\"text-lg\">🔐</span>\n                Mức độ bảo mật\n              </h4>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                  <span className=\"text-sm text-muted-foreground\">Yếu</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-amber-500 rounded-full\"></div>\n                  <span className=\"text-sm text-muted-foreground\">Trung bình</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                  <span className=\"text-sm text-muted-foreground\">Mạnh</span>\n                </div>\n              </div>\n              \n              <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <p className=\"text-xs text-blue-600 dark:text-blue-400\">\n                  Mật khẩu mạnh giúp bảo vệ tài khoản khỏi các cuộc tấn công mạng\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/app/user/profile/page.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport type React from \"react\";\n\nimport { useEffect, useState } from \"react\";\nimport { DashboardLayout } from \"@/components/dashboard/dashboard-layout\";\nimport type { DetailUser } from \"@/services/authService\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Camera, Save, X, Mail } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/providers/auth-providers\";\nimport { Progress } from \"@radix-ui/react-progress\";\nimport { useAuthActions } from \"@/hooks/useAuthAction\";\nimport Image from \"next/image\";\nimport { UpdateProfileSchemaFormData } from \"@/schemas/authSchema\";\nimport Link from \"next/link\";\nexport default function ProfilePage() {\n  const { user, updateProfile } = useAuth();\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [data, setData] = useState<DetailUser | null>(null);\n  const [formData, setFormData] = useState<DetailUser>(\n    () => user || ({} as DetailUser)\n  );\n  const [avatarPreview, setAvatarPreview] = useState(user?.avatar ?? \"\");\n  const { resendVerifyEmail } = useAuthActions();\n  useEffect(() => {\n    if (user) {\n      setData(user);\n      setFormData(user as DetailUser);\n      setAvatarPreview(user.avatar ?? \"\");\n      console.log(user);\n    }\n  }, [user]);\n  if (!user || !data) {\n    return (\n      <div>\n        <Progress />\n      </div>\n    );\n  }\n  const handleInputChange = (field: keyof DetailUser, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setAvatarPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const handleSave = () => {\n    if (!user) return;\n    const fields: (keyof UpdateProfileSchemaFormData)[] = [\n      \"fullname\",\n      \"username\",\n      \"phone_number\",\n      \"location\",\n      \"avatar\",\n    ];\n\n    const updatedData = fields.reduce((acc, field) => {\n      const newValue = field === \"avatar\" ? avatarPreview : formData[field];\n      const oldValue = user[field as keyof DetailUser] ?? \"\";\n\n      if (newValue !== oldValue) {\n        acc[field] = newValue || \"\";\n      }\n      return acc;\n    }, {} as UpdateProfileSchemaFormData);\n\n    // Nếu có field nào thay đổi mới gọi API\n    if (Object.keys(updatedData).length > 0) {\n      updateProfile(updatedData);\n    }\n\n    setIsEditing(false);\n  };\n\n  const handleCancel = () => {\n    if (data) {\n      setFormData(data as DetailUser);\n      setAvatarPreview(data.avatar || \"\");\n    }\n    setIsEditing(false);\n  };\n  const handleResendVerifyEmail = () => {\n    if (formData?.verify === \"VERIFIED\") {\n      return;\n    }\n    resendVerifyEmail();\n  };\n  return (\n    <DashboardLayout user={data}>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">\n              Hồ sơ cá nhân\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Quản lý thông tin tài khoản của bạn\n            </p>\n          </div>\n          {!isEditing ? (\n            <Button\n              onClick={() => setIsEditing(true)}\n              className=\"bg-primary hover:bg-primary/90 cursor-pointer gap-2\"\n            >\n              Chỉnh sửa hồ sơ\n            </Button>\n          ) : (\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={handleCancel}\n                variant=\"outline\"\n                className=\"gap-2 bg-transparent cursor-pointer\"\n              >\n                <X className=\"w-4 h-4\" />\n                Hủy\n              </Button>\n              <Button\n                onClick={() => handleSave()}\n                className=\"bg-primary hover:bg-primary/90 gap-2 cursor-pointer\"\n              >\n                <Save className=\"w-4 h-4\" />\n                Lưu thay đổi\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <div className=\"bg-card border border-border rounded-xl p-8\">\n          <div className=\"flex flex-col md:flex-row gap-8\">\n            <div className=\"flex flex-col items-center gap-4\">\n              <div className=\"relative group\">\n                <div className=\"w-32 h-32 rounded-full overflow-hidden border-4 border-primary/20\">\n                  <Image\n                    src={avatarPreview || \"/placeholder.svg\"}\n                    alt=\"Avatar\"\n                    className=\"w-full h-full object-cover\"\n                    width={128}\n                    height={128}\n                  />\n                </div>\n                {isEditing && (\n                  <label\n                    htmlFor=\"avatar-upload\"\n                    className=\"absolute inset-0 flex items-center justify-center bg-black/50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer\"\n                  >\n                    <Camera className=\"w-8 h-8 text-white\" />\n                    <input\n                      id=\"avatar-upload\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                      onChange={handleAvatarChange}\n                    />\n                  </label>\n                )}\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-sm font-medium text-foreground\">\n                  {formData?.fullname || \"Chưa có tên\"}\n                </p>\n                <p\n                  className={cn(\n                    \"text-xs px-2 py-1 rounded-full inline-block mt-1\",\n                    formData?.role === \"ADMIN\"\n                      ? \"bg-primary/20 text-primary\"\n                      : \"bg-accent/20 text-accent-foreground\"\n                  )}\n                >\n                  {formData?.role === \"ADMIN\" ? \"Quản trị viên\" : \"Nhân viên\"}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex-1 space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label\n                    htmlFor=\"fullname\"\n                    className=\"text-sm font-medium text-foreground\"\n                  >\n                    Họ và tên\n                  </Label>\n                  <Input\n                    id=\"fullname\"\n                    value={formData?.fullname || \"\"}\n                    onChange={(e) =>\n                      handleInputChange(\"fullname\", e.target.value)\n                    }\n                    disabled={!isEditing}\n                    className={cn(\n                      \"bg-background border-border\",\n                      !isEditing && \"opacity-70 cursor-not-allowed\"\n                    )}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label\n                    htmlFor=\"username\"\n                    className=\"text-sm font-medium text-foreground\"\n                  >\n                    Tên đăng nhập\n                  </Label>\n                  <Input\n                    id=\"username\"\n                    value={formData?.username || \"\"}\n                    onChange={(e) =>\n                      handleInputChange(\"username\", e.target.value)\n                    }\n                    disabled={!isEditing}\n                    className={cn(\n                      \"bg-background border-border\",\n                      !isEditing && \"opacity-70 cursor-not-allowed\"\n                    )}\n                  />\n                </div>\n\n                {/* Email */}\n                <div className=\"space-y-2\">\n                  <Label\n                    htmlFor=\"email\"\n                    className=\"text-sm font-medium text-foreground\"\n                  >\n                    Email\n                  </Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData?.email || \"\"}\n                    onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                    disabled\n                    className={cn(\n                      \"bg-background border-border\",\n                      !isEditing && \"opacity-70 cursor-not-allowed\"\n                    )}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label\n                    htmlFor=\"phone\"\n                    className=\"text-sm font-medium text-foreground\"\n                  >\n                    Số điện thoại\n                  </Label>\n                  <Input\n                    id=\"phone\"\n                    value={formData?.phone_number || \"\"}\n                    onChange={(e) =>\n                      handleInputChange(\"phone_number\", e.target.value)\n                    }\n                    disabled={!isEditing}\n                    className={cn(\n                      \"bg-background border-border\",\n                      !isEditing && \"opacity-70 cursor-not-allowed\"\n                    )}\n                  />\n                </div>\n                <div className=\"space-y-2 md:col-span-2\">\n                  <Label\n                    htmlFor=\"location\"\n                    className=\"text-sm font-medium text-foreground\"\n                  >\n                    Địa chỉ\n                  </Label>\n                  <Input\n                    id=\"location\"\n                    value={formData?.location || \"\"}\n                    onChange={(e) =>\n                      handleInputChange(\"location\", e.target.value)\n                    }\n                    disabled={!isEditing}\n                    className={cn(\n                      \"bg-background border-border\",\n                      !isEditing && \"opacity-70 cursor-not-allowed\"\n                    )}\n                  />\n                </div>\n              </div>\n\n              <div className=\"pt-6 border-t border-border\">\n                <h3 className=\"text-sm font-semibold text-foreground mb-4\">\n                  Thông tin tài khoản\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-muted-foreground\">Trạng thái xác thực</p>\n                    <p\n                      className={cn(\n                        \"font-medium mt-1\",\n                        formData?.verify === \"VERIFIED\"\n                          ? \"text-accent\"\n                          : \"text-destructive\"\n                      )}\n                    >\n                      {formData?.verify === \"VERIFIED\"\n                        ? \"Đã xác thực\"\n                        : \"Chưa xác thực\"}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-muted-foreground\">Ngày tạo tài khoản</p>\n                    <p className=\"font-medium text-foreground mt-1\">\n                      {formData?.created_at\n                        ? new Date(formData.created_at).toLocaleDateString(\n                            \"vi-VN\"\n                          )\n                        : \"Chưa có thông tin\"}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-muted-foreground\">Cập nhật lần cuối</p>\n                    <p className=\"font-medium text-foreground mt-1\">\n                      {formData?.updated_at\n                        ? new Date(formData.updated_at).toLocaleDateString(\n                            \"vi-VN\"\n                          )\n                        : \"Chưa có thông tin\"}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-muted-foreground\">ID tài khoản</p>\n                    <p className=\"font-medium text-foreground mt-1 font-mono text-xs\">\n                      {formData?._id || \"Chưa có ID\"}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Security Section */}\n        <div className=\"bg-card border border-border rounded-xl p-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n            Bảo mật\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium text-foreground\">Đổi mật khẩu</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Cập nhật mật khẩu của bạn\n                </p>\n              </div>\n              <Link href=\"/user/profile/change-password\">\n                <Button variant=\"outline\" className=\"cursor-pointer\">Thay đổi</Button>\n              </Link>\n            </div>\n            <div className=\"flex items-center justify-between pt-4 border-t border-border\">\n              <div>\n                <p className=\"font-medium text-foreground\">Xác thực email</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Tăng cường bảo mật tài khoản\n                </p>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={() => handleResendVerifyEmail()}\n                className=\"gap-2 cursor-pointer\"\n                disabled={formData?.verify === \"VERIFIED\"}\n              >\n                <Mail className=\"w-4 h-4\" />\n                {formData?.verify === \"VERIFIED\"\n                  ? \"Đã xác thực\"\n                  : \"Gửi email xác thực\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/BikeStation.tsx:\n"
      },
      {
        "text": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { BikeStation,  Station } from \"@custom-types\";\nimport { Bike, MapPin, Clock, Users } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\ninterface BikeStationInfoProps {\n  station: Station;\n  bikeStation: BikeStation;\n  onBack: () => void;\n}\n\nexport const BikeStationInfo = ({\n  station,\n  bikeStation,\n  onBack,\n}: BikeStationInfoProps) => {\n  const handleRentBike = () => {\n    toast.success(\"Bạn đã thuê xe thành công!\", {\n      description: `Mã trạm: ${bikeStation.id}. Vui lòng đến trạm để lấy xe.`,\n      duration: 5000,\n    });\n  };\n\n  const availabilityStatus = () => {\n    const ratio = bikeStation.availableBikes / bikeStation.totalBikes;\n    if (ratio > 0.7) return { color: \"success\", text: \"Nhiều xe\" };\n    if (ratio > 0.3) return { color: \"warning\", text: \"Vừa phải\" };\n    return { color: \"destructive\", text: \"Ít xe\" };\n  };\n\n  const status = availabilityStatus();\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-3\">\n        <Button variant=\"outline\" onClick={onBack} className=\"px-3\">\n          ← Quay lại\n        </Button>\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">{station.name}</h2>\n          <p className=\"text-muted-foreground\">Trạm MeBike</p>\n        </div>\n      </div>\n\n      <Card className=\"border border-border/50 bg-card/50 backdrop-blur-sm\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-3 rounded-full bg-gradient-primary\">\n                <Bike className=\"h-6 w-6 text-primary-foreground\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-xl\">Trạm xe đạp MeBike</CardTitle>\n                <CardDescription>Mã trạm: {bikeStation.id}</CardDescription>\n              </div>\n            </div>\n            <Badge\n              variant={\n                status.color === \"success\"\n                  ? \"default\"\n                  : status.color === \"warning\"\n                  ? \"secondary\"\n                  : \"destructive\"\n              }\n              className=\"px-3 py-1\"\n            >\n              {status.text}\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"flex items-center gap-2 p-4 rounded-lg bg-accent/20 border border-accent/30\">\n              <Bike className=\"h-5 w-5 text-accent\" />\n              <div>\n                <p className=\"text-sm font-medium text-accent-foreground\">\n                  Xe có sẵn\n                </p>\n                <p className=\"text-2xl font-bold text-accent\">\n                  {bikeStation.availableBikes}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2 p-4 rounded-lg bg-secondary/20 border border-secondary/30\">\n              <Users className=\"h-5 w-5 text-secondary\" />\n              <div>\n                <p className=\"text-sm font-medium text-secondary-foreground\">\n                  Tổng số xe\n                </p>\n                <p className=\"text-2xl font-bold text-secondary\">\n                  {bikeStation.totalBikes}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <MapPin className=\"h-4 w-4\" />\n              <span className=\"text-sm\">\n                Cách ga metro {bikeStation.distance}m (1-2 phút đi bộ)\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <Clock className=\"h-4 w-4\" />\n              <span className=\"text-sm\">Hoạt động 24/7</span>\n            </div>\n          </div>\n\n          <div className=\"pt-4 space-y-3\">\n            <Button\n              onClick={handleRentBike}\n              disabled={bikeStation.availableBikes === 0}\n              className=\"w-full bg-gradient-primary hover:opacity-90 text-primary-foreground font-semibold py-3 h-12\"\n            >\n              {bikeStation.availableBikes > 0 ? \"Thuê xe ngay\" : \"Hết xe\"}\n            </Button>\n            <p className=\"text-xs text-muted-foreground text-center\">\n              Giá thuê: 10,000đ/giờ đầu, 5,000đ/giờ tiếp theo\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"border border-border/50 bg-card/50 backdrop-blur-sm\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Thông tin ga Metro</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <p className=\"text-sm text-muted-foreground\">{station.description}</p>\n          <div className=\"flex items-center gap-2 text-sm\">\n            <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n            <span>{station.address}</span>\n          </div>\n          <Badge variant=\"outline\" className=\"text-xs w-fit\">\n            {station.type}\n          </Badge>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/bikes/bike-card.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport type { Bike } from \"@custom-types\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Edit, Trash2, Eye, MapPin, Star } from \"lucide-react\";\nimport Image from \"next/image\";\n\ninterface BikeCardProps {\n  bike: Bike;\n  onEdit?: (bike: Bike) => void;\n  onDelete?: (bike: Bike) => void;\n  onView?: (bike: Bike) => void;\n}\n\nconst statusConfig = {\n  available: {\n    label: \"Sẵn sàng\",\n    className: \"bg-green-500/10 text-green-500 border-green-500/20\",\n  },\n  rented: {\n    label: \"Đang thuê\",\n    className: \"bg-blue-500/10 text-blue-500 border-blue-500/20\",\n  },\n  maintenance: {\n    label: \"Bảo trì\",\n    className: \"bg-orange-500/10 text-orange-500 border-orange-500/20\",\n  },\n  retired: {\n    label: \"Ngừng hoạt động\",\n    className: \"bg-red-500/10 text-red-500 border-red-500/20\",\n  },\n};\n\nconst typeConfig = {\n  mountain: \"Xe đạp địa hình\",\n  road: \"Xe đạp đường trường\",\n  city: \"Xe đạp thành phố\",\n  electric: \"Xe đạp điện\",\n  hybrid: \"Xe đạp hybrid\",\n};\n\nexport function BikeCard({ bike, onEdit, onDelete, onView }: BikeCardProps) {\n  const status = statusConfig[bike.status];\n  return (\n    <Card className=\"group overflow-hidden bg-card border-border hover:border-primary/50 transition-all duration-300\">\n      <div className=\"relative h-48 overflow-hidden bg-muted\">\n        <Image\n          src={bike.image || \"/placeholder.svg\"}\n          alt={bike.name}\n          fill\n          className=\"object-cover group-hover:scale-105 transition-transform duration-300\"\n        />\n        <Badge className={`absolute top-3 right-3 ${status.className}`}>\n          {status.label}\n        </Badge>\n      </div>\n\n      <div className=\"p-4 space-y-3\">\n        <div>\n          <h3 className=\"font-semibold text-lg text-foreground mb-1\">\n            {bike.name}\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">\n            {bike.brand} - {typeConfig[bike.type]}\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-4 text-sm\">\n          <div className=\"flex items-center gap-1 text-muted-foreground\">\n            <MapPin className=\"w-4 h-4\" />\n            <span>{bike.location}</span>\n          </div>\n          <div className=\"flex items-center gap-1 text-yellow-500\">\n            <Star className=\"w-4 h-4 fill-yellow-500\" />\n            <span className=\"text-foreground\">{bike.rating.toFixed(1)}</span>\n          </div>\n        </div>\n\n        <div className=\"flex items-baseline gap-2\">\n          <span className=\"text-2xl font-bold text-primary\">\n            {bike.price_per_hour.toLocaleString()}đ\n          </span>\n          <span className=\"text-sm text-muted-foreground\">/giờ</span>\n          <span className=\"text-sm text-muted-foreground ml-auto\">\n            {bike.price_per_day.toLocaleString()}đ/ngày\n          </span>\n        </div>\n\n        <div className=\"flex items-center gap-2 pt-2 border-t border-border\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex-1 bg-transparent\"\n            onClick={() => onView?.(bike)}\n          >\n            <Eye className=\"w-4 h-4 mr-1\" />\n            Xem\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex-1 bg-transparent\"\n            onClick={() => onEdit?.(bike)}\n          >\n            <Edit className=\"w-4 h-4 mr-1\" />\n            Sửa\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => onDelete?.(bike)}>\n            <Trash2 className=\"w-4 h-4 text-destructive\" />\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/bikes/bike-filter.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport type { BikeStatus, BikeType } from \"@custom-types\";\nimport { Button } from \"@components/ui/button\";\nimport { Input } from \"@components/ui/input\";\nimport { Label } from \"@components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Search, X } from \"lucide-react\";\n\ninterface BikeFiltersProps {\n  searchQuery: string;\n  onSearchChange: (value: string) => void;\n  statusFilter: BikeStatus | \"all\";\n  onStatusChange: (value: BikeStatus | \"all\") => void;\n  typeFilter: BikeType | \"all\";\n  onTypeChange: (value: BikeType | \"all\") => void;\n  onReset: () => void;\n}\n\nexport function BikeFilters({\n  searchQuery,\n  onSearchChange,\n  statusFilter,\n  onStatusChange,\n  typeFilter,\n  onTypeChange,\n  onReset,\n}: BikeFiltersProps) {\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"font-semibold text-foreground\">Bộ lọc</h3>\n        <Button variant=\"ghost\" size=\"sm\" onClick={onReset}>\n          <X className=\"w-4 h-4 mr-1\" />\n          Xóa bộ lọc\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"search\">Tìm kiếm</Label>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              id=\"search\"\n              placeholder=\"Tên xe, thương hiệu...\"\n              value={searchQuery}\n              onChange={(e) => onSearchChange(e.target.value)}\n              className=\"pl-9\"\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"status\">Trạng thái</Label>\n          <Select value={statusFilter} onValueChange={onStatusChange}>\n            <SelectTrigger id=\"status\">\n              <SelectValue placeholder=\"Chọn trạng thái\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Tất cả</SelectItem>\n              <SelectItem value=\"available\">Sẵn sàng</SelectItem>\n              <SelectItem value=\"rented\">Đang thuê</SelectItem>\n              <SelectItem value=\"maintenance\">Bảo trì</SelectItem>\n              <SelectItem value=\"retired\">Ngừng hoạt động</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"type\">Loại xe</Label>\n          <Select value={typeFilter} onValueChange={onTypeChange}>\n            <SelectTrigger id=\"type\">\n              <SelectValue placeholder=\"Chọn loại xe\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Tất cả</SelectItem>\n              <SelectItem value=\"mountain\">Xe đạp địa hình</SelectItem>\n              <SelectItem value=\"road\">Xe đạp đường trường</SelectItem>\n              <SelectItem value=\"city\">Xe đạp thành phố</SelectItem>\n              <SelectItem value=\"electric\">Xe đạp điện</SelectItem>\n              <SelectItem value=\"hybrid\">Xe đạp hybrid</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/customers/customer-card.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport type { Customer } from \"@custom-types\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Eye,\n  Edit,\n  Ban,\n  Mail,\n  Phone,\n  MapPin,\n  Calendar,\n  Star,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { vi } from \"date-fns/locale\";\n\ninterface CustomerCardProps {\n  customer: Customer;\n  onView?: (customer: Customer) => void;\n  onEdit?: (customer: Customer) => void;\n  onBlock?: (customer: Customer) => void;\n}\n\nconst statusConfig = {\n  active: {\n    label: \"Hoạt động\",\n    className: \"bg-green-500/10 text-green-500 border-green-500/20\",\n  },\n  inactive: {\n    label: \"Không hoạt động\",\n    className: \"bg-gray-500/10 text-gray-500 border-gray-500/20\",\n  },\n  blocked: {\n    label: \"Đã chặn\",\n    className: \"bg-red-500/10 text-red-500 border-red-500/20\",\n  },\n};\n\nconst typeConfig = {\n  individual: {\n    label: \"Cá nhân\",\n    className: \"bg-blue-500/10 text-blue-500 border-blue-500/20\",\n  },\n  corporate: {\n    label: \"Doanh nghiệp\",\n    className: \"bg-purple-500/10 text-purple-500 border-purple-500/20\",\n  },\n};\n\nexport function CustomerCard({\n  customer,\n  onView,\n  onEdit,\n  onBlock,\n}: CustomerCardProps) {\n  const status = statusConfig[customer.status];\n  const type = typeConfig[customer.customer_type];\n  const initials = customer.full_name\n    .split(\" \")\n    .map((n) => n[0])\n    .join(\"\")\n    .toUpperCase()\n    .slice(0, 2);\n\n  return (\n    <Card className=\"group overflow-hidden bg-card border-border hover:border-primary/50 transition-all duration-300\">\n      <div className=\"p-5 space-y-4\">\n        {/* Header with Avatar */}\n        <div className=\"flex items-start gap-4\">\n          <Avatar className=\"w-16 h-16 border-2 border-border\">\n            <AvatarImage\n              src={customer.avatar || \"/placeholder.svg\"}\n              alt={customer.full_name}\n            />\n            <AvatarFallback className=\"bg-primary/10 text-primary font-semibold\">\n              {initials}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between gap-2\">\n              <div>\n                <h3 className=\"font-semibold text-lg text-foreground truncate\">\n                  {customer.full_name}\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {customer.customer_code}\n                </p>\n              </div>\n              <div className=\"flex gap-2\">\n                <Badge className={status.className}>{status.label}</Badge>\n              </div>\n            </div>\n            <Badge className={`${type.className} mt-2`}>{type.label}</Badge>\n          </div>\n        </div>\n\n        {/* Contact Info */}\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <Mail className=\"w-4 h-4 flex-shrink-0\" />\n            <span className=\"truncate\">{customer.email}</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <Phone className=\"w-4 h-4 flex-shrink-0\" />\n            <span>{customer.phone_number}</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <MapPin className=\"w-4 h-4 flex-shrink-0\" />\n            <span className=\"truncate\">{customer.city}</span>\n          </div>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-2 gap-3 pt-3 border-t border-border\">\n          <div>\n            <p className=\"text-xs text-muted-foreground\">Tổng đơn thuê</p>\n            <p className=\"text-lg font-bold text-foreground\">\n              {customer.total_rentals}\n            </p>\n          </div>\n          <div>\n            <p className=\"text-xs text-muted-foreground\">Tổng chi tiêu</p>\n            <p className=\"text-lg font-bold text-primary\">\n              {customer.total_spent.toLocaleString()}đ\n            </p>\n          </div>\n          <div>\n            <p className=\"text-xs text-muted-foreground\">Đang thuê</p>\n            <p className=\"text-lg font-bold text-blue-500\">\n              {customer.current_rentals}\n            </p>\n          </div>\n          <div>\n            <p className=\"text-xs text-muted-foreground\">Đánh giá</p>\n            <div className=\"flex items-center gap-1\">\n              <Star className=\"w-4 h-4 fill-yellow-500 text-yellow-500\" />\n              <p className=\"text-lg font-bold text-foreground\">\n                {customer.rating.toFixed(1)}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Last Rental */}\n        {customer.last_rental_date && (\n          <div className=\"flex items-center gap-2 text-xs text-muted-foreground pt-2 border-t border-border\">\n            <Calendar className=\"w-3 h-3\" />\n            <span>\n              Thuê gần nhất:{\" \"}\n              {format(new Date(customer.last_rental_date), \"dd/MM/yyyy\", {\n                locale: vi,\n              })}\n            </span>\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"flex items-center gap-2 pt-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex-1 bg-transparent\"\n            onClick={() => onView?.(customer)}\n          >\n            <Eye className=\"w-4 h-4 mr-1\" />\n            Xem\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex-1 bg-transparent\"\n            onClick={() => onEdit?.(customer)}\n          >\n            <Edit className=\"w-4 h-4 mr-1\" />\n            Sửa\n          </Button>\n          {customer.status !== \"blocked\" && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onBlock?.(customer)}\n            >\n              <Ban className=\"w-4 h-4 text-destructive\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/customers/customer-filters.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport type { CustomerStatus, CustomerType } from \"@custom-types\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Search, X } from \"lucide-react\";\n\ninterface CustomerFiltersProps {\n  searchQuery: string;\n  onSearchChange: (value: string) => void;\n  statusFilter: CustomerStatus | \"all\";\n  onStatusChange: (value: CustomerStatus | \"all\") => void;\n  typeFilter: CustomerType | \"all\";\n  onTypeChange: (value: CustomerType | \"all\") => void;\n  cityFilter: string;\n  onCityChange: (value: string) => void;\n  onReset: () => void;\n}\n\nexport function CustomerFilters({\n  searchQuery,\n  onSearchChange,\n  statusFilter,\n  onStatusChange,\n  typeFilter,\n  onTypeChange,\n  cityFilter,\n  onCityChange,\n  onReset,\n}: CustomerFiltersProps) {\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"font-semibold text-foreground\">Bộ lọc</h3>\n        <Button variant=\"ghost\" size=\"sm\" onClick={onReset}>\n          <X className=\"w-4 h-4 mr-1\" />\n          Xóa bộ lọc\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"search\">Tìm kiếm</Label>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              id=\"search\"\n              placeholder=\"Tên, email, SĐT...\"\n              value={searchQuery}\n              onChange={(e) => onSearchChange(e.target.value)}\n              className=\"pl-9\"\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"status\">Trạng thái</Label>\n          <Select value={statusFilter} onValueChange={onStatusChange}>\n            <SelectTrigger id=\"status\">\n              <SelectValue placeholder=\"Chọn trạng thái\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Tất cả</SelectItem>\n              <SelectItem value=\"active\">Hoạt động</SelectItem>\n              <SelectItem value=\"inactive\">Không hoạt động</SelectItem>\n              <SelectItem value=\"blocked\">Đã chặn</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"type\">Loại khách hàng</Label>\n          <Select value={typeFilter} onValueChange={onTypeChange}>\n            <SelectTrigger id=\"type\">\n              <SelectValue placeholder=\"Chọn loại\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Tất cả</SelectItem>\n              <SelectItem value=\"individual\">Cá nhân</SelectItem>\n              <SelectItem value=\"corporate\">Doanh nghiệp</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"city\">Thành phố</Label>\n          <Select value={cityFilter} onValueChange={onCityChange}>\n            <SelectTrigger id=\"city\">\n              <SelectValue placeholder=\"Chọn thành phố\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Tất cả</SelectItem>\n              <SelectItem value=\"Hồ Chí Minh\">Hồ Chí Minh</SelectItem>\n              <SelectItem value=\"Hà Nội\">Hà Nội</SelectItem>\n              <SelectItem value=\"Đà Nẵng\">Đà Nẵng</SelectItem>\n              <SelectItem value=\"Cần Thơ\">Cần Thơ</SelectItem>\n              <SelectItem value=\"Nha Trang\">Nha Trang</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/customers/customer-stats.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport { Card } from \"@/components/ui/card\";\nimport { Users, UserCheck, TrendingUp, DollarSign, Award } from \"lucide-react\";\n\ninterface CustomerStatsProps {\n  stats: {\n    total: number;\n    active: number;\n    inactive: number;\n    blocked: number;\n    newThisMonth: number;\n    totalRevenue: number;\n    averageSpent: number;\n    topCustomers: number;\n  };\n}\n\nexport function CustomerStats({ stats }: CustomerStatsProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      <Card className=\"p-4 bg-gradient-to-br from-primary/10 to-primary/5 border-primary/20\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Tổng khách hàng</p>\n            <p className=\"text-3xl font-bold text-primary mt-1\">\n              {stats.total}\n            </p>\n          </div>\n          <div className=\"p-3 bg-primary/10 rounded-lg\">\n            <Users className=\"w-6 h-6 text-primary\" />\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"p-4 bg-gradient-to-br from-green-500/10 to-green-500/5 border-green-500/20\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Đang hoạt động</p>\n            <p className=\"text-3xl font-bold text-green-500 mt-1\">\n              {stats.active}\n            </p>\n          </div>\n          <div className=\"p-3 bg-green-500/10 rounded-lg\">\n            <UserCheck className=\"w-6 h-6 text-green-500\" />\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"p-4 bg-gradient-to-br from-blue-500/10 to-blue-500/5 border-blue-500/20\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Khách mới tháng này</p>\n            <p className=\"text-3xl font-bold text-blue-500 mt-1\">\n              {stats.newThisMonth}\n            </p>\n          </div>\n          <div className=\"p-3 bg-blue-500/10 rounded-lg\">\n            <TrendingUp className=\"w-6 h-6 text-blue-500\" />\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"p-4 bg-gradient-to-br from-yellow-500/10 to-yellow-500/5 border-yellow-500/20\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Khách VIP</p>\n            <p className=\"text-3xl font-bold text-yellow-500 mt-1\">\n              {stats.topCustomers}\n            </p>\n          </div>\n          <div className=\"p-3 bg-yellow-500/10 rounded-lg\">\n            <Award className=\"w-6 h-6 text-yellow-500\" />\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"p-4 bg-gradient-to-br from-accent/10 to-accent/5 border-accent/20 lg:col-span-2\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">\n              Tổng doanh thu từ khách hàng\n            </p>\n            <p className=\"text-3xl font-bold text-accent mt-1\">\n              {stats.totalRevenue.toLocaleString()}đ\n            </p>\n          </div>\n          <div className=\"p-3 bg-accent/10 rounded-lg\">\n            <DollarSign className=\"w-6 h-6 text-accent\" />\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"p-4 bg-gradient-to-br from-purple-500/10 to-purple-500/5 border-purple-500/20 lg:col-span-2\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">\n              Chi tiêu trung bình/khách\n            </p>\n            <p className=\"text-3xl font-bold text-purple-500 mt-1\">\n              {stats.averageSpent.toLocaleString()}đ\n            </p>\n          </div>\n          <div className=\"p-3 bg-purple-500/10 rounded-lg\">\n            <TrendingUp className=\"w-6 h-6 text-purple-500\" />\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/dashboard/dashboard-layout.tsx:\n"
      },
      {
        "text": "\"use client\";\nimport type React from \"react\";\nimport { useState } from \"react\";\nimport { Sidebar } from \"./sidebar\";\nimport { Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport type { DetailUser } from \"@/services/authService\";\nimport Image from \"next/image\";\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n  user: DetailUser;\n}\nexport function DashboardLayout({ children, user }: DashboardLayoutProps) {\n  const [sidebarCollapsed,] = useState(false);\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar userRole={user?.role} />\n      <div\n        className={`transition-all duration-300 ${sidebarCollapsed ? \"ml-16\" : \"ml-64\"}`}\n      >\n        <header className=\"sticky top-0 z-30 border-b border-border bg-card/95 backdrop-blur supports-[backdrop-filter]:bg-card/60\">\n          <div className=\"flex h-16 items-center justify-between px-6\">\n            <div className=\"flex-1 max-w-md\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  type=\"search\"\n                  placeholder=\"Tìm kiếm xe, khách hàng, đơn thuê...\"\n                  className=\"pl-9 bg-muted/50\"\n                />\n              </div>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-3 pl-4 border-l border-border\">\n                <div className=\"text-right hidden md:block\">\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {user?.fullname || \"Chưa có tên\"}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground capitalize\">\n                    {user?.role || \"user\"}\n                  </p>\n                </div>\n                <div className=\"relative w-10 h-10 rounded-full overflow-hidden bg-muted\">\n                  <Image\n                    src={user?.avatar || \"/placeholder.svg\"}\n                    alt={user?.fullname || \"User\"}\n                    fill\n                    className=\"object-cover\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        <main className=\"p-6\">{children}</main>\n      </div>\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/dashboard/profile-header.tsx:\n"
      },
      {
        "text": "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { DetailUser } from \"@/services/authService\";\nimport { Mail, MapPin, Phone, User, Calendar } from \"lucide-react\";\n\ninterface ProfileHeaderProps {\n  user: DetailUser;\n}\n\nexport function ProfileHeader({ user }: ProfileHeaderProps) {\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return \"default\";\n      case \"staff\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"vi-VN\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex flex-col md:flex-row gap-6\">\n        <Avatar className=\"w-24 h-24 border-4 border-primary/20\">\n          <AvatarImage\n            src={user.avatar || \"/placeholder.svg\"}\n            alt={user.fullname}\n          />\n          <AvatarFallback className=\"text-2xl font-bold bg-primary text-primary-foreground\">\n            {getInitials(user.fullname)}\n          </AvatarFallback>\n        </Avatar>\n\n        <div className=\"flex-1 space-y-4\">\n          <div className=\"flex flex-col md:flex-row md:items-center gap-3\">\n            <h2 className=\"text-2xl font-bold text-foreground\">\n              {user.fullname}\n            </h2>\n            <Badge variant={getRoleBadgeVariant(user.role)} className=\"w-fit\">\n              {user.role.toUpperCase()}\n            </Badge>\n            {user.verify === \"VERIFIED\" && (\n              <Badge\n                variant=\"outline\"\n                className=\"w-fit border-accent text-accent\"\n              >\n                ✓ Đã xác thực\n              </Badge>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <User className=\"w-4 h-4\" />\n              <span className=\"font-mono\">{user.username}</span>\n            </div>\n\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <Mail className=\"w-4 h-4\" />\n              <span>{user.email}</span>\n            </div>\n\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <Phone className=\"w-4 h-4\" />\n              <span>{user.phone_number}</span>\n            </div>\n\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <MapPin className=\"w-4 h-4\" />\n              <span>{user.location}</span>\n            </div>\n\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <Calendar className=\"w-4 h-4\" />\n              <span>Tham gia: {formatDate(user.created_at)}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/dashboard/recent-activity.tsx:\n"
      },
      {
        "text": "import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bike, CheckCircle, Clock, XCircle } from \"lucide-react\";\n\nconst activities = [\n  {\n    id: 1,\n    type: \"rental\",\n    customer: \"Nguyễn Văn A\",\n    bike: \"Xe đạp thể thao #123\",\n    status: \"active\",\n    time: \"10 phút trước\",\n  },\n  {\n    id: 2,\n    type: \"return\",\n    customer: \"Trần Thị B\",\n    bike: \"Xe đạp địa hình #045\",\n    status: \"completed\",\n    time: \"25 phút trước\",\n  },\n  {\n    id: 3,\n    type: \"rental\",\n    customer: \"Lê Văn C\",\n    bike: \"Xe đạp touring #089\",\n    status: \"active\",\n    time: \"1 giờ trước\",\n  },\n  {\n    id: 4,\n    type: \"return\",\n    customer: \"Phạm Thị D\",\n    bike: \"Xe đạp mini #012\",\n    status: \"late\",\n    time: \"2 giờ trước\",\n  },\n];\n\nexport function RecentActivity() {\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return (\n          <Badge variant=\"outline\" className=\"border-primary text-primary\">\n            <Clock className=\"w-3 h-3 mr-1\" />\n            Đang thuê\n          </Badge>\n        );\n      case \"completed\":\n        return (\n          <Badge variant=\"outline\" className=\"border-accent text-accent\">\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Hoàn thành\n          </Badge>\n        );\n      case \"late\":\n        return (\n          <Badge\n            variant=\"outline\"\n            className=\"border-destructive text-destructive\"\n          >\n            <XCircle className=\"w-3 h-3 mr-1\" />\n            Trễ hạn\n          </Badge>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"space-y-4\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-foreground\">\n            Hoạt động gần đây\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Các giao dịch mới nhất\n          </p>\n        </div>\n\n        <div className=\"space-y-4\">\n          {activities.map((activity) => (\n            <div\n              key={activity.id}\n              className=\"flex items-start gap-4 p-3 rounded-lg hover:bg-muted/50 transition-colors\"\n            >\n              <div className=\"p-2 bg-primary/10 rounded-lg\">\n                <Bike className=\"w-5 h-5 text-primary\" />\n              </div>\n\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center justify-between gap-2 mb-1\">\n                  <p className=\"font-medium text-foreground truncate\">\n                    {activity.customer}\n                  </p>\n                  {getStatusBadge(activity.status)}\n                </div>\n                <p className=\"text-sm text-muted-foreground\">{activity.bike}</p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {activity.time}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </Card>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/dashboard/rental-chart.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport { Card } from \"@/components/ui/card\";\nimport {\n    Area,\n    AreaChart,\n    CartesianGrid,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis,\n} from \"recharts\";\n\nconst data = [\n  { time: \"00:00\", rentals: 12 },\n  { time: \"03:00\", rentals: 8 },\n  { time: \"06:00\", rentals: 25 },\n  { time: \"09:00\", rentals: 45 },\n  { time: \"12:00\", rentals: 62 },\n  { time: \"15:00\", rentals: 58 },\n  { time: \"18:00\", rentals: 72 },\n  { time: \"21:00\", rentals: 38 },\n  { time: \"24:00\", rentals: 15 },\n];\n\nexport function RentalChart() {\n  return (\n    <Card className=\"p-6\">\n      <div className=\"space-y-4\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-foreground\">\n            Lượt thuê xe hôm nay\n          </h3>\n          <p className=\"text-sm text-muted-foreground\">Thống kê theo giờ</p>\n        </div>\n\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <AreaChart data={data}>\n            <defs>\n              <linearGradient id=\"colorRentals\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop\n                  offset=\"5%\"\n                  stopColor=\"hsl(var(--primary))\"\n                  stopOpacity={0.3}\n                />\n                <stop\n                  offset=\"95%\"\n                  stopColor=\"hsl(var(--primary))\"\n                  stopOpacity={0}\n                />\n              </linearGradient>\n            </defs>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis\n              dataKey=\"time\"\n              stroke=\"hsl(var(--muted-foreground))\"\n              fontSize={12}\n            />\n            <YAxis stroke=\"hsl(var(--muted-foreground))\" fontSize={12} />\n            <Tooltip\n              contentStyle={{\n                backgroundColor: \"hsl(var(--card))\",\n                border: \"1px solid hsl(var(--border))\",\n                borderRadius: \"8px\",\n                color: \"hsl(var(--foreground))\",\n              }}\n            />\n            <Area\n              type=\"monotone\"\n              dataKey=\"rentals\"\n              stroke=\"hsl(var(--primary))\"\n              strokeWidth={2}\n              fillOpacity={1}\n              fill=\"url(#colorRentals)\"\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </div>\n    </Card>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/dashboard/sidebar.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport { useState } from \"react\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\n\nimport {\n  LayoutDashboard,\n  Bike,\n  FileText,\n  Users,\n  BarChart3,\n  Settings,\n  ChevronLeft,\n  ChevronRight,\n  User,\n  LogOut,\n  History\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/providers/auth-providers\";\nimport { getRefreshToken } from \"@/utils/tokenManager\";\ninterface SidebarProps {\n  userRole: \"STAFF\" | \"ADMIN\" | \"USER\";\n}\n\nconst getMenuItems = (userRole: \"STAFF\" | \"ADMIN\" | \"USER\") => {\n  const baseUrl =\n    userRole === \"ADMIN\"\n      ? \"/admin\"\n      : userRole === \"STAFF\"\n      ? \"/staff\"\n      : \"/customer\";\n  \n  return [\n    {\n      title: \"Tổng quan\",\n      icon: LayoutDashboard,\n      href: baseUrl,\n      roles: [\"STAFF\", \"ADMIN\"],\n    },\n    {\n      title: \"Quản lý xe đạp\",\n      icon: Bike,\n      href: `${baseUrl}/bikes`,\n      roles: [\"STAFF\", \"ADMIN\"],\n    },\n    {\n      title: \"Đơn thuê xe\",\n      icon: FileText,\n      href: `${baseUrl}/rentals`,\n      roles: [\"STAFF\", \"ADMIN\"],\n    },\n    {\n      title: \"Khách hàng\",\n      icon: Users,\n      href: `${baseUrl}/customers`,\n      roles: [\"STAFF\", \"ADMIN\"],\n    },\n    {\n      title: \"Báo cáo & Thống kê\",\n      icon: BarChart3,\n      href: \"/admin/reports\",\n      roles: [\"ADMIN\"],\n    },\n    {\n      title: \"Cài đặt\",\n      icon: Settings,\n      href: \"/admin/settings\",\n      roles: [\"ADMIN\"],\n    },\n    {\n      title: \"Hồ sơ cá nhân\",\n      icon: Users,\n      href: \"/user/profile\",\n      roles: [\"USER\"],\n    },\n    {\n      title: \"Lịch sử giao dịch\",\n      icon: History,\n      href: \"/user/booking-history\",\n      roles: [\"USER\"],\n    },\n  ];\n};\n\nexport function Sidebar({ userRole }: SidebarProps) {\n  const [collapsed, setCollapsed] = useState(false);\n  const { logOut } = useAuth();\n  const pathname = usePathname();\n  const handleLogout = () => {\n    const refreshToken = getRefreshToken();\n    if (refreshToken) {\n      logOut(refreshToken);\n    }\n  }\n  const menuItems = getMenuItems(userRole);\n  const filteredMenuItems = menuItems.filter((item) =>\n    item.roles.includes(userRole)\n  );\n\n  return (\n    <aside\n      className={cn(\n        \"fixed left-0 top-0 z-40 h-screen bg-sidebar border-r border-sidebar-border transition-all duration-300\",\n        collapsed ? \"w-16\" : \"w-64\"\n      )}\n    >\n      <div className=\"flex h-full flex-col\">\n        {/* Logo Section */}\n        <div className=\"flex h-16 items-center justify-between border-b border-sidebar-border px-4\">\n          {!collapsed && (\n            <div className=\"flex items-center gap-2\">\n              <div className=\"p-1.5 bg-sidebar-primary rounded-lg\">\n                <Bike className=\"w-5 h-5 text-sidebar-primary-foreground\" />\n              </div>\n              <div>\n                <h2 className=\"text-sm font-bold text-sidebar-foreground\">\n                  BikeRental Pro\n                </h2>\n                <p className=\"text-xs text-muted-foreground\">\n                  Quản lý cho thuê\n                </p>\n              </div>\n            </div>\n          )}\n          <button\n            onClick={() => setCollapsed(!collapsed)}\n            className=\"p-1.5 hover:bg-sidebar-accent rounded-md transition-colors\"\n            aria-label={collapsed ? \"Mở rộng sidebar\" : \"Thu gọn sidebar\"}\n          >\n            {collapsed ? (\n              <ChevronRight className=\"w-4 h-4 text-sidebar-foreground\" />\n            ) : (\n              <ChevronLeft className=\"w-4 h-4 text-sidebar-foreground\" />\n            )}\n          </button>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"flex-1 overflow-y-auto py-4\">\n          <ul className=\"space-y-1 px-2\">\n            {filteredMenuItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = pathname === item.href;\n\n              return (\n                <li key={item.href}>\n                  <Link\n                    href={item.href}\n                    className={cn(\n                      \"flex items-center gap-3 px-3 py-2.5 rounded-lg transition-colors group\",\n                      isActive\n                        ? \"bg-sidebar-primary text-sidebar-primary-foreground\"\n                        : \"text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\"\n                    )}\n                  >\n                    <Icon\n                      className={cn(\n                        \"w-5 h-5 flex-shrink-0\",\n                        isActive && \"text-sidebar-primary-foreground\"\n                      )}\n                    />\n                    {!collapsed && (\n                      <span className=\"text-sm font-medium\">{item.title}</span>\n                    )}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>\n\n        <div className=\"border-t border-sidebar-border p-2\">\n          <Link\n            href={`${userRole === \"ADMIN\" ? \"/admin\" : \"/staff\"}/profile`}\n            className=\"flex items-center gap-3 px-3 py-2.5 rounded-lg text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground transition-colors\"\n          >\n            <User className=\"w-5 h-5 flex-shrink-0\" />\n            {!collapsed && <span className=\"text-sm font-medium\">Hồ sơ</span>}\n          </Link>\n          <button\n            className=\"w-full flex items-center gap-3 px-3 py-2.5 rounded-lg text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground transition-colors\n          cursor-pointer\"\n            onClick={() => handleLogout()}\n          >\n            <LogOut className=\"w-5 h-5 flex-shrink-0\" />\n            {!collapsed && (\n              <span className=\"text-sm font-medium \">Đăng xuất</span>\n            )}\n          </button>\n        </div>\n      </div>\n    </aside>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/dashboard/stats-card.tsx:\n"
      },
      {
        "text": "import { Card } from \"@/components/ui/card\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  change?: string;\n  changeType?: \"positive\" | \"negative\" | \"neutral\";\n  icon: LucideIcon;\n}\n\nexport function StatsCard({\n  title,\n  value,\n  change,\n  changeType = \"neutral\",\n  icon: Icon,\n}: StatsCardProps) {\n  return (\n    <Card className=\"p-6 hover:shadow-lg transition-shadow\">\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n          <h3 className=\"text-3xl font-bold mt-2 text-foreground\">{value}</h3>\n          {change && (\n            <p\n              className={`text-sm mt-2 ${\n                changeType === \"positive\"\n                  ? \"text-accent\"\n                  : changeType === \"negative\"\n                    ? \"text-destructive\"\n                    : \"text-muted-foreground\"\n              }`}\n            >\n              {change}\n            </p>\n          )}\n        </div>\n        <div className=\"p-3 bg-primary/10 rounded-lg\">\n          <Icon className=\"w-6 h-6 text-primary\" />\n        </div>\n      </div>\n    </Card>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/landing/cta.tsx:\n"
      },
      {
        "text": "import { Button } from \"@/components/ui/button\";\nimport { Smartphone } from \"lucide-react\";\n\nexport function CTA() {\n  return (\n    <section className=\"py-24 bg-primary text-primary-foreground\">\n      <div className=\"container mx-auto px-4 lg:px-8\">\n        <div className=\"max-w-3xl mx-auto text-center space-y-8\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-balance\">\n            Sẵn sàng khám phá Sài Gòn?\n          </h2>\n          <p className=\"text-xl text-primary-foreground/90 text-pretty leading-relaxed\">\n            Tải ứng dụng MetroBike ngay hôm nay và nhận 3 chuyến đi miễn phí đầu\n            tiên. Trải nghiệm cách di chuyển thông minh nhất ở TP.HCM.\n          </p>\n          <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n            <Button\n              size=\"lg\"\n              variant=\"secondary\"\n              className=\"text-lg px-8 h-14 gap-2\"\n            >\n              <Smartphone className=\"w-5 h-5\" />\n              Tải trên App Store\n            </Button>\n            <Button\n              size=\"lg\"\n              variant=\"secondary\"\n              className=\"text-lg px-8 h-14 gap-2\"\n            >\n              <Smartphone className=\"w-5 h-5\" />\n              Tải trên Google Play\n            </Button>\n          </div>\n          <p className=\"text-sm text-primary-foreground/70\">\n            Miễn phí tải về. Có sẵn trên iOS và Android.\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/landing/how-it-work.tsx:\n"
      },
      {
        "text": "import { Card } from \"@/components/ui/card\";\nimport Image from \"next/image\";\nconst steps = [\n  {\n    number: \"01\",\n    title: \"Tải ứng dụng MetroBike\",\n    description:\n      \"Tải app miễn phí trên App Store hoặc Google Play. Đăng ký tài khoản chỉ trong 2 phút.\",\n    image: \"/smartphone-app-download-screen-with-bike-rental-in.jpg\",\n  },\n  {\n    number: \"02\",\n    title: \"Tìm trạm xe gần nhất\",\n    description:\n      \"Sử dụng bản đồ trong app để tìm trạm xe gần ga metro bạn đang ở. Xem số lượng xe còn trống.\",\n    image: \"/map-showing-metro-stations-with-bike-rental-locati.jpg\",\n  },\n  {\n    number: \"03\",\n    title: \"Quét QR và bắt đầu\",\n    description:\n      \"Quét mã QR trên xe, mở khóa tự động. Bắt đầu hành trình khám phá thành phố của bạn.\",\n    image: \"/person-scanning-qr-code-on-bicycle-with-smartphone.jpg\",\n  },\n];\n\nexport function HowItWorks() {\n  return (\n    <section id=\"how-it-works\" className=\"py-24\">\n      <div className=\"container mx-auto px-4 lg:px-8\">\n        <div className=\"text-center max-w-2xl mx-auto mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4 text-balance\">\n            Cách hoạt động\n          </h2>\n          <p className=\"text-lg text-muted-foreground text-pretty\">\n            Chỉ 3 bước đơn giản để bắt đầu hành trình của bạn\n          </p>\n        </div>\n\n        <div className=\"space-y-24\">\n          {steps.map((step, index) => (\n            <div\n              key={index}\n              className={`flex flex-col ${index % 2 === 0 ? \"lg:flex-row\" : \"lg:flex-row-reverse\"} items-center gap-12`}\n            >\n              <div className=\"flex-1\">\n                <Card className=\"overflow-hidden\">\n                  <Image\n                    src={step.image || \"/placeholder.svg\"}\n                    alt={step.title}\n                    className=\"w-full h-[400px] object-cover\"\n                    width={640}\n                    height={400}\n                  />\n                </Card>\n              </div>\n              <div className=\"flex-1 space-y-4\">\n                <div className=\"text-6xl font-bold text-primary/20\">\n                  {step.number}\n                </div>\n                <h3 className=\"text-3xl font-bold text-foreground\">\n                  {step.title}\n                </h3>\n                <p className=\"text-lg text-muted-foreground leading-relaxed\">\n                  {step.description}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/landing/landing-feature.tsx:\n"
      },
      {
        "text": "import { Card } from \"@/components/ui/card\";\nimport { MapPin, Clock, Wallet, Shield } from \"lucide-react\";\n\nconst features = [\n  {\n    icon: MapPin,\n    title: \"Trạm xe tại mọi ga Metro\",\n    description:\n      \"Xe đạp có sẵn tại tất cả các trạm metro chính ở TP.HCM, sẵn sàng phục vụ bạn ngay khi xuống tàu.\",\n  },\n  {\n    icon: Clock,\n    title: \"Thuê xe nhanh chóng\",\n    description:\n      \"Quét QR code, mở khóa và bắt đầu hành trình chỉ trong 30 giây. Không cần thủ tục phức tạp.\",\n  },\n  {\n    icon: Wallet,\n    title: \"Giá cả phải chăng\",\n    description:\n      \"Chỉ từ 5.000đ/30 phút. Gói tháng chỉ 99.000đ cho sinh viên và người lao động.\",\n  },\n  {\n    icon: Shield,\n    title: \"An toàn & Bảo hiểm\",\n    description:\n      \"Xe được bảo trì định kỳ, có bảo hiểm tai nạn. Hỗ trợ 24/7 khi bạn cần.\",\n  },\n];\n\nexport function Features() {\n  return (\n    <section id=\"features\" className=\"py-24 bg-muted/30\">\n      <div className=\"container mx-auto px-4 lg:px-8\">\n        <div className=\"text-center max-w-2xl mx-auto mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4 text-balance\">\n            Tại sao chọn MetroBike?\n          </h2>\n          <p className=\"text-lg text-muted-foreground text-pretty\">\n            Giải pháp di chuyển thông minh, tiết kiệm và thân thiện với môi\n            trường\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {features.map((feature, index) => (\n            <Card key={index} className=\"p-6 hover:shadow-lg transition-shadow\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                <feature.icon className=\"w-6 h-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">\n                {feature.title}\n              </h3>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                {feature.description}\n              </p>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/landing/landing-footer.tsx:\n"
      },
      {
        "text": "import Link from \"next/link\";\nimport { Bike, Facebook, Instagram, Mail, Phone } from \"lucide-react\";\n\nexport function Footer() {\n  return (\n    <footer id=\"contact\" className=\"bg-card border-t border-border\">\n      <div className=\"container mx-auto px-4 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-8\">\n          <div>\n            <Link href=\"/\" className=\"flex items-center gap-2 mb-4\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <Bike className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n              <span className=\"text-xl font-bold text-foreground\">\n                MetroBike\n              </span>\n            </Link>\n            <p className=\"text-sm text-muted-foreground leading-relaxed\">\n              Giải pháp di chuyển thông minh kết nối metro và xe đạp tại TP.HCM\n            </p>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-foreground mb-4\">Về chúng tôi</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link\n                  href=\"#\"\n                  className=\"text-sm text-muted-foreground hover:text-primary transition-colors\"\n                >\n                  Giới thiệu\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"#\"\n                  className=\"text-sm text-muted-foreground hover:text-primary transition-colors\"\n                >\n                  Tin tức\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"#\"\n                  className=\"text-sm text-muted-foreground hover:text-primary transition-colors\"\n                >\n                  Tuyển dụng\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-foreground mb-4\">Hỗ trợ</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link\n                  href=\"#\"\n                  className=\"text-sm text-muted-foreground hover:text-primary transition-colors\"\n                >\n                  Câu hỏi thường gặp\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"#\"\n                  className=\"text-sm text-muted-foreground hover:text-primary transition-colors\"\n                >\n                  Hướng dẫn sử dụng\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"#\"\n                  className=\"text-sm text-muted-foreground hover:text-primary transition-colors\"\n                >\n                  Chính sách bảo mật\n                </Link>\n              </li>\n              <li>\n                <Link\n                  href=\"#\"\n                  className=\"text-sm text-muted-foreground hover:text-primary transition-colors\"\n                >\n                  Điều khoản sử dụng\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-foreground mb-4\">Liên hệ</h3>\n            <ul className=\"space-y-3\">\n              <li className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Phone className=\"w-4 h-4\" />\n                <span>1900 1234</span>\n              </li>\n              <li className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Mail className=\"w-4 h-4\" />\n                <span>support@metrobike.vn</span>\n              </li>\n              <li className=\"flex items-center gap-3 pt-2\">\n                <Link\n                  href=\"#\"\n                  className=\"text-muted-foreground hover:text-primary transition-colors\"\n                >\n                  <Facebook className=\"w-5 h-5\" />\n                </Link>\n                <Link\n                  href=\"#\"\n                  className=\"text-muted-foreground hover:text-primary transition-colors\"\n                >\n                  <Instagram className=\"w-5 h-5\" />\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"pt-8 border-t border-border text-center text-sm text-muted-foreground\">\n          <p>© 2025 MetroBike. Tất cả quyền được bảo lưu.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/landing/landing-header.tsx:\n"
      },
      {
        "text": "import { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Smartphone } from \"lucide-react\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nexport function Hero() {\n  return (\n    <section className=\"relative h-[80vh] flex items-center justify-center overflow-hidden pt-10\">\n      <div className=\"absolute inset-0 z-0\">\n        <Image\n          src=\"/ho-chi-minh-city-metro-station-with-bicycles--mode.jpg\"\n          alt=\"Metro station with bikes\"\n          className=\"w-full h-full object-cover\"\n          width={640}\n          height={360}\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-b from-background/60 via-background/80 to-background\" />\n      </div>\n\n      <div className=\"container mx-auto px-4 lg:px-8 relative z-10\">\n        <div className=\"max-w-3xl mx-auto text-center space-y-6\">\n          <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold text-foreground text-balance leading-tight\">\n            Kết nối Metro với Xe đạp\n          </h1>\n          <p className=\"text-lg md:text-xl text-muted-foreground text-pretty leading-relaxed\">\n            Giải pháp di chuyển hoàn hảo từ trung tâm ra ngoại ô TP.HCM. Xuống\n            metro, thuê xe đạp, khám phá thành phố.\n          </p>\n          <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n            <Button size=\"lg\" className=\"text-base px-6 h-12 gap-2\">\n              <Smartphone className=\"w-4 h-4\" />\n              Tải ứng dụng\n              <ArrowRight className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              className=\"text-base px-6 h-12 bg-transparent\"\n              asChild\n            >\n              <Link href=\"#how-it-works\">Tìm hiểu thêm</Link>\n            </Button>\n          </div>\n          <div className=\"flex items-center justify-center gap-8 pt-4\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary\">15+</div>\n              <div className=\"text-sm text-muted-foreground\">Trạm Metro</div>\n            </div>\n            <div className=\"w-px h-12 bg-border\" />\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary\">500+</div>\n              <div className=\"text-sm text-muted-foreground\">Xe đạp</div>\n            </div>\n            <div className=\"w-px h-12 bg-border\" />\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary\">10K+</div>\n              <div className=\"text-sm text-muted-foreground\">Người dùng</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/landing/landing-station.tsx:\n"
      },
      {
        "text": "import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MapPin, Bike } from \"lucide-react\";\n\nconst stations = [\n  { name: \"Bến Thành\", line: \"Tuyến 1\", bikes: 45, status: \"available\" },\n  {\n    name: \"Nhà hát Thành phố\",\n    line: \"Tuyến 1\",\n    bikes: 38,\n    status: \"available\",\n  },\n  { name: \"Ba Son\", line: \"Tuyến 1\", bikes: 12, status: \"low\" },\n  { name: \"Tân Cảng\", line: \"Tuyến 1\", bikes: 52, status: \"available\" },\n  { name: \"Thảo Điền\", line: \"Tuyến 1\", bikes: 28, status: \"available\" },\n  { name: \"An Phú\", line: \"Tuyến 1\", bikes: 5, status: \"low\" },\n];\n\nexport function Stations() {\n  return (\n    <section id=\"stations\" className=\"py-24 bg-muted/30\">\n      <div className=\"container mx-auto px-4 lg:px-8\">\n        <div className=\"text-center max-w-2xl mx-auto mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4 text-balance\">\n            Trạm xe đạp\n          </h2>\n          <p className=\"text-lg text-muted-foreground text-pretty\">\n            Xe đạp có sẵn tại các trạm metro chính trên tuyến 1\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {stations.map((station, index) => (\n            <Card key={index} className=\"p-6 hover:shadow-lg transition-shadow\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-10 h-10 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                    <MapPin className=\"w-5 h-5 text-secondary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-foreground\">\n                      {station.name}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {station.line}\n                    </p>\n                  </div>\n                </div>\n                <Badge\n                  variant={\n                    station.status === \"available\" ? \"default\" : \"secondary\"\n                  }\n                >\n                  {station.status === \"available\" ? \"Sẵn sàng\" : \"Sắp hết\"}\n                </Badge>\n              </div>\n              <div className=\"flex items-center gap-2 text-foreground\">\n                <Bike className=\"w-5 h-5 text-primary\" />\n                <span className=\"text-2xl font-bold\">{station.bikes}</span>\n                <span className=\"text-sm text-muted-foreground\">xe có sẵn</span>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/logo.tsx:\n"
      },
      {
        "text": "import { Bike } from \"lucide-react\";\nimport { useRouter } from \"next/navigation\";\nexport function Logo() {\n  const router = useRouter();\n  return (\n    <div\n      className=\"flex items-center gap-3 cursor-pointer\"\n      onClick={() => router.push(\"/\")}\n    >\n      <div className=\"rounded-full bg-[linear-gradient(135deg,_#2563eb,_#60a5fa)] p-3 shadow-[var(--shadow-metro)]\">\n        <Bike className=\"h-8 w-8 text-white\" />\n      </div>\n      <div>\n        <h1 className=\"text-2xl font-bold text-[hsl(var(--foreground))]\">\n          MetroBike\n        </h1>\n        <p className=\"text-sm text-[hsl(var(--muted-foreground))]\">\n          The Last Mile Solution\n        </p>\n      </div>\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/rentals/rental-filters.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport type { RentalStatus, PaymentStatus } from \"@custom-types\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Search, X, Calendar } from \"lucide-react\";\n\ninterface RentalFiltersProps {\n  searchQuery: string;\n  onSearchChange: (value: string) => void;\n  statusFilter: RentalStatus | \"all\";\n  onStatusChange: (value: RentalStatus | \"all\") => void;\n  paymentFilter: PaymentStatus | \"all\";\n  onPaymentChange: (value: PaymentStatus | \"all\") => void;\n  dateFrom: string;\n  onDateFromChange: (value: string) => void;\n  dateTo: string;\n  onDateToChange: (value: string) => void;\n  onReset: () => void;\n}\n\nexport function RentalFilters({\n  searchQuery,\n  onSearchChange,\n  statusFilter,\n  onStatusChange,\n  paymentFilter,\n  onPaymentChange,\n  dateFrom,\n  onDateFromChange,\n  dateTo,\n  onDateToChange,\n  onReset,\n}: RentalFiltersProps) {\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"font-semibold text-foreground\">Bộ lọc</h3>\n        <Button variant=\"ghost\" size=\"sm\" onClick={onReset}>\n          <X className=\"w-4 h-4 mr-1\" />\n          Xóa bộ lọc\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n        <div className=\"space-y-2 lg:col-span-2\">\n          <Label htmlFor=\"search\">Tìm kiếm</Label>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              id=\"search\"\n              placeholder=\"Mã đơn, tên khách hàng, SĐT...\"\n              value={searchQuery}\n              onChange={(e) => onSearchChange(e.target.value)}\n              className=\"pl-9\"\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"status\">Trạng thái đơn</Label>\n          <Select value={statusFilter} onValueChange={onStatusChange}>\n            <SelectTrigger id=\"status\">\n              <SelectValue placeholder=\"Chọn trạng thái\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Tất cả</SelectItem>\n              <SelectItem value=\"pending\">Chờ xử lý</SelectItem>\n              <SelectItem value=\"active\">Đang thuê</SelectItem>\n              <SelectItem value=\"completed\">Hoàn thành</SelectItem>\n              <SelectItem value=\"cancelled\">Đã hủy</SelectItem>\n              <SelectItem value=\"overdue\">Quá hạn</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"payment\">Thanh toán</Label>\n          <Select value={paymentFilter} onValueChange={onPaymentChange}>\n            <SelectTrigger id=\"payment\">\n              <SelectValue placeholder=\"Chọn trạng thái\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Tất cả</SelectItem>\n              <SelectItem value=\"pending\">Chưa thanh toán</SelectItem>\n              <SelectItem value=\"paid\">Đã thanh toán</SelectItem>\n              <SelectItem value=\"refunded\">Đã hoàn tiền</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"dateFrom\">Từ ngày</Label>\n          <div className=\"relative\">\n            <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              id=\"dateFrom\"\n              type=\"date\"\n              value={dateFrom}\n              onChange={(e) => onDateFromChange(e.target.value)}\n              className=\"pl-9\"\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"dateTo\">Đến ngày</Label>\n          <div className=\"relative\">\n            <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              id=\"dateTo\"\n              type=\"date\"\n              value={dateTo}\n              onChange={(e) => onDateToChange(e.target.value)}\n              className=\"pl-9\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/rentals/rental-stats.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport { Card } from \"@/components/ui/card\";\nimport {\n  Clock,\n  CheckCircle,\n  DollarSign,\n  TrendingUp,\n  AlertCircle,\n} from \"lucide-react\";\n\ninterface RentalStatsProps {\n  stats: {\n    pending: number;\n    active: number;\n    completed: number;\n    cancelled: number;\n    overdue: number;\n    totalRevenue: number;\n    todayRevenue: number;\n  };\n}\n\nexport function RentalStats({ stats }: RentalStatsProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      <Card className=\"p-4 bg-gradient-to-br from-yellow-500/10 to-yellow-500/5 border-yellow-500/20\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Chờ xử lý</p>\n            <p className=\"text-3xl font-bold text-yellow-500 mt-1\">\n              {stats.pending}\n            </p>\n          </div>\n          <div className=\"p-3 bg-yellow-500/10 rounded-lg\">\n            <Clock className=\"w-6 h-6 text-yellow-500\" />\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"p-4 bg-gradient-to-br from-blue-500/10 to-blue-500/5 border-blue-500/20\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Đang thuê</p>\n            <p className=\"text-3xl font-bold text-blue-500 mt-1\">\n              {stats.active}\n            </p>\n          </div>\n          <div className=\"p-3 bg-blue-500/10 rounded-lg\">\n            <TrendingUp className=\"w-6 h-6 text-blue-500\" />\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"p-4 bg-gradient-to-br from-green-500/10 to-green-500/5 border-green-500/20\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Hoàn thành</p>\n            <p className=\"text-3xl font-bold text-green-500 mt-1\">\n              {stats.completed}\n            </p>\n          </div>\n          <div className=\"p-3 bg-green-500/10 rounded-lg\">\n            <CheckCircle className=\"w-6 h-6 text-green-500\" />\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"p-4 bg-gradient-to-br from-orange-500/10 to-orange-500/5 border-orange-500/20\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Quá hạn</p>\n            <p className=\"text-3xl font-bold text-orange-500 mt-1\">\n              {stats.overdue}\n            </p>\n          </div>\n          <div className=\"p-3 bg-orange-500/10 rounded-lg\">\n            <AlertCircle className=\"w-6 h-6 text-orange-500\" />\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"p-4 bg-gradient-to-br from-primary/10 to-primary/5 border-primary/20 lg:col-span-2\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Doanh thu hôm nay</p>\n            <p className=\"text-3xl font-bold text-primary mt-1\">\n              {stats.todayRevenue.toLocaleString()}đ\n            </p>\n          </div>\n          <div className=\"p-3 bg-primary/10 rounded-lg\">\n            <DollarSign className=\"w-6 h-6 text-primary\" />\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"p-4 bg-gradient-to-br from-accent/10 to-accent/5 border-accent/20 lg:col-span-2\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">\n              Tổng doanh thu tháng này\n            </p>\n            <p className=\"text-3xl font-bold text-accent mt-1\">\n              {stats.totalRevenue.toLocaleString()}đ\n            </p>\n          </div>\n          <div className=\"p-3 bg-accent/10 rounded-lg\">\n            <TrendingUp className=\"w-6 h-6 text-accent\" />\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/rentals/rental-table.tsx:\n"
      },
      {
        "text": "\"use client\";\n\nimport type { Rental } from \"@custom-types\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Eye, Edit, CheckCircle, XCircle } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { vi } from \"date-fns/locale\";\n\ninterface RentalTableProps {\n  rentals: Rental[];\n  onView?: (rental: Rental) => void;\n  onEdit?: (rental: Rental) => void;\n  onComplete?: (rental: Rental) => void;\n  onCancel?: (rental: Rental) => void;\n}\n\nconst statusConfig = {\n  pending: {\n    label: \"Chờ xử lý\",\n    className: \"bg-yellow-500/10 text-yellow-500 border-yellow-500/20\",\n  },\n  active: {\n    label: \"Đang thuê\",\n    className: \"bg-blue-500/10 text-blue-500 border-blue-500/20\",\n  },\n  completed: {\n    label: \"Hoàn thành\",\n    className: \"bg-green-500/10 text-green-500 border-green-500/20\",\n  },\n  cancelled: {\n    label: \"Đã hủy\",\n    className: \"bg-red-500/10 text-red-500 border-red-500/20\",\n  },\n  overdue: {\n    label: \"Quá hạn\",\n    className: \"bg-orange-500/10 text-orange-500 border-orange-500/20\",\n  },\n};\n\nconst paymentStatusConfig = {\n  pending: {\n    label: \"Chưa thanh toán\",\n    className: \"bg-yellow-500/10 text-yellow-500 border-yellow-500/20\",\n  },\n  paid: {\n    label: \"Đã thanh toán\",\n    className: \"bg-green-500/10 text-green-500 border-green-500/20\",\n  },\n  refunded: {\n    label: \"Đã hoàn tiền\",\n    className: \"bg-blue-500/10 text-blue-500 border-blue-500/20\",\n  },\n};\n\nexport function RentalTable({\n  rentals,\n  onView,\n  onEdit,\n  onComplete,\n  onCancel,\n}: RentalTableProps) {\n  return (\n    <div className=\"border border-border rounded-lg overflow-hidden\">\n      <Table>\n        <TableHeader>\n          <TableRow className=\"bg-muted/50\">\n            <TableHead>Mã đơn</TableHead>\n            <TableHead>Khách hàng</TableHead>\n            <TableHead>Xe đạp</TableHead>\n            <TableHead>Thời gian thuê</TableHead>\n            <TableHead>Tổng tiền</TableHead>\n            <TableHead>Thanh toán</TableHead>\n            <TableHead>Trạng thái</TableHead>\n            <TableHead className=\"text-right\">Thao tác</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {rentals.map((rental) => {\n            const status = statusConfig[rental.status];\n            const paymentStatus = paymentStatusConfig[rental.payment_status];\n\n            return (\n              <TableRow key={rental._id} className=\"hover:bg-muted/30\">\n                <TableCell className=\"font-medium text-primary\">\n                  {rental.rental_code}\n                </TableCell>\n                <TableCell>\n                  <div>\n                    <p className=\"font-medium text-foreground\">\n                      {rental.customer_name}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {rental.customer_phone}\n                    </p>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div>\n                    <p className=\"font-medium text-foreground\">\n                      {rental.bike_name}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {rental.bike_type}\n                    </p>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"text-sm\">\n                    <p className=\"text-foreground\">\n                      {format(new Date(rental.start_date), \"dd/MM/yyyy HH:mm\", {\n                        locale: vi,\n                      })}\n                    </p>\n                    <p className=\"text-muted-foreground\">\n                      {format(new Date(rental.end_date), \"dd/MM/yyyy HH:mm\", {\n                        locale: vi,\n                      })}\n                    </p>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <p className=\"font-semibold text-foreground\">\n                    {rental.total_amount.toLocaleString()}đ\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Cọc: {rental.deposit_amount.toLocaleString()}đ\n                  </p>\n                </TableCell>\n                <TableCell>\n                  <Badge className={paymentStatus.className}>\n                    {paymentStatus.label}\n                  </Badge>\n                </TableCell>\n                <TableCell>\n                  <Badge className={status.className}>{status.label}</Badge>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center justify-end gap-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onView?.(rental)}\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </Button>\n                    {rental.status === \"pending\" && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onEdit?.(rental)}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                    )}\n                    {rental.status === \"active\" && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onComplete?.(rental)}\n                      >\n                        <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                      </Button>\n                    )}\n                    {(rental.status === \"pending\" ||\n                      rental.status === \"active\") && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onCancel?.(rental)}\n                      >\n                        <XCircle className=\"w-4 h-4 text-red-500\" />\n                      </Button>\n                    )}\n                  </div>\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/Stepper.tsx:\n"
      },
      {
        "text": "\"use client\"; \n\nimport React, { useState } from \"react\";\nimport Image from \"next/image\";\nconst stepsData = [\n  {\n    id: 1,\n    title: \"Mở khóa\",\n    description:\n      \"Chạm vào nút 'Mở khóa', quét mã QR code để mở khóa xe đạp/khóa xe.\",\n    image: \"https://tngo.vn/image/use-1.png\", \n    icon: \"🔓\",\n  },\n  {\n    id: 2,\n    title: \"Đi xe\",\n    description:\n      \"Tận hưởng chuyến đi , nên đội mũ bảo hiểm và tuân thủ luật giao thông.Trong quá trình sử dụng bạn có thể tạm dừng và khóa xe tạm thời và mở lại bất cứ lúc nào bằng ứng dụng di động\",\n    image: \"https://tngo.vn/image/use-2.png\",\n    icon: \"🚴\",\n  },\n  {\n    id: 3,\n    title: \"Trả xe\",\n    description:\n      \"Trả xe tại điểm MeBike bạn đã lấy xe ban đầu.Thực hiện đóng khóa xe và xác nhận kết thúc chuyến đi trên ứng dụng MeBike.\",\n    image: \"https://tngo.vn/image/use-3.png\",\n    icon: \"🔒\",\n  },\n];\n\nconst Stepper = () => {\n  const [activeStep, setActiveStep] = useState(1);\n  const handleStepClick = (stepId: number) => {\n    setActiveStep(stepId);\n  };\n  return (\n    <div className=\"w-full max-w-6xl mx-auto p-8\">\n      {/* Stepper Navigation */}\n      <div className=\"flex items-center justify-center mb-12\">\n        {stepsData.map((step, index) => (\n          <React.Fragment key={step.id}>\n            <div\n              className=\"flex flex-col items-center cursor-pointer group\"\n              onClick={() => handleStepClick(step.id)}\n            >\n              <div\n                className={`flex h-16 w-16 items-center justify-center rounded-full text-2xl font-bold transition-all duration-300 transform group-hover:scale-110\n                  ${\n                    activeStep === step.id\n                      ? \"bg-blue-600 text-white shadow-lg\"\n                      : \"bg-gray-200 text-gray-500 group-hover:bg-gray-300\"\n                  }\n                `}\n              >\n                {step.icon}\n              </div>\n              <p\n                className={`mt-3 text-sm font-semibold transition-colors duration-300\n                ${activeStep === step.id ? \"text-blue-600\" : \"text-gray-500\"}\n              `}\n              >\n                {step.title}\n              </p>\n            </div>\n\n            {index < stepsData.length - 1 && (\n              <div className=\"h-1 w-24 mx-4 bg-gray-200 rounded\"></div>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n\n    \n      <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden\">\n        <div className=\"flex flex-col lg:flex-row\">\n      \n          <div className=\"lg:w-1/2 bg-gradient-to-br from-blue-50 to-blue-100 p-8 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <Image\n                width={1920}\n                height={1080}\n                src={stepsData[stepsData[activeStep - 1] ? activeStep - 1 : 0].image}\n                alt={stepsData[stepsData[activeStep - 1] ? activeStep - 1 : 0].title}\n                className=\"w-full h-full object-cover rounded-full\"\n                priority={activeStep === 1}\n              />\n            </div>\n          </div>\n\n          {/* Text Section */}\n          <div className=\"lg:w-1/2 p-8 lg:p-12 flex flex-col justify-center\">\n            <div className=\"mb-4\">\n              <span className=\"inline-block px-3 py-1 bg-blue-100 text-blue-600 text-sm font-medium rounded-full\">\n                Bước {activeStep}\n              </span>\n            </div>\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-800 mb-6\">\n              {stepsData[activeStep - 1].title}\n            </h2>\n            <p className=\"text-gray-600 text-lg leading-relaxed\">\n              {stepsData[activeStep - 1].description}\n            </p>\n\n            {/* Action Button */}\n            <div className=\"mt-8\">\n              <button className=\"px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-semibold transition-colors duration-300 transform hover:scale-105\">\n                {activeStep === 1 && \"Quét mã QR\"}\n                {activeStep === 2 && \"Bắt đầu đi xe\"}\n                {activeStep === 3 && \"Kết thúc chuyến đi\"}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Stepper;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/avatar.tsx:\n"
      },
      {
        "text": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/badge.tsx:\n"
      },
      {
        "text": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/button.tsx:\n"
      },
      {
        "text": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        success:\n          \"bg-green-600 text-white shadow-xs hover:bg-green-700 focus-visible:ring-green-300\",\n        warning:\n          \"bg-yellow-500 text-white shadow-xs hover:bg-yellow-600 focus-visible:ring-yellow-300\",\n        destructiveOutline:\n          \"border border-destructive text-destructive hover:bg-destructive/10 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/card.tsx:\n"
      },
      {
        "text": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/checkbox.tsx:\n"
      },
      {
        "text": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { CheckIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/input.tsx:\n"
      },
      {
        "text": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/label.tsx:\n"
      },
      {
        "text": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/layout/Footer.css:\n"
      },
      {
        "text": ""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/layout/Footer.tsx:\n"
      },
      {
        "text": ""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/layout/Header.css:\n"
      },
      {
        "text": ".text_header {\n  font-size: 1.125rem; /* equivalent to text-lg */\n  font-weight: 600;     /* equivalent to font-semibold */\n  color: #1E293B;       /* equivalent to text-[#1E293B] */\n  transition-property: color;\n  transition-timing-function: ease-in-out;\n}\n.text_header:hover {\n  color: #2563EB;       /* equivalent to hover:text-[#2563EB] */\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/layout/Header.tsx:\n"
      },
      {
        "text": "\"use client\";\nimport React from \"react\";\nimport { Button } from \"../button\";\nimport { Logo as MetroLogo } from \"@/components/logo\";\nimport { useRouter } from \"next/navigation\";\n\nconst Header = () => {\n  const router = useRouter();\n  return (\n    <header className=\"p-4\">\n      <div className=\"container mx-auto flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <MetroLogo />\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div>\n            <Button\n              variant=\"ghost\"\n              className=\"text_header cursor-pointer hover:bg-primary\"\n              onClick={() => router.push(\"/guide\")}\n            >\n              Hướng dẫn sử dụng\n            </Button>\n          </div>\n          <div>\n            <Button\n              variant=\"ghost\"\n              className=\"text_header cursor-pointer hover:bg-primary\"\n              onClick={() => router.push(\"/station\")}\n            >\n              Trạm xe\n            </Button>\n          </div>\n          <div>\n            <Button\n              variant=\"ghost\"\n              className=\"text_header cursor-pointer hover:bg-primary\"\n              onClick={() => router.push(\"/pricing\")}\n            >\n              Bảng giá\n            </Button>\n          </div>\n          <div>\n            <Button\n              variant=\"ghost\"\n              onClick={() => router.push(\"/contact\")}\n              className=\"text_header cursor-pointer hover:bg-primary\"\n            >\n              Liên hệ\n            </Button>\n          </div>\n        </div>\n        <div className=\"flex gap-3\">\n          <div>\n            <Button\n              variant=\"ghost\"\n              className=\"text_header cursor-pointer hover:bg-primary\"\n              onClick={() => router.push(\"/auth/login\")}\n            >\n              Đăng nhập\n            </Button>\n          </div>\n          <div>\n            <Button\n              onClick={() => router.push(\"/auth/register\")}\n              className=\"bg-[linear-gradient(135deg,_#2563eb,_#60a5fa)] text-white hover:scale-105 hover:shadow-[var(--shadow-metro)]\n            cursor-pointer\"\n            >\n              Đăng ký\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/progress.tsx:\n"
      },
      {
        "text": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Progress({\n  className,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root>) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn(\n        \"bg-primary/20 relative h-2 w-full overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className=\"bg-primary h-full w-full flex-1 transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n}\n\nexport { Progress }"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/select.tsx:\n"
      },
      {
        "text": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  align = \"center\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        align={align}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/separator.tsx:\n"
      },
      {
        "text": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/sheet.tsx:\n"
      },
      {
        "text": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = \"right\",\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\"\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n          side === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\",\n          side === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n          side === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b\",\n          side === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/sidebar.tsx:\n"
      },
      {
        "text": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"size-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/skeleton.tsx:\n"
      },
      {
        "text": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-accent animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/sonner.tsx:\n"
      },
      {
        "text": "\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, ToasterProps } from \"sonner\"\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      style={\n        {\n          \"--normal-bg\": \"var(--popover)\",\n          \"--normal-text\": \"var(--popover-foreground)\",\n          \"--normal-border\": \"var(--border)\",\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/table.tsx:\n"
      },
      {
        "text": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/textarea.tsx:\n"
      },
      {
        "text": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/toast.tsx:\n"
      },
      {
        "text": "import * as React from \"react\";\nimport * as ToastPrimitives from \"@radix-ui/react-toast\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ToastProvider = ToastPrimitives.Provider;\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n));\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nToast.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors group-[.destructive]:border-muted/40 hover:bg-secondary group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 group-[.destructive]:focus:ring-destructive disabled:pointer-events-none disabled:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n));\nToastAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity group-hover:opacity-100 group-[.destructive]:text-red-300 hover:text-foreground group-[.destructive]:hover:text-red-50 focus:opacity-100 focus:outline-none focus:ring-2 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n));\nToastClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n));\nToastTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n));\nToastDescription.displayName = ToastPrimitives.Description.displayName;\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n};"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/components/ui/tooltip.tsx:\n"
      },
      {
        "text": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-foreground text-background animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-foreground fill-foreground z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Auth/Password/useChangePasswordMutation.ts:\n"
      },
      {
        "text": "import { authService } from \"@/services/authService\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport type {  ChangePasswordSchemaFormData } from \"@/schemas/authSchema\";\nexport const useChangePasswordMutation = () => {\n    return useMutation({\n        mutationFn: (data: ChangePasswordSchemaFormData) => authService.changePassword(data),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Auth/Password/useForgotPasswordMutation.ts:\n"
      },
      {
        "text": "import { authService } from \"@/services/authService\";\nimport type { ForgotPasswordSchemaFormData } from \"@/schemas/authSchema\";\nimport { useMutation } from \"@tanstack/react-query\";\nexport const useForgotPasswordMutation = () => {\n    return useMutation({\n        mutationFn: (data: ForgotPasswordSchemaFormData) => authService.forgotPassword(data),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Auth/Password/useResetPasswordMutation.ts:\n"
      },
      {
        "text": "import { useMutation } from \"@tanstack/react-query\";\nimport type { ResetPasswordSchemaFormData } from \"@/schemas/authSchema\";\nimport { authService } from \"@services/authService\";\n\nexport const useResetPasswordMutation = () => {\n    return useMutation({\n        mutationFn: (data:ResetPasswordSchemaFormData) => authService.resetPassword(data),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Auth/Password/useVerifyForgotPassword.ts:\n"
      },
      {
        "text": "import { authService } from \"@/services/authService\";\nimport { useMutation } from \"@tanstack/react-query\";\nexport const useVerifyForgotPasswordMutation = () => {\n    return useMutation({\n        mutationFn: (email_forgot_password_token : string) => authService.verifyForgotPassword(email_forgot_password_token),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Auth/useLoginMutation.ts:\n"
      },
      {
        "text": "import { useMutation } from \"@tanstack/react-query\";\nimport type { LoginSchemaFormData } from \"@/schemas/authSchema\";\nimport { authService } from \"@services/authService\";\nexport const useLoginMutation = () => {\n    return useMutation({\n        mutationFn: (data:LoginSchemaFormData) => authService.login(data),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Auth/useLogoutMutation.ts:\n"
      },
      {
        "text": "import { authService } from \"@/services/authService\";\nimport { useMutation } from \"@tanstack/react-query\";\nexport const useLogoutMutation = () => {\n    return useMutation({\n        mutationFn: (refresh_token:string) => authService.logout(refresh_token),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Auth/useRefreshTokenMutation.ts:\n"
      },
      {
        "text": "import { authService } from \"@/services/authService\";\nimport { useMutation } from \"@tanstack/react-query\";\nexport const useRefreshTokenMutation = () => {\n    return useMutation({\n        mutationFn: (refresh_token: string) => authService.refreshToken(refresh_token),\n    });\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Auth/useRegisterMutation.ts:\n"
      },
      {
        "text": "import { authService } from \"@/services/authService\";\nimport type { RegisterSchemaFormData } from \"@/schemas/authSchema\";\nimport { useMutation } from \"@tanstack/react-query\";\n\nexport const useRegisterMutation = () => {\n    return useMutation({\n        mutationFn: (data:RegisterSchemaFormData) => authService.register(data),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Auth/useResendVerifyEmailMutaiton.ts:\n"
      },
      {
        "text": "import { authService } from \"@/services/authService\";\nimport { useMutation } from \"@tanstack/react-query\";\n\nexport const useResendVerifyEmailMutation = () => {\n    return useMutation({\n        mutationFn: () => authService.resendVerifyEmail(),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Auth/useUpdateProfileMutation.ts:\n"
      },
      {
        "text": "import type {UpdateProfileSchemaFormData} from \"@schemas/authSchema\"\nimport { authService } from \"@services/authService\";\nimport { useMutation } from \"@tanstack/react-query\";\nexport const useUpdateProfileMutation = () => {\n    return useMutation({\n        mutationFn: (data: UpdateProfileSchemaFormData) => authService.updateProfile(data),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Auth/useVerifyEmail.ts:\n"
      },
      {
        "text": "import { authService } from \"@/services/authService\";\nimport { useMutation } from \"@tanstack/react-query\";\n\nexport const useVerifyEmailMutation = () => {\n    return useMutation({\n        mutationFn: (email_verify_token:string) => authService.verifyEmail(email_verify_token),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Bike/useCreateBike.ts:\n"
      },
      {
        "text": "import { useMutation } from \"@tanstack/react-query\";\nimport type { BikeSchemaFormData } from \"@schemas/bikeSchema\";\nimport { bikeService } from \"@/services/bikeService\";\nexport const useCreateBikeMutation = () => {\n    return useMutation({\n        mutationFn: (data:BikeSchemaFormData) => bikeService.createBikeAdmin(data),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Bike/useReportBike.ts:\n"
      },
      {
        "text": "import { useMutation } from \"@tanstack/react-query\";\nimport { bikeService } from \"@/services/bikeService\";\nexport const useReportBike = () => {\n    return useMutation({\n        mutationKey: [\"bikes\", \"report\"],\n        mutationFn: (id : string) => bikeService.reportBrokenBike(id),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Bike/useSoftDeleteBike.ts:\n"
      },
      {
        "text": "import { useMutation } from \"@tanstack/react-query\";\nimport { bikeService } from \"@/services/bikeService\";\nexport const useSoftDeleteBikeMutation = () => {\n    return useMutation({\n        mutationFn: (id : string) => bikeService.deleteBike(id),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/mutations/Bike/useUpdateBike.ts:\n"
      },
      {
        "text": "import { useMutation } from \"@tanstack/react-query\";\nimport { bikeService } from \"@/services/bikeService\";\nimport type { UpdateBikeSchemaFormData } from \"@/schemas/bikeSchema\";\n\nexport const useUpdateBike = () => {\n    return useMutation({\n        mutationKey: [\"bikes\", \"update\"],\n        mutationFn: ({ id, data }: { id: string; data: Partial<UpdateBikeSchemaFormData> }) => \n            bikeService.updateBike(id, data),\n    });\n};"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/query/Bike/useGetAllBikeCus.ts:\n"
      },
      {
        "text": "import { useQuery } from \"@tanstack/react-query\";\nimport { bikeService } from \"@/services/bikeService\";\n\nexport const useGetAllBikeQuery = (page: number = 1, limit: number = 10) => {\n    return useQuery({\n        queryKey: [\"bikes\", \"all\", page, limit],\n        queryFn: ({ queryKey }) => {\n            const [, , pageParam, limitParam] = queryKey;\n            return bikeService.getAllBikes(pageParam as number, limitParam as number);\n        },\n    });\n};"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/query/Bike/useGetBIkeByIDAll.ts:\n"
      },
      {
        "text": "import { useQuery } from \"@tanstack/react-query\";\nimport { bikeService } from \"@/services/bikeService\";\nexport const useGetBikeByIDAllQuery = (id: string) => {\n    return useQuery({\n        queryKey: [\"bikes\", \"detail\", id],\n        queryFn: () => bikeService.getBikeByIdForAll(id),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/query/Bike/useGetHistoryById.ts:\n"
      },
      {
        "text": "import { useQuery } from \"@tanstack/react-query\";\nimport { bikeService } from \"@/services/bikeService\";\nexport const useGetHistoryByIdQuery = (id: string) => {\n    return useQuery({\n        queryKey: [\"bikes\", \"history\", id],\n        queryFn: () => bikeService.getHistoryBikeById(id),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/query/Bike/useGetStatusBike.ts:\n"
      },
      {
        "text": "import { useQuery } from \"@tanstack/react-query\";\nimport { bikeService } from \"@/services/bikeService\";\nexport const useGetStatusBikeQuery = () => {\n    return useQuery({\n        queryKey: [\"bikes\", \"status\"],\n        queryFn: () => bikeService.getStatusBikeAdmin(),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/query/Bike/useGetStatusBikeByID.ts:\n"
      },
      {
        "text": "import { useQuery } from \"@tanstack/react-query\";\nimport { bikeService } from \"@/services/bikeService\";\nexport const useGetStatusBikeIDQuery = (id: string) => {\n    return useQuery({\n        queryKey: [\"bikes\", \"status\", id],\n        queryFn: () => bikeService.getStatusBikeByIdAdmin(id),\n    })\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/query/useUserProfileQuery.ts:\n"
      },
      {
        "text": "import { useQuery } from \"@tanstack/react-query\";\nimport { authService } from \"@/services/authService\";\nimport type { DetailUser } from \"@/services/authService\";\nimport { AxiosError } from \"axios\";\n\nexport const USER_PROFILE_QUERY_KEY = [\"user\",\"me\"];\n\n\nexport const fetchUserProfile = async (): Promise<DetailUser> => {\n  const response = await authService.getMe();\n  if(response.status === 200){\n    return response.data.result;\n  }\n  throw new Error(\"Failed to fetch user profile\");\n}\nexport function useUserProfileQuery(isAuthenticated: boolean) {\n    return useQuery<DetailUser, AxiosError>({\n        queryKey: USER_PROFILE_QUERY_KEY,\n        queryFn: fetchUserProfile,\n        enabled: isAuthenticated,\n        staleTime: 5 * 60 * 1000, // 5 minutes\n    });\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/use-mobile.ts:\n"
      },
      {
        "text": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/useAuthAction.ts:\n"
      },
      {
        "text": "import { useQueryClient } from \"@tanstack/react-query\";\nimport { useCallback } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { toast } from \"sonner\";\nimport {clearTokens , setTokens} from \"@utils/tokenManager\"\nimport { useChangePasswordMutation } from \"./mutations/Auth/Password/useChangePasswordMutation\";\nimport { useLoginMutation } from \"./mutations/Auth/useLoginMutation\";\nimport { useRegisterMutation } from \"./mutations/Auth/useRegisterMutation\";\nimport { useLogoutMutation } from \"./mutations/Auth/useLogoutMutation\";\nimport { ForgotPasswordSchemaFormData, LoginSchemaFormData, RegisterSchemaFormData, ResetPasswordSchemaFormData, UpdateProfileSchemaFormData } from \"@/schemas/authSchema\";\nimport { useVerifyEmailMutation } from \"./mutations/Auth/useVerifyEmail\";\nimport { useResendVerifyEmailMutation } from \"./mutations/Auth/useResendVerifyEmailMutaiton\";\nimport { useForgotPasswordMutation } from \"./mutations/Auth/Password/useForgotPasswordMutation\";\nimport { useResetPasswordMutation } from \"./mutations/Auth/Password/useResetPasswordMutation\";\nimport { useUpdateProfileMutation } from \"./mutations/Auth/useUpdateProfileMutation\";\ninterface ErrorResponse {\n    response?: {\n        data?: {\n            errors?: Record<string, { msg?: string }>;\n            message?: string;\n        };\n    };\n}\n\ninterface ErrorWithMessage {\n    message: string;\n}\n\nconst getErrorMessage = (error: unknown, defaultMessage: string): string => {\n    const axiosError = error as ErrorResponse;\n    if (axiosError?.response?.data) {\n        const { errors, message } = axiosError.response.data;\n        if (errors) {\n            const firstError = Object.values(errors)[0];\n            if (firstError?.msg) return firstError.msg;\n        }\n        if (message) return message;\n    }\n    const simpleError = error as ErrorWithMessage;\n    if (simpleError?.message) {\n        return simpleError.message;\n    }\n    \n    return defaultMessage;\n};\n\nexport const useAuthActions = () => {\n    const router = useRouter();\n    const queryClient = useQueryClient();\n    const useLogin = useLoginMutation();\n    const useRegister = useRegisterMutation();\n    const useLogout = useLogoutMutation();  \n    const useChangePassword = useChangePasswordMutation();\n    const useVerifyEmail = useVerifyEmailMutation();\n    const useUpdateProfile = useUpdateProfileMutation();\n    const useForgotPassword = useForgotPasswordMutation();\n    const useResetPassword = useResetPasswordMutation();\n    const useResendVerifyEmail = useResendVerifyEmailMutation();\n    const changePassword = useCallback(\n        (old_password: string, password: string , confirm_password : string) => {\n            useChangePassword.mutate(\n                {old_password, password , confirm_password},{\n                    onSuccess: (result) => {\n                        if(result.status === 200){\n                            toast.success(\"Password changed successfully\");\n                        } else{\n                            toast.error(\"Error changing password\");\n                        }\n                    },\n                    onError: (error: unknown) => {\n                        const errorMessage = getErrorMessage(error, \"Error changing password\");\n                        toast.error(errorMessage);\n                    }\n                }\n            )\n        },[useChangePassword]\n    );\n    const logIn = useCallback(\n        (data : LoginSchemaFormData) => {\n            useLogin.mutate(data, {\n                onSuccess: (result) => {\n                    const { access_token, refresh_token } = result.data.result;\n                    setTokens(access_token, refresh_token);\n                    window.dispatchEvent(new StorageEvent('storage', { key: 'auth_tokens' }));\n                    toast.success(\"Logged in successfully\");\n                    queryClient.invalidateQueries({ queryKey: [\"user\", \"me\"] });\n                    // const unsubscribe = queryClient.getQueryCache().subscribe((event) => {\n                    //     if (event?.query?.queryKey?.[0] === \"user\" && \n                    //         event?.query?.queryKey?.[1] === \"me\" && \n                    //         event.type === \"updated\" &&\n                    //         event.query.state.data) {\n                    //         const userProfile = event.query.state.data as unknown as { role: string };\n                    //         if (userProfile?.role === \"ADMIN\") {\n                    //             router.push(\"/admin\");\n                    //         } else if (userProfile?.role === \"STAFF\") {\n                    //             router.push(\"/staff\");\n                    //         } else {\n                    //             router.push(\"/user\");\n                    //         }\n                    //         unsubscribe(); \n                    //     }\n                    // });\n                    // setTimeout(() => {\n                    //     unsubscribe();\n                    // }, 3000);\n                },\n                onError: (error: unknown) => {\n                    const errorMessage = getErrorMessage(error, \"Error logging in\");\n                    toast.error(errorMessage);\n                }\n            });\n        },[useLogin , queryClient]\n    )\n    const register = useCallback((\n        data:RegisterSchemaFormData) => {\n        useRegister.mutate(data,{\n            onSuccess: (result) => {\n                if(result.status === 201){\n                    const { access_token, refresh_token } = result.data.result;\n                    setTokens(access_token, refresh_token);\n                    queryClient.invalidateQueries({ queryKey: [\"user\", \"me\"] });\n                    toast.success(\"Registration Successful\", { description: \"Your account has been created.\" });\n                    router.push(\"/auth/login\");\n                }else{\n                    const errorMessage = result.data?.message || \"Error registering\";\n                    toast.error(errorMessage);\n                }\n            },\n            onError: (error: unknown) => {\n                const errorMessage = getErrorMessage(error, \"Error registering\");\n                toast.error(errorMessage);\n            }\n        });\n    },[useRegister,queryClient,router]);\n    const logOut = useCallback((refresh_token : string) => {\n        useLogout.mutate(refresh_token,{\n            onSuccess: (result) => {\n                if(result.status === 200){\n                    clearTokens();\n                    // Trigger storage event to update hasToken state\n                    window.dispatchEvent(new StorageEvent('storage', { key: 'auth_tokens' }));\n                    queryClient.invalidateQueries({ queryKey: [\"user\", \"me\"] });\n                    toast.success(\"Logged out successfully\");\n                    router.push(\"/auth/login\");\n                }else{\n                    const errorMessage = result.data?.message || \"Error logging out\";\n                    toast.error(errorMessage);\n                }\n            },\n            onError: (error: unknown) => {\n                const errorMessage = getErrorMessage(error, \"Error logging out\");\n                toast.error(errorMessage);\n            }\n        });\n    },[useLogout, queryClient, router]);\n    const verifyEmail = useCallback((email_verify_token: string): Promise<void> => {\n        return new Promise((resolve, reject) => {\n            useVerifyEmail.mutate(email_verify_token, {\n                onSuccess: (result) => {\n                    if(result.status === 200){\n                        toast.success(\"Email verified successfully\");\n                        queryClient.invalidateQueries({ queryKey: [\"user\", \"me\"] });\n                        resolve();\n                    } else {\n                        const errorMessage = result.data?.message || \"Error verifying email\";\n                        toast.error(errorMessage);\n                        reject(new Error(errorMessage));\n                    }\n                },\n                onError: (error: unknown) => {\n                    const errorMessage = getErrorMessage(error, \"Error verifying email\");\n                    toast.error(errorMessage);\n                    reject(error);\n                }\n            });\n        });\n    }, [useVerifyEmail,queryClient]);\n    const resendVerifyEmail = useCallback(() => {\n        useResendVerifyEmail.mutate(undefined,{\n            onSuccess: (result) => {\n                if(result.status === 200){\n                    toast.success(\"Verification email resent successfully\");\n                }else{\n                    const errorMessage = result.data?.message || \"Error resending verification email\";\n                    toast.error(errorMessage);\n                }\n            },\n            onError: (error: unknown) => {\n                const errorMessage = getErrorMessage(error, \"Error resending verification email\");\n                toast.error(errorMessage);\n            }\n        });\n    }, [useResendVerifyEmail]);\n    const forgotPassword = useCallback(\n      (data: ForgotPasswordSchemaFormData) => {\n        useForgotPassword.mutate(data, {\n          onSuccess: (result) => {\n            if (result.status === 200) {\n              toast.success(\"Password reset email sent successfully\");\n            } else {\n              const errorMessage =\n                result.data?.message || \"Error sending password reset email\";\n              toast.error(errorMessage);\n            }\n          },\n          onError: (error: unknown) => {\n            const errorMessage = getErrorMessage(\n              error,\n              \"Error sending password reset email\"\n            );\n            toast.error(errorMessage);\n          },\n        });\n      },\n      [useForgotPassword]\n    );\n    \n    const resetPassword = useCallback((data: ResetPasswordSchemaFormData) => {\n        useResetPassword.mutate(data,{\n            onSuccess: (result) => {\n                if(result.status === 200){ \n                    toast.success(\"Password reset successfully\");\n                    router.push(\"/auth/login\");\n                } else{\n                    const errorMessage = result.data?.message || \"Error resetting password\";\n                    toast.error(errorMessage);\n                }\n            },\n            onError: (error: unknown) => {\n                const errorMessage = getErrorMessage(error, \"Error resetting password\");\n                toast.error(errorMessage);\n            }\n        });\n    }, [useResetPassword, router]);\n    const updateProfile = useCallback((data: UpdateProfileSchemaFormData) => {\n        useUpdateProfile.mutate(data, {\n            onSuccess: (result) => {\n                if(result.status === 200){\n                    toast.success(\"Profile updated successfully\");\n                    queryClient.invalidateQueries({ queryKey: [\"user\", \"me\"] });\n                } else {\n                    const errorMessage = result.data?.message || \"Error updating profile\";\n                    toast.error(errorMessage);\n                }\n            },\n            onError: (error: unknown) => {\n                const errorMessage = getErrorMessage(error, \"Error updating profile\");\n                toast.error(errorMessage);\n            }\n        });\n    }, [useUpdateProfile, queryClient]);\n    return {\n      changePassword,\n      logIn,\n      register,\n      logOut,\n      verifyEmail,\n      resendVerifyEmail,\n      forgotPassword,\n      resetPassword,\n      updateProfile,\n      isUpdatingProfile: useUpdateProfile.isPending,\n      isChangingPassword: useChangePassword.isPending,\n      isRegistering: useRegister.isPending,\n      isReseting: useResetPassword.isPending,\n      isLoadingForgottingPassword: useForgotPassword.isPending,\n      isLoggingIn: useLogin.isPending,\n    };\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/useBikeAction.ts:\n"
      },
      {
        "text": "import { useQueryClient } from \"@tanstack/react-query\";\nimport { useCallback } from \"react\";\nimport { toast } from \"sonner\";\nimport { useGetAllBikeQuery } from \"./query/Bike/useGetAllBikeCus\";\nimport { useCreateBikeMutation } from \"./mutations/Bike/useCreateBike\";\nimport type  { BikeSchemaFormData, UpdateBikeSchemaFormData } from \"@/schemas/bikeSchema\";\nimport { useUpdateBike } from \"./mutations/Bike/useUpdateBike\";\nimport { useSoftDeleteBikeMutation } from \"./mutations/Bike/useSoftDeleteBike\";\nimport { useReportBike } from \"./mutations/Bike/useReportBike\";\nimport { useGetBikeByIDAllQuery } from \"./query/Bike/useGetBIkeByIDAll\";\nimport { useGetStatusBikeQuery } from \"./query/Bike/useGetStatusBike\";\nimport { useRouter } from \"next/router\";\nimport { useGetStatusBikeIDQuery } from \"./query/Bike/useGetStatusBikeByID\";\ninterface ErrorResponse {\n  response?: {\n    data?: {\n      errors?: Record<string, { msg?: string }>;\n      message?: string;\n    };\n  };\n}\n\ninterface ErrorWithMessage {\n  message: string;\n}\n\nconst getErrorMessage = (error: unknown, defaultMessage: string): string => {\n  const axiosError = error as ErrorResponse;\n  if (axiosError?.response?.data) {\n    const { errors, message } = axiosError.response.data;\n    if (errors) {\n      const firstError = Object.values(errors)[0];\n      if (firstError?.msg) return firstError.msg;\n    }\n    if (message) return message;\n  }\n  const simpleError = error as ErrorWithMessage;\n  if (simpleError?.message) {\n    return simpleError.message;\n  }\n\n  return defaultMessage;\n};\nexport const useBikeActions = (\n  hasToken : boolean, \n  bikeId?: string\n) => {\n    const router = useRouter();\n    const useGetBikes = useGetAllBikeQuery();\n    const useCreateBike = useCreateBikeMutation();\n    const useGetStatusBike = useGetStatusBikeQuery();\n    const useGetStatusBikeByID = useGetStatusBikeIDQuery(bikeId || '');\n    const updateBikeMutation = useUpdateBike();\n    const deleteBikeMutation = useSoftDeleteBikeMutation();\n    const reportBikeMutation = useReportBike();\n    const useGetDetailBike = useGetBikeByIDAllQuery(bikeId || '');\n    const queryClient = useQueryClient();\n    const getBikes = useCallback(() => {\n        if(!hasToken){\n            router.push('/login');\n            return;\n        };\n        useGetBikes.refetch();\n    }, [useGetBikes, hasToken, router]);\n    const createBike = useCallback(\n      (data: BikeSchemaFormData) => {\n        if (!hasToken) {\n          router.push(\"/login\");\n          return;\n        }\n        useCreateBike.mutate(data, {\n          onSuccess: (result) => {\n            if (result.status === 201) {\n              toast.success(\"Bike created successfully\");\n            } else {\n              const errorMessage =\n                result.data?.message || \"Error creating bikes\";\n              toast.error(errorMessage);\n            }\n          },\n          onError: (error) => {\n            const errorMessage = getErrorMessage(error, \"Error creating bikes\");\n            toast.error(errorMessage);\n          },\n        });\n      },\n      [useCreateBike, hasToken, router]\n    );\n    const updateBike = useCallback(\n      (data: UpdateBikeSchemaFormData, id: string) => {\n        if (!hasToken) {\n          router.push(\"/login\");\n          return;\n        }\n        updateBikeMutation.mutate(\n          { id, data },\n          {\n            onSuccess: (result) => {\n              if (result.status === 200) {\n                toast.success(\"Bike updated successfully\");\n              } else {\n                const errorMessage =\n                  result.data?.message || \"Error updating bikes\";\n                toast.error(errorMessage);\n              }\n            },\n            onError: (error) => {\n              const errorMessage = getErrorMessage(\n                error,\n                \"Error updating bikes\"\n              );\n              toast.error(errorMessage);\n            },\n          }\n        );\n      },\n      [updateBikeMutation, hasToken, router]\n    );\n    const deleteBike = useCallback(\n      (id: string) => {\n        if (!hasToken) {\n          router.push(\"/login\");\n          return;\n        }\n        deleteBikeMutation.mutate(id, {\n          onSuccess: (result) => {\n            if (result.status === 200) {\n              toast.success(\"Bike deleted successfully\");\n              queryClient.invalidateQueries({ queryKey: [\"bikes\"] });\n            } else {\n              const errorMessage =\n                result.data?.message || \"Error deleting bikes\";\n              toast.error(errorMessage);\n            }\n          },\n          onError: (error) => {\n            const errorMessage = getErrorMessage(error, \"Error deleting bikes\");\n            toast.error(errorMessage);\n          },\n        });\n      },\n      [deleteBikeMutation, hasToken, router, queryClient]\n    );\n    const reportBike = useCallback(\n    (id: string) => {\n      if (!hasToken) {\n        router.push(\"/login\");\n        return;\n      }\n      reportBikeMutation.mutate(id, {\n        onSuccess: (result) => {\n          if (result.status === 200) {\n            toast.success(\"Bike reported successfully\");\n          } else {\n            const errorMessage = result.data?.message || \"Error reporting bike\";\n            toast.error(errorMessage);\n          }\n        },\n        onError: (error) => {\n          const errorMessage = getErrorMessage(error, \"Error reporting bike\");\n          toast.error(errorMessage);\n        },\n      });\n    },\n    [reportBikeMutation, hasToken, router]\n    );\n    const getBikeByID = useCallback(() => {\n      useGetDetailBike.refetch();\n    }, [useGetDetailBike]);\n    const getStatusBike = useCallback(() => {\n      useGetStatusBike.refetch();\n    }, [useGetStatusBike]);\n    const getStatusBikeByID = useCallback(() => {\n      useGetStatusBikeByID.refetch();\n    } , [useGetStatusBikeByID]);\n    return {\n      getBikes,\n      createBike,\n      updateBike,\n      deleteBike,\n      reportBike,\n      getBikeByID,\n      getStatusBike,\n      getStatusBikeByID,\n      isFetchingStatusBikeByID: useGetStatusBikeByID.isFetching,\n      isFetchingStatusBike: useGetStatusBike.isFetching,\n      isFetchingBikeDetail: useGetBikes.isFetching,\n      isFetchingBike: useGetDetailBike.isFetching,\n      isReportingBike: reportBikeMutation.isPending,\n      isDeletingBike: deleteBikeMutation.isPending,\n      isGettingBikes: useGetBikes.isFetching,\n      isUpdatingBike: updateBikeMutation.isPending,\n      isCreatingBike: useCreateBike.isPending,\n    };\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/hooks/useRentalAction.ts:\n"
      },
      {
        "text": ""
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/lib/httpClient.ts:\n"
      },
      {
        "text": "import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport {clearTokens,getAccessToken,getRefreshToken,setTokens} from \"@utils/tokenManager\"\nexport const HTTP_STATUS = {\n  OK: 200,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  INTERNAL_SERVER_ERROR: 500,\n  SERVICE_UNAVAILABLE: 503,\n};\n\nexport class FetchHttpClient {\n  private baseURL: string;\n  private axiosInstance: AxiosInstance;\n  private isRefreshing = false;\n  private failedQueue: Array<{\n    resolve: (value: string | null) => void;\n    reject: (reason?: unknown) => void;\n  }> = [];\n\n  constructor(baseURL: string) {\n    this.baseURL = baseURL;\n    this.axiosInstance = axios.create({\n      baseURL: this.baseURL,\n      headers: {\n        \"Content-Type\": \"application/json;charset=UTF-8\",\n      },\n       timeout: 30000, // Tăng lên 30 giây để đủ thời gian cho email service\n    });\n    this.axiosInstance.interceptors.request.use((config) => {\n      const access_token = getAccessToken();\n      if (access_token && !config.headers?.Authorization) {\n        config.headers.Authorization = `Bearer ${access_token}`;\n      }\n      return config;\n    });\n\n    this.axiosInstance.interceptors.response.use(\n      (response) => {\n        console.log('API Response:', response.status, response.config.url);\n        return response;\n      },\n      async (error) => {\n        console.log('API Error:', error.response?.status, error.config?.url, error.response?.data);\n        const originalRequest = error.config;\n        if (error.response?.status === HTTP_STATUS.UNAUTHORIZED) {\n         window.dispatchEvent(new Event(\"auth:session_expired\"));\n          if (this.isRefreshing) {\n            return new Promise((resolve, reject) => {\n              this.failedQueue.push({ resolve, reject });\n            })\n              .then((token) => {\n                if (token && originalRequest.headers) {\n                  originalRequest.headers.Authorization = `Bearer ${token}`;\n                }\n                return this.axiosInstance(originalRequest);\n              })\n              .catch((err) => {\n                return Promise.reject(err);\n              });\n          }\n\n          this.isRefreshing = true;\n          try {\n            const newToken = await this.refreshAccessToken();\n            this.processQueue(null, newToken);\n            window.dispatchEvent(new Event(\"auth:token_refreshed\"));\n            if (originalRequest.headers) {\n              originalRequest.headers.Authorization = `Bearer ${newToken}`;\n            }\n            return this.axiosInstance(originalRequest);\n          } catch (refreshError) {\n            this.processQueue(refreshError, null);\n            return Promise.reject(refreshError);\n          } finally {\n            this.isRefreshing = false;\n          }\n        }\n        // switch (error.response?.status) {\n        //   case HTTP_STATUS.FORBIDDEN:\n        //     console.log(\"API: 403 Forbidden\");\n        //     window.location.href = `/error/${HTTP_STATUS.FORBIDDEN}`;\n        //     break;\n        //   case HTTP_STATUS.NOT_FOUND:\n        //     console.log(\"API: 404 Not Found\");\n        //     break;\n        //   // case HTTP_STATUS.INTERNAL_SERVER_ERROR:\n        //   //   console.log(\"API: 500 Internal Server Error\");\n        //   //   window.location.href = `/error/${HTTP_STATUS.INTERNAL_SERVER_ERROR}`;\n        //   //   break;\n        //   case HTTP_STATUS.SERVICE_UNAVAILABLE:\n        //     console.log(\"API: 503 Service Unavailable\");\n        //     window.location.href = `/error/${HTTP_STATUS.SERVICE_UNAVAILABLE}`;\n        //     break;\n        //   default:\n        //     console.error(`API Error: ${error.response?.status}`);\n        // }\n\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  private async refreshAccessToken(): Promise<string> {\n    const refreshToken = getRefreshToken();\n    console.log('Refreshing token with:', refreshToken);\n    if (!refreshToken) {\n      throw new Error(\"No refresh token available\");\n    }\n    const response = await axios.post(\n      `${this.baseURL}/users/refresh-token`,\n      { refresh_token: refreshToken },\n      { headers: { \"Content-Type\": \"application/json\" } }\n    );\n    console.log('Refresh token response:', response.status, response.data);\n    if (response.status !== HTTP_STATUS.OK) {\n      clearTokens();\n      window.location.href = \"/login\";\n      throw new Error(\"Refresh token expired\");\n    }\n    const data = response.data;\n    setTokens(data.result.access_token, data.result.refresh_token);\n    return data.result.access_token;\n  }\n\n  private processQueue(error: unknown, token: string | null) {\n    this.failedQueue.forEach(({ resolve, reject }) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(token);\n      }\n    });\n    this.failedQueue = [];\n  }\n \n   async get<T>(url: string, params?: AxiosRequestConfig[\"params\"]): Promise<AxiosResponse<T>> {\n    return this.axiosInstance.get(url, {\n      params: params ?? {},\n    });\n  }\n\n   async post<T>(\n    url: string,\n    data?: AxiosRequestConfig[\"data\"],\n    config?: AxiosRequestConfig<unknown> | undefined\n  ): Promise<AxiosResponse<T>> {\n    return this.axiosInstance.post(url, data, config);\n  }\n  //axios.put(url[, data[, config]])\n  async put<T>(\n    url: string,\n    data?: AxiosRequestConfig[\"data\"],\n    config?: AxiosRequestConfig<unknown> | undefined\n  ): Promise<AxiosResponse<T>> {\n    return this.axiosInstance.put(url, data, config);\n  }\n  //axios.patch(url[, data[, config]])\n  async patch<T>(\n    url: string,\n    data?: AxiosRequestConfig[\"data\"],\n    config?: AxiosRequestConfig<unknown> | undefined\n  ): Promise<AxiosResponse<T>> {\n    return this.axiosInstance.patch(url, data, config);\n  }\n  //axios.delete(url[, config])\n  async delete<T>(url: string, params?: AxiosRequestConfig[\"params\"]): Promise<AxiosResponse<T>> {\n    return this.axiosInstance.delete(url, {\n      params,\n    });\n  }\n}\n\nconst fetchHttpClient = new FetchHttpClient(\n  process.env.NEXT_PUBLIC_API_BASE_URL || \"\"\n);\n\nexport default fetchHttpClient;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/lib/utils.ts:\n"
      },
      {
        "text": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/providers/auth-providers.tsx:\n"
      },
      {
        "text": "\"use client\";\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useAuthActions } from \"@hooks/useAuthAction\";\nimport { getAccessToken , clearTokens} from \"@/utils/tokenManager\";\nimport { DetailUser } from \"@/services/authService\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useUserProfileQuery } from \"@hooks/query/useUserProfileQuery\";\ninterface AuthError {\n  response?: {\n    status: number;\n  };\n}\ntype AuthContextType = ReturnType<typeof useAuthActions> & {\n  user : DetailUser | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  actions : ReturnType<typeof useAuthActions>;\n};\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\nexport const AuthProvider:React.FC<{children : React.ReactNode}> = ({ children }) => {\n  const [hasToken, setHasToken] = useState<boolean>(false);\n  const [isInitialized, setIsInitialized] = useState<boolean>(false);\n  const queryClient = useQueryClient();\n  const { data: userProfile, isLoading: isUserProfileLoading , isError , isSuccess  } = useUserProfileQuery(hasToken);\n  const actions = useAuthActions();\n  useEffect(() => {\n    setHasToken(!!getAccessToken());\n    setIsInitialized(true);\n    const handleStorageChange = () => {\n      setHasToken(!!getAccessToken());\n    };\n    const handleAuthFailure = () => {\n      clearTokens();\n      setHasToken(false);\n      queryClient.clear();\n    };\n    window.addEventListener(\"storage\", handleStorageChange);\n    window.addEventListener(\"auth:session_expired\", handleAuthFailure);\n    return () => {\n      window.removeEventListener(\"storage\", handleStorageChange);\n      window.removeEventListener(\"auth:session_expired\", handleAuthFailure);\n    };\n  }, [queryClient]);\n  \n  useEffect(() => {\n    if (isError && hasToken && isInitialized) {\n      const authError = isError as unknown as AuthError;\n      const hasResponse = authError?.response && typeof authError.response === \"object\";\n      const status = hasResponse && authError.response ? authError.response.status : undefined;\n      const isAuthError = hasResponse && (status === 401 || status === 403);\n      \n      if (isAuthError) {\n        clearTokens();\n        setHasToken(false);\n        queryClient.clear();\n      }\n    }\n  }, [isError, hasToken, queryClient, isInitialized]);\n\n const value: AuthContextType = React.useMemo(() => {\n    const user = userProfile as DetailUser || null;\n    const isAuthenticated = !!user && isSuccess && isInitialized;\n    return {\n      ...actions,\n      user,\n      isAuthenticated,\n      isLoading: isUserProfileLoading || !isInitialized,\n      actions,\n    };\n  }, [userProfile, isUserProfileLoading, isSuccess, actions, isInitialized]);\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const ctx = useContext(AuthContext);\n  if (!ctx) {\n    throw new Error(\"useAuth must be used inside AuthProvider\");\n  }\n  return ctx;\n};"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/providers/get-query-client.ts:\n"
      },
      {
        "text": "import { QueryClient } from \"@tanstack/react-query\";\n    \n    function makeQueryClient() {\n        return new QueryClient({\n            defaultOptions: {\n                queries: {\n                    staleTime: 1000 * 60 * 5,\n                },\n            },\n        });\n    }\n    \n    let browserQueryClient: QueryClient | undefined = undefined;\n    \n    function isServer() {\n        return typeof window === \"undefined\";\n    }\n    \n    export function getQueryClient() {\n        if (isServer()) {\n            return makeQueryClient();\n        }\n        if (!browserQueryClient) {\n            browserQueryClient = makeQueryClient();\n        }\n        return browserQueryClient;\n    }"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/providers/providers.tsx:\n"
      },
      {
        "text": "\"use client\"\nimport { QueryClientProvider } from \"@tanstack/react-query\"\nimport {getQueryClient} from \"./get-query-client\"\nimport { Toaster } from \"@/components/ui/sonner\"\n\nexport default function Providers({children} : {children: React.ReactNode}) {\n    const queryClient = getQueryClient();\n    return (\n        <QueryClientProvider client={queryClient}>\n            {children}\n            <Toaster />\n        </QueryClientProvider>\n    )\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/schemas/authSchema.ts:\n"
      },
      {
        "text": "import * as z from \"zod\";\nconst vietnamesePhoneNumberRegex = /^(0[3|5|7|8|9])+([0-9]{8})\\b/;\nexport const loginSchema = z.object({\n  email: z.email({ message: \"Email không hợp lệ\" }),\n  password: z.string().min(8, { message: \"Mật khẩu phải có ít nhất 8 ký tự\" }),\n  rememberMe: z.boolean().optional(),\n});\nexport type LoginSchemaFormData = z.infer<typeof loginSchema>;\nexport type RegisterSchemaFormData = z.infer<typeof registerSchema>;\nexport type ForgotPasswordSchemaFormData = z.infer<typeof forgotPasswordSchema>;\nexport type ChangePasswordSchemaFormData = z.infer<typeof changePasswordSchema>;\nexport type UpdateProfileSchemaFormData = z.infer<typeof profileUpdateSchema>;\nexport type ResetPasswordSchemaFormData = z.infer<typeof resetPasswordSchema>;\nexport const registerSchema = z\n  .object({\n    full_name: z\n      .string()\n      .min(1, { message: \"Họ không được để trống\" })\n      .max(30, { message: \"Họ không được vượt quá 30 ký tự\" }),\n    email: z.email({ message: \"Email không hợp lệ\" }),\n    password: z\n      .string()\n      .min(8, { message: \"Mật khẩu phải có ít nhất 8 ký tự\" }),\n    phone_number: z\n      .string()\n      .regex(vietnamesePhoneNumberRegex, {\n        message: \"Số điện thoại không hợp lệ\",\n      })\n      .optional(),\n    confirm_password: z\n      .string()\n      .min(8, { message: \"Mật khẩu phải có ít nhất 8 ký tự\" }),\n  })\n  .refine((data) => data.password === data.confirm_password, {\n    message: \"Mật khẩu xác nhận không khớp\",\n    path: [\"confirm_password\"],\n  });\nexport const forgotPasswordSchema = z.object({\n  email: z.email({ message: \"Email không hợp lệ\" }),\n});\nexport const changePasswordSchema = z\n  .object({\n    old_password: z\n      .string()\n      .min(8, { message: \"Mật khẩu cũ phải có ít nhất 8 ký tự\" })\n      .max(30, { message: \"Mật khẩu cũ không được vượt quá 32 ký tự\" }),\n    password: z\n      .string()\n      .min(8, { message: \"Mật khẩu mới phải có ít nhất 8 ký tự\" })\n      .max(30, { message: \"Mật khẩu không được vượt quá 32 ký tự\" }),\n    confirm_password: z\n      .string()\n      .min(8, { message: \"Mật khẩu phải có ít nhất 8 ký tự\" })\n      .max(30, { message: \"Mật khẩu không được vượt quá 30 ký tự\" }),\n  })\n  .refine((data) => data.password === data.confirm_password, {\n    message: \"Mật khẩu xác nhận không khớp\",\n    path: [\"confirm_password\"],\n  });\nexport const profileUpdateSchema = z.object({\n  fullname: z\n    .string()\n    .min(3, { message: \"Họ và tên phải có ít nhất 3 ký tự\" })\n    .max(50, { message: \"Họ và tên không được vượt quá 50 ký tự\" }),\n  location: z\n    .string()\n    .min(20, { message: \"Địa điểm phải có ít nhất 20 ký tự\" })\n    .max(50, { message: \"Địa điểm không được vượt quá 100 ký tự\" }),\n  username: z\n    .string()\n    .min(3, \"Username must be at least 3 characters.\")\n    .max(30, \"Username cannot exceed 30 characters.\")\n    .regex(\n      /^[a-zA-Z0-9_]+$/,\n      \"Username can only contain letters, numbers, and underscores.\"\n    )\n    .optional()\n    .or(z.literal(\"\")),\n  phone_number: z\n    .string()\n    .regex(vietnamesePhoneNumberRegex, {  \n      message: \"Số điện thoại không hợp lệ\",\n    })\n    .optional()\n    .or(z.literal(\"\")),  \n  avatar: z\n    .url({ message: \"Please enter a valid URL for the avatar.\" })\n    .optional()\n    .or(z.literal(\"\")),\n});\nexport const resetPasswordSchema = z.object({\n  password: z\n    .string()\n    .min(8, { message: \"Mật khẩu mới phải có ít nhất 8 ký tự\" })\n    .max(30, { message: \"Mật khẩu không được vượt quá 32 ký tự\" }),\n  confirm_password: z\n    .string()\n    .min(8, { message: \"Mật khẩu phải có ít nhất 8 ký tự\" })\n    .max(30, { message: \"Mật khẩu không được vượt quá 30 ký tự\" }),\n  forgot_password_token: z.string().nonempty({ message: \"Token không được để trống\" }),\n});"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/schemas/bikeSchema.ts:\n"
      },
      {
        "text": "import * as z from \"zod\";\n\n// Helper function to validate MongoDB ObjectId\nconst isValidObjectId = (id: string): boolean => {\n  return /^[0-9a-fA-F]{24}$/.test(id);\n};\nexport const bikeSchema = z.object({\n  station_id: z\n    .string()\n    .min(24, \"Station ID must be a valid ObjectId\")\n    .max(24, \"Station ID must be a valid ObjectId\")\n    .refine(isValidObjectId, {\n      message: \"Station ID must be a valid MongoDB ObjectId\",\n    }),\n  status: z.boolean(),\n  supplier_id: z\n    .string()\n    .min(24, \"Supplier ID must be a valid ObjectId\")\n    .max(24, \"Supplier ID must be a valid ObjectId\")\n    .refine(isValidObjectId, {\n      message: \"Supplier ID must be a valid MongoDB ObjectId\",\n    })\n    .optional(),\n});\nexport const updateBikeSchema = z.object({\n  station_id: z\n    .string()\n    .min(24, \"Station ID must be a valid ObjectId\")\n    .max(24, \"Station ID must be a valid ObjectId\")\n    .refine(isValidObjectId, {\n      message: \"Station ID must be a valid MongoDB ObjectId\",\n    }),\n  status: z.boolean(),\n  supplier_id: z\n    .string()\n    .min(24, \"Supplier ID must be a valid ObjectId\")\n    .max(24, \"Supplier ID must be a valid ObjectId\")\n    .refine(isValidObjectId, {\n      message: \"Supplier ID must be a valid MongoDB ObjectId\",\n    })\n    .optional(),\n});\nexport type BikeSchemaFormData = z.infer<typeof bikeSchema>;\nexport type UpdateBikeSchemaFormData = z.infer<typeof updateBikeSchema>;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/schemas/rentalSchema.ts:\n"
      },
      {
        "text": "import * as z from \"zod\";\n\nconst isValidObjectId = (id: string): boolean => {\n  return /^[0-9a-fA-F]{24}$/.test(id);\n};\nexport const rentalSchema = z.object({\n    bike_id : z\n      .string()\n      .min(24, \"Station ID must be a valid ObjectId\")\n      .max(24, \"Station ID must be a valid ObjectId\")\n      .refine(isValidObjectId, {\n        message: \"Station ID must be a valid MongoDB ObjectId\",\n      }),\n});\nexport type RentalSchemaFormData = z.infer<typeof rentalSchema>;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/services/authService.ts:\n"
      },
      {
        "text": "import fetchHttpClient from \"@/lib/httpClient\";\nimport type {UpdateProfileSchemaFormData , ChangePasswordSchemaFormData , ForgotPasswordSchemaFormData , LoginSchemaFormData, RegisterSchemaFormData , ResetPasswordSchemaFormData}  from \"@schemas/authSchema\";\nimport type { AxiosResponse } from \"axios\";\ninterface AuthResponse {\n    message : string;\n    result : {\n        access_token : string;\n        refresh_token : string;\n    }\n}\ninterface MessageResponse{\n    message:string;\n}\nexport const ROLES = [\"USER\", \"ADMIN\", \"STAFF\"] as const;\nexport type RoleType = typeof ROLES[number];\nexport interface DetailUser {\n  _id: string;\n  fullname: string;\n  email: string;\n  verify: string;\n  location: string;\n  username: string;\n  phone_number: string;\n  avatar: string;\n  role: \"STAFF\" | \"ADMIN\" | \"USER\";\n  created_at: string;\n  updated_at: string;\n}\nexport interface ProfileUserResponse{\n    message:string;\n    result:DetailUser;\n}\nexport const authService = {\n    login:async (data : LoginSchemaFormData) : Promise<AxiosResponse<AuthResponse>>=>{\n        const response = await fetchHttpClient.post<AuthResponse>(\"/users/login\",data);\n        return response;\n    },\n    register: async (data : RegisterSchemaFormData) : Promise<AxiosResponse<AuthResponse>>=>{\n        const response = await fetchHttpClient.post<AuthResponse>(\"/users/register\",data);\n        return response;\n    },\n    logout : async (refresh_token : string) : Promise<AxiosResponse<MessageResponse>> => {\n        const response = await fetchHttpClient.post<MessageResponse>(\"/users/logout\", { refresh_token });\n        return response;\n    },\n    resendVerifyEmail : async () : Promise<AxiosResponse<MessageResponse>> => {\n        const response = await fetchHttpClient.post<MessageResponse>(\"/users/resend-verify-email\");\n        return response;\n    },\n    verifyEmail : async (email_verify_token : string) : Promise<AxiosResponse<MessageResponse>> => {\n        const response = await fetchHttpClient.post<MessageResponse>(\"/users/verify-email\", { email_verify_token });\n        return response;\n    },\n    getMe : async() : Promise<AxiosResponse<ProfileUserResponse>> => {\n        const response = await fetchHttpClient.get<ProfileUserResponse>(\"/users/me\");\n        return response;\n    },\n    refreshToken : async (refresh_token : string) : Promise<AxiosResponse<AuthResponse>> => {\n        const response = await fetchHttpClient.post<AuthResponse>(\"/users/refresh-token\", { refresh_token });\n        return response;\n    },\n    updateProfile : async(data : UpdateProfileSchemaFormData) : Promise<AxiosResponse<ProfileUserResponse>> => {\n        const response = await fetchHttpClient.patch<ProfileUserResponse>(\"/users/me\", data);\n        return response;\n    },\n    changePassword:async(data:ChangePasswordSchemaFormData) : Promise<AxiosResponse<MessageResponse>> => {\n        const response = await fetchHttpClient.put<MessageResponse>(\"/users/change-password\", data);\n        return response;\n    },\n    forgotPassword : async(data:ForgotPasswordSchemaFormData) : Promise<AxiosResponse<MessageResponse>> => {\n        const response = await fetchHttpClient.post<MessageResponse>(\"/users/forgot-password\", data);\n        return response;\n    },\n    verifyForgotPassword: async (email_forgot_password_token : string) : Promise<AxiosResponse<MessageResponse>> => {\n        const response = await fetchHttpClient.post<MessageResponse>(\"/users/verify-forgot-password\", { email_forgot_password_token });\n        return response;\n    },\n    resetPassword : async ( data : ResetPasswordSchemaFormData) : Promise<AxiosResponse<MessageResponse>> => {\n        const response = await fetchHttpClient.post<MessageResponse>(\"/users/reset-password\", data);\n        return response;\n    }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/services/bikeService.ts:\n"
      },
      {
        "text": "import fetchHttpClient from \"@/lib/httpClient\";\nimport type { AxiosResponse } from \"axios\";\nimport type {\n  BikeSchemaFormData,\n  UpdateBikeSchemaFormData,\n} from \"@schemas/bikeSchema\";\n\nconst BIKE_BASE = \"/bikes\";\nconst BIKE_ENDPOINTS = {\n  BASE: BIKE_BASE,\n  STATS: `${BIKE_BASE}/stats`,\n  BY_ID: (id: string) => `${BIKE_BASE}/${id}/rentals`,\n  BY_ID_ADMIN_STATS: (id: string) => `${BIKE_BASE}/${id}/stats`,\n  BY_ID_FOR_ALL: (id: string) => `${BIKE_BASE}/${id}`,\n  REPORT_BROKEN: (id: string) => `${BIKE_BASE}/report-broken/${id}`,\n  DELETE: (id: string) => `${BIKE_BASE}/${id}`,\n  UPDATE: (id: string) => `${BIKE_BASE}/admin-update/${id}`,\n} as const;\n\nexport const bikeService = {\n  //for admin\n\n  createBikeAdmin: async (data: BikeSchemaFormData): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.post(BIKE_ENDPOINTS.BASE, data);\n    return response;\n  },\n  getStatusBikeAdmin: async (): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.get(BIKE_ENDPOINTS.STATS);\n    return response;\n  },\n  getStatusBikeByIdAdmin: async (id: string): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.get(\n      BIKE_ENDPOINTS.BY_ID_ADMIN_STATS(id)\n    );\n    return response;\n  },\n  deleteBike: async (id: string): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.delete(BIKE_ENDPOINTS.DELETE(id));\n    return response;\n  },\n\n  //for both admin and staff\n  getHistoryBikeById: async (id: string): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.get(BIKE_ENDPOINTS.BY_ID(id));\n    return response;\n  },\n  updateBike: async (\n    id: string,\n    data: Partial<UpdateBikeSchemaFormData>\n  ): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.patch(\n      BIKE_ENDPOINTS.UPDATE(id),\n      data\n    );\n    return response;\n  },\n  //for user\n  reportBrokenBike: async (id: string): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.patch(\n      BIKE_ENDPOINTS.REPORT_BROKEN(id)\n    );\n    return response;\n  },\n  //all\n  getBikeByIdForAll: async (id: string): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.get(\n      BIKE_ENDPOINTS.BY_ID_FOR_ALL(id)\n    );\n    return response;\n  },\n  getAllBikes: async (page ?: number , limit ?: number ): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.get(BIKE_ENDPOINTS.BASE , \n    { params : { page , limit } }\n    );\n    return response;\n  },\n};"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/services/rentalService.ts:\n"
      },
      {
        "text": "import fetchHttpClient from \"@lib/httpClient\";\nimport type { AxiosResponse } from \"axios\";\nconst RENTAL_BASE = \"/rentals\";\nconst RENTAL_ENDPOINTS = {\n  BASE: RENTAL_BASE,\n  USER_RENT : () => `${RENTAL_BASE}`,\n  USER_RENTAL_ME: () => `${RENTAL_BASE}/me`,\n  USER_RENTAL_DETAIL: (id: string) => `${RENTAL_BASE}/me/${id}`,\n  USER_CURRENT_RENTAL: () => `${RENTAL_BASE}/me/current`,\n  END_USER_CURRENT_RENTAL: (id: string) => `${RENTAL_BASE}/me/${id}/end`,\n  ADMIN_RENTAL_REVENUE : () => `${RENTAL_BASE}/stats/revenue`,\n  ADMIN_STATS_STATION_ACTIVITY : () => `${RENTAL_BASE}/stats/station-activity`,\n  ADMIN_STATS_RESERVATIONS : () => `${RENTAL_BASE}/stats/reservations`,\n  ADMIN_CANCEL_RENTAL : (id: string) => `${RENTAL_BASE}/${id}/cancel`,\n  STAFF_ADMIN_GET_ALL_RENTALS : () => `${RENTAL_BASE}`,\n  STAFF_ADMIN_GET_DETAIL_RENTAL : (id: string) => `${RENTAL_BASE}/${id}`,\n  STAFF_ADMIN_UPDATE_DETAIL_RENTAL : (id: string) => `${RENTAL_BASE}/${id}`,\n};\nimport type { RentalSchemaFormData } from \"@/schemas/rentalSchema\";\nexport const rentalService = {\n  userPostRent: async (data: RentalSchemaFormData): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.post(\n      RENTAL_ENDPOINTS.USER_RENT(),\n      data\n    );\n    return response;\n  },\n  userGetAllRentals: async (): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.get(\n      RENTAL_ENDPOINTS.USER_RENTAL_ME()\n    );\n    return response;\n  },\n  userGetCurrentRentals: async (): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.get(\n      RENTAL_ENDPOINTS.USER_CURRENT_RENTAL()\n    );\n    return response;\n  },\n  userPutEndCurrentRental: async (id: string): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.put(\n      RENTAL_ENDPOINTS.END_USER_CURRENT_RENTAL(id)\n    );\n    return response;\n  },\n  userGetRentalById: async (id: string): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.get(\n      RENTAL_ENDPOINTS.USER_RENTAL_DETAIL(id)\n    );\n    return response;\n  },\n  adminGetRentalRevenue: async (): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.get(\n      RENTAL_ENDPOINTS.ADMIN_RENTAL_REVENUE()\n    );\n    return response;\n  },\n  adminGetStationActivity: async (): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.get(\n      RENTAL_ENDPOINTS.ADMIN_STATS_STATION_ACTIVITY()\n    );\n    return response;\n  },\n  adminGetStatisticReservations: async (): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.get(\n      RENTAL_ENDPOINTS.ADMIN_STATS_RESERVATIONS()\n    );\n    return response;\n  },\n  adminPostCancelRental: async (id: string): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.post(\n      RENTAL_ENDPOINTS.ADMIN_CANCEL_RENTAL(id)\n    );\n    return response;\n  },\n  staffAdminGetAllRentals: async (): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.get(\n      RENTAL_ENDPOINTS.STAFF_ADMIN_GET_ALL_RENTALS()\n    );\n    return response;\n  },\n  staffAdminGetDetailRental: async (id: string): Promise<AxiosResponse> => {\n    const response = await fetchHttpClient.get(\n      RENTAL_ENDPOINTS.STAFF_ADMIN_GET_DETAIL_RENTAL(id)\n    );\n    return response;\n  },\n  // staffAdminUpdateDetailRental: async (\n  //   id: string,\n  //   data: any\n  // ): Promise<AxiosResponse> => {\n  //   const response = await fetchHttpClient.put(\n  //     RENTAL_ENDPOINTS.STAFF_ADMIN_UPDATE_DETAIL_RENTAL(id),\n  //     data\n  //   );\n  //   return response;\n  // },\n};"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/types/Bike.d.ts:\n"
      },
      {
        "text": "export type BikeStatus = \"available\" | \"rented\" | \"maintenance\" | \"retired\";\nexport type BikeType = \"mountain\" | \"road\" | \"city\" | \"electric\" | \"hybrid\";\n\nexport interface Bike {\n  _id: string;\n  name: string;\n  type: BikeType;\n  brand: string;\n  model: string;\n  status: BikeStatus;\n  price_per_hour: number;\n  price_per_day: number;\n  image: string;\n  description: string;\n  features: string[];\n  location: string;\n  total_rentals: number;\n  rating: number;\n  created_at: string;\n  updated_at: string;\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/types/Customer.d.ts:\n"
      },
      {
        "text": "export type CustomerType = \"individual\" | \"corporate\";\nexport type CustomerStatus = \"active\" | \"inactive\" | \"blocked\";\n\nexport interface Customer {\n  _id: string;\n  customer_code: string;\n  full_name: string;\n  email: string;\n  phone_number: string;\n  address: string;\n  city: string;\n  id_number: string;\n  customer_type: CustomerType;\n  status: CustomerStatus;\n  avatar?: string;\n  total_rentals: number;\n  total_spent: number;\n  current_rentals: number;\n  rating: number;\n  notes?: string;\n  registered_date: string;\n  last_rental_date?: string;\n  created_at: string;\n  updated_at: string;\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/types/Rental.d.ts:\n"
      },
      {
        "text": "export type RentalStatus =\n  | \"pending\"\n  | \"active\"\n  | \"completed\"\n  | \"cancelled\"\n  | \"overdue\";\nexport type PaymentStatus = \"pending\" | \"paid\" | \"refunded\";\nexport type PaymentMethod = \"cash\" | \"card\" | \"transfer\" | \"momo\" | \"zalopay\";\n\nexport interface Rental {\n  _id: string;\n  rental_code: string;\n  customer_id: string;\n  customer_name: string;\n  customer_phone: string;\n  customer_email: string;\n  bike_id: string;\n  bike_name: string;\n  bike_type: string;\n  start_date: string;\n  end_date: string;\n  actual_return_date?: string;\n  rental_hours: number;\n  rental_days: number;\n  price_per_hour: number;\n  price_per_day: number;\n  total_amount: number;\n  deposit_amount: number;\n  payment_status: PaymentStatus;\n  payment_method: PaymentMethod;\n  status: RentalStatus;\n  notes?: string;\n  staff_id: string;\n  staff_name: string;\n  created_at: string;\n  updated_at: string;\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/types/Station.d.ts:\n"
      },
      {
        "text": "export interface Station {\n  name: string;\n  description: string;\n  address: string;\n  type: string;\n  stationNumber: string;\n  bikeStation: BikeStation;\n}\nexport interface BikeStation {\n  id: string;\n  stationId: number;\n  totalBikes: number;\n  availableBikes: number;\n  location: {\n    lat: number;\n    lng: number;\n  };\n  distance: number; // meters from metro station\n}\nexport interface RentalSession {\n  id: string;\n  bikeId: string;\n  startTime: Date;\n  stationName: string;\n  userId: string;\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/types/User.d.ts:\n"
      },
      {
        "text": "export interface User {\n  _id: string;\n  fullname:string;\n  email: string;\n  password: string;\n  created_at: string;\n  updated_at: string;\n  email_verify_token: string;\n  forgot_verify_token: string;\n  verify: string;\n  location: string;\n  username: string;\n  phone_number: string;\n  avatar: string;\n  role:\"USER\" | \"STAFF\" | \"ADMIN\";\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/types/index.ts:\n"
      },
      {
        "text": "export * from \"./Station\";\nexport * from \"./User\";\nexport * from \"./Bike\";\nexport * from \"./Customer\";\nexport * from \"./Rental\";"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/frontend/src/utils/tokenManager.ts:\n"
      },
      {
        "text": "const ACCESS_TOKEN = 'access_token';\nconst REFRESH_TOKEN = 'refresh_token';\n\n// Check if we're in a browser environment\nconst isBrowser = typeof window !== 'undefined';\n\nexport const getAccessToken = () : string | null => {\n    if (!isBrowser) return null;\n    return localStorage.getItem(ACCESS_TOKEN);\n}\n\nexport const getRefreshToken = () : string | null => {\n    if (!isBrowser) return null;\n    return localStorage.getItem(REFRESH_TOKEN);\n}\n\nexport const setTokens = (access_token: string, refresh_token: string) : void => {\n    if (!isBrowser) return;\n    localStorage.setItem(ACCESS_TOKEN, access_token);\n    localStorage.setItem(REFRESH_TOKEN, refresh_token);\n}\n\nexport const clearTokens = () : void => {\n    if (!isBrowser) return;\n    localStorage.removeItem(ACCESS_TOKEN);\n    localStorage.removeItem(REFRESH_TOKEN);\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/application/index.ts:\n"
      },
      {
        "text": "import type { MqttConnection } from \"../connection/types\";\nimport type { EventBus } from \"../events\";\nimport type { HttpServer } from \"../http\";\nimport type { CommandPublisher } from \"../publishers\";\nimport type { DeviceManager } from \"../services\";\n\nexport type ApplicationDependencies = {\n  connection: MqttConnection;\n  eventBus: EventBus;\n  commandPublisher: CommandPublisher;\n  deviceManager: DeviceManager;\n  httpServer: HttpServer;\n  messageRouter: MessageRouter;\n  deviceDiscovery: DeviceDiscovery;\n};\n\nexport type ApplicationConfig = {\n  mqtt: {\n    brokerUrl: string;\n    username: string;\n    password: string;\n  };\n  http: {\n    port: number;\n    hostname: string;\n  };\n  deviceMac?: string;\n  stateMachine: {\n    stepDelayMs: number;\n    transitionTimeoutMs: number;\n  };\n};\n\nexport class IotApplication {\n  private httpServer: HttpServer | null = null;\n  private shuttingDown = false;\n\n  constructor(private deps: ApplicationDependencies) {}\n\n  async start(config: ApplicationConfig): Promise<void> {\n    console.warn(\"Starting IoT Application...\");\n\n    this.setupEventListeners();\n\n    this.setupConnectionHandlers(config.mqtt.brokerUrl);\n\n    await this.deps.connection.connect();\n\n    this.deps.messageRouter.start();\n\n    this.deps.deviceDiscovery.start();\n\n    await this.deps.messageRouter.subscribeToTopics(config.deviceMac);\n\n    this.httpServer = this.deps.httpServer;\n\n    await this.deps.commandPublisher.requestStatus(config.deviceMac);\n\n    console.warn(\"IoT Application started successfully\");\n  }\n\n  async stop(): Promise<void> {\n    if (this.shuttingDown) {\n      return;\n    }\n\n    this.shuttingDown = true;\n    console.warn(\"Stopping IoT Application...\");\n\n    const results = await Promise.allSettled([\n      this.deps.connection.disconnect(),\n      this.closeHttpServer(),\n    ]);\n\n    for (const result of results) {\n      if (result.status === \"rejected\") {\n        console.error(\"Shutdown error:\", result.reason);\n      }\n    }\n\n    console.warn(\"IoT Application stopped\");\n  }\n\n  private setupEventListeners(): void {\n    this.deps.eventBus.on(\"connection:established\", (data) => {\n      console.warn(`Connected to MQTT broker at ${data.brokerUrl}`);\n    });\n\n    this.deps.eventBus.on(\"connection:error\", (data) => {\n      console.error(\"Connection error:\", data.error);\n    });\n  }\n\n  private setupConnectionHandlers(brokerUrl: string): void {\n    this.deps.connection.onConnect(() => {\n      this.deps.eventBus.emit(\"connection:established\", {\n        brokerUrl,\n        timestamp: new Date(),\n      });\n    });\n\n    this.deps.connection.onError((error) => {\n      this.deps.eventBus.emit(\"connection:error\", {\n        error,\n        timestamp: new Date(),\n      });\n    });\n  }\n\n  private async closeHttpServer(): Promise<void> {\n    if (!this.httpServer) {\n      return;\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      this.httpServer!.close((error?: Error) => {\n        if (error) {\n          reject(error);\n        }\n        else {\n          resolve();\n        }\n      });\n    });\n  }\n}\n\nexport type MessageRouter = {\n  start: () => void;\n  subscribeToTopics: (deviceMac?: string) => Promise<void>;\n};\n\nexport type DeviceDiscovery = {\n  start: () => void;\n};"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/application/lifecycle.ts:\n"
      },
      {
        "text": "import process from \"node:process\";\n\nimport type { IotApplication } from \"./index\";\n\nexport function setupLifecycleManagement(app: IotApplication): void {\n  let shuttingDown = false;\n\n  const shutdown = async () => {\n    if (shuttingDown) {\n      return;\n    }\n\n    shuttingDown = true;\n    console.warn(\"Received shutdown signal\");\n\n    try {\n      await app.stop();\n      console.warn(\"Application shutdown complete\");\n      process.exit(0);\n    }\n    catch (error) {\n      console.error(\"Error during shutdown:\", error);\n      process.exit(1);\n    }\n  };\n\n  process.on(\"SIGINT\", shutdown);\n  process.on(\"SIGTERM\", shutdown);\n\n  process.on(\"uncaughtException\", (error) => {\n    console.error(\"Uncaught exception:\", error);\n    shutdown();\n  });\n\n  process.on(\"unhandledRejection\", (reason, promise) => {\n    console.error(\"Unhandled rejection at:\", promise, \"reason:\", reason);\n    shutdown();\n  });\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/bootstrap.ts:\n"
      },
      {
        "text": "import { IotApplication } from \"./application\";\nimport { env } from \"./config\";\nimport { MqttConnectionManager } from \"./connection\";\nimport { DeviceDiscovery } from \"./discovery\";\nimport { eventBus } from \"./events\";\nimport { createHttpApp, startHttpServer } from \"./http\";\nimport { MessageRouter } from \"./messaging\";\nimport { createCommandPublisher } from \"./publishers\";\nimport { createDeviceManager, createStateMachineService } from \"./services\";\n\nexport async function bootstrap(): Promise<IotApplication> {\n  const deviceManager = createDeviceManager();\n  const connection = new MqttConnectionManager({\n    brokerUrl: env.MQTT_URL,\n    username: env.MQTT_USERNAME,\n    password: env.MQTT_PASSWORD,\n  });\n\n  const messageRouter = new MessageRouter(connection);\n  const deviceDiscovery = new DeviceDiscovery(deviceManager);\n\n  const commandPublisher = createCommandPublisher(connection);\n\n  const httpApp = createHttpApp({\n    commandPublisher,\n    deviceManager,\n  });\n\n  const httpServer = startHttpServer(httpApp, {\n    port: env.HTTP_PORT,\n    hostname: env.HTTP_HOST,\n  });\n  // nay de test dung dung\n  const _stateMachine = createStateMachineService(commandPublisher, {\n    deviceMac: env.DEVICE_MAC,\n    stepDelayMs: Number.parseInt(env.STATE_STEP_DELAY_MS, 10),\n    transitionTimeoutMs: Number.parseInt(env.STATE_TIMEOUT_MS, 10),\n  });\n\n  return new IotApplication({\n    connection,\n    eventBus,\n    commandPublisher,\n    deviceManager,\n    httpServer,\n    messageRouter,\n    deviceDiscovery,\n  });\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/config/index.ts:\n"
      },
      {
        "text": "import dotenv from \"dotenv\";\nimport { env as processEnv } from \"node:process\";\nimport { z } from \"zod\";\n\ndotenv.config();\n\nconst envSchema = z.object({\n  LOGIN_USERNAME: z.string(),\n  LOGIN_PASSWORD: z.string(),\n  MQTT_URL: z.string(),\n  MQTT_USERNAME: z.string(),\n  MQTT_PASSWORD: z.string(),\n  DEVICE_MAC: z.string().optional(),\n  STATE_STEP_DELAY_MS: z.string(),\n  STATE_TIMEOUT_MS: z.string(),\n  STATE_SEQUENCE: z.string().optional(),\n  HTTP_PORT: z.coerce.number().default(3000),\n  HTTP_HOST: z.string().default(\"0.0.0.0\"),\n});\n\nexport type Env = z.infer<typeof envSchema>;\n\nexport const env: Env = envSchema.parse(processEnv);"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/connection/index.ts:\n"
      },
      {
        "text": "import type { Buffer } from \"node:buffer\";\n\nimport mqtt from \"mqtt\";\n\nimport type { ConnectionConfig, MqttConnection } from \"./types\";\n\nimport { InfrastructureError } from \"../middleware\";\n\nexport class MqttConnectionManager implements MqttConnection {\n  public client: mqtt.MqttClient;\n  private hasPendingConnect = false;\n\n  constructor(private config: ConnectionConfig) {\n    this.client = mqtt.connect(config.brokerUrl, {\n      username: config.username,\n      password: config.password,\n    });\n    this.client.on(\"error\", (error) => {\n      if (this.hasPendingConnect) {\n        return;\n      }\n      console.error(\"MQTT client error:\", error);\n    });\n  }\n\n  connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.client.connected) {\n        resolve();\n        return;\n      }\n\n      let onConnect: () => void;\n      let onError: (error: Error) => void;\n\n      const cleanup = () => {\n        this.hasPendingConnect = false;\n        this.client.off(\"connect\", onConnect);\n        this.client.off(\"error\", onError);\n      };\n\n      onConnect = () => {\n        cleanup();\n        resolve();\n      };\n\n      onError = (error: Error) => {\n        cleanup();\n        reject(new InfrastructureError(\"Failed to connect to MQTT broker\", {\n          brokerUrl: this.config.brokerUrl,\n          originalError: error.message,\n        }));\n      };\n\n      this.hasPendingConnect = true;\n      this.client.once(\"connect\", onConnect);\n      this.client.once(\"error\", onError);\n    });\n  }\n\n  disconnect(): Promise<void> {\n    return new Promise((resolve) => {\n      this.client.end(false, {}, () => resolve());\n    });\n  }\n\n  subscribe(topics: string[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.client.subscribe(topics, (err) => {\n        if (err) {\n          reject(new InfrastructureError(\"Failed to subscribe to MQTT topics\", {\n            topics,\n            originalError: err.message,\n          }));\n        }\n        else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  publish(topic: string, message: string | Buffer): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.client.publish(topic, message, (err) => {\n        if (err) {\n          reject(new InfrastructureError(\"Failed to publish MQTT message\", {\n            topic,\n            originalError: err.message,\n          }));\n        }\n        else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  onMessage(handler: (topic: string, message: Buffer) => void): void {\n    this.client.on(\"message\", handler);\n  }\n\n  onError(handler: (error: Error) => void): void {\n    this.client.on(\"error\", handler);\n  }\n\n  onConnect(handler: () => void): void {\n    this.client.on(\"connect\", handler);\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/connection/types.ts:\n"
      },
      {
        "text": "import type { MqttClient } from \"mqtt\";\nimport type { Buffer } from \"node:buffer\";\n\nexport type ConnectionConfig = {\n  brokerUrl: string;\n  username: string;\n  password: string;\n};\n\nexport type MqttConnection = {\n  client: MqttClient;\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n  subscribe: (topics: string[]) => Promise<void>;\n  publish: (topic: string, message: string | Buffer) => Promise<void>;\n  onMessage: (handler: (topic: string, message: Buffer) => void) => void;\n  onError: (handler: (error: Error) => void) => void;\n  onConnect: (handler: () => void) => void;\n};"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/discovery/index.ts:\n"
      },
      {
        "text": "import type { DeviceManager } from \"../services\";\n\nimport { eventBus, EVENTS } from \"../events\";\n\nexport class DeviceDiscovery {\n  constructor(private deviceManager: DeviceManager) {}\n\n  start(): void {\n    console.warn(\"Starting device discovery...\");\n\n    //  status changes\n    eventBus.on(EVENTS.DEVICE_STATUS_CHANGED, (data) => {\n      this.handleDeviceStatusChange(data.deviceId, data.status);\n    });\n\n    //  booking status updates\n    eventBus.on(EVENTS.BOOKING_STATUS_UPDATED, (data) => {\n      this.handleDeviceActivity(data.deviceId, \"booking\");\n    });\n\n    //  maintenance status updates\n    eventBus.on(EVENTS.MAINTENANCE_STATUS_UPDATED, (data) => {\n      this.handleDeviceActivity(data.deviceId, \"maintenance\");\n    });\n\n    //  log messages\n    eventBus.on(EVENTS.LOG_RECEIVED, (data) => {\n      this.handleDeviceActivity(data.deviceId, \"logging\");\n    });\n\n    console.warn(\"Device discovery started\");\n  }\n\n  private handleDeviceStatusChange(deviceId: string | undefined, status: string): void {\n    if (!deviceId) {\n      return;\n    }\n\n    console.warn(`Device discovery: ${deviceId} status changed to ${status}`);\n  }\n\n  private handleDeviceActivity(deviceId: string | undefined, activity: string): void {\n    if (!deviceId) {\n      return;\n    }\n\n    console.warn(`Device discovery: ${deviceId} active (${activity})`);\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/events/bus.ts:\n"
      },
      {
        "text": "import { EventEmitter } from \"node:events\";\n\nimport type { EventData, EventHandler, EventType } from \"./types\";\n\nexport class EventBus extends EventEmitter {\n  emit<T extends EventType>(event: T, data: EventData[T]): boolean {\n    return super.emit(event, data);\n  }\n\n  on<T extends EventType>(event: T, handler: EventHandler<T>): this {\n    return super.on(event, handler);\n  }\n\n  off<T extends EventType>(event: T, handler: EventHandler<T>): this {\n    return super.off(event, handler);\n  }\n\n  once<T extends EventType>(event: T, handler: EventHandler<T>): this {\n    return super.once(event, handler);\n  }\n}\n\nexport const eventBus = new EventBus();"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/events/index.ts:\n"
      },
      {
        "text": "export * from \"./bus\";\nexport * from \"./types\";"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/events/types.ts:\n"
      },
      {
        "text": "export const EVENTS = {\n  DEVICE_STATUS_CHANGED: \"device:status:changed\",\n  BOOKING_STATUS_UPDATED: \"booking:status:updated\",\n  MAINTENANCE_STATUS_UPDATED: \"maintenance:status:updated\",\n  LOG_RECEIVED: \"log:received\",\n  CONNECTION_ESTABLISHED: \"connection:established\",\n  CONNECTION_ERROR: \"connection:error\",\n} as const;\n\nexport type EventType = (typeof EVENTS)[keyof typeof EVENTS];\n\nexport type EventData = {\n  [EVENTS.DEVICE_STATUS_CHANGED]: {\n    deviceId?: string;\n    status: string;\n    timestamp: Date;\n  };\n  [EVENTS.BOOKING_STATUS_UPDATED]: {\n    deviceId?: string;\n    status: string;\n    timestamp: Date;\n  };\n  [EVENTS.MAINTENANCE_STATUS_UPDATED]: {\n    deviceId?: string;\n    status: string;\n    timestamp: Date;\n  };\n  [EVENTS.LOG_RECEIVED]: {\n    deviceId?: string;\n    message: string;\n    timestamp: Date;\n  };\n  [EVENTS.CONNECTION_ESTABLISHED]: {\n    brokerUrl: string;\n    timestamp: Date;\n  };\n  [EVENTS.CONNECTION_ERROR]: {\n    error: Error;\n    timestamp: Date;\n  };\n};\n\nexport type EventHandler<T extends EventType> = (data: EventData[T]) => void;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/handlers/booking.ts:\n"
      },
      {
        "text": "import {\n  IotBookingStatusMessageSchema,\n} from \"@mebike/shared\";\n\nimport { eventBus, EVENTS } from \"../events\";\nimport { extractDeviceId } from \"../utils/topic\";\n\nexport function handleBookingStatusMessage(topic: string, payload: string): void {\n  const parsed = IotBookingStatusMessageSchema.safeParse(payload);\n  if (parsed.success) {\n    console.warn(`[booking] ${topic}: ${parsed.data}`);\n\n    eventBus.emit(EVENTS.BOOKING_STATUS_UPDATED, {\n      deviceId: extractDeviceId(topic),\n      status: parsed.data,\n      timestamp: new Date(),\n    });\n  }\n  else {\n    console.warn(`[booking] ${topic}: ${payload} (unexpected format)`);\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/handlers/index.ts:\n"
      },
      {
        "text": "import { IOT_PUBLISH_TOPICS } from \"@mebike/shared\";\n\nimport { handleBookingStatusMessage } from \"./booking\";\nimport { handleLogMessage } from \"./logs\";\nimport { handleMaintenanceStatusMessage } from \"./maintenance\";\nimport { handleStatusMessage } from \"./status\";\n\nexport const messageHandlers = {\n  [IOT_PUBLISH_TOPICS.status]: handleStatusMessage,\n  [IOT_PUBLISH_TOPICS.logs]: handleLogMessage,\n  [IOT_PUBLISH_TOPICS.bookingStatus]: handleBookingStatusMessage,\n  [IOT_PUBLISH_TOPICS.maintenanceStatus]: handleMaintenanceStatusMessage,\n} as const;\n\nexport type MessageHandler = (topic: string, payload: string) => void;"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/handlers/logs.ts:\n"
      },
      {
        "text": "import { eventBus, EVENTS } from \"../events\";\nimport { extractDeviceId } from \"../utils/topic\";\n\nexport function handleLogMessage(topic: string, payload: string): void {\n  console.warn(`[log] ${topic}: ${payload}`);\n\n  eventBus.emit(EVENTS.LOG_RECEIVED, {\n    deviceId: extractDeviceId(topic),\n    message: payload,\n    timestamp: new Date(),\n  });\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/handlers/maintenance.ts:\n"
      },
      {
        "text": "import {\n  IotMaintenanceStatusMessageSchema,\n} from \"@mebike/shared\";\n\nimport { eventBus, EVENTS } from \"../events\";\nimport { extractDeviceId } from \"../utils/topic\";\n\nexport function handleMaintenanceStatusMessage(topic: string, payload: string): void {\n  const parsed = IotMaintenanceStatusMessageSchema.safeParse(payload);\n  if (parsed.success) {\n    console.warn(`[maintenance] ${topic}: ${parsed.data}`);\n\n    eventBus.emit(EVENTS.MAINTENANCE_STATUS_UPDATED, {\n      deviceId: extractDeviceId(topic),\n      status: parsed.data,\n      timestamp: new Date(),\n    });\n  }\n  else {\n    console.warn(`[maintenance] ${topic}: ${payload} (unexpected format)`);\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/handlers/status.ts:\n"
      },
      {
        "text": "import {\n  IotStatusMessageSchema,\n} from \"@mebike/shared\";\n\nimport { eventBus, EVENTS } from \"../events\";\nimport { extractDeviceId } from \"../utils/topic\";\n\nexport function handleStatusMessage(topic: string, payload: string): void {\n  const parsed = IotStatusMessageSchema.safeParse(payload);\n  if (parsed.success) {\n    console.warn(`[status] ${topic}: ${parsed.data}`);\n\n    eventBus.emit(EVENTS.DEVICE_STATUS_CHANGED, {\n      deviceId: extractDeviceId(topic),\n      status: parsed.data,\n      timestamp: new Date(),\n    });\n  }\n  else {\n    console.warn(`[status] ${topic}: ${payload} (unparsed)`);\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/http/app.ts:\n"
      },
      {
        "text": "import type { ZodIssue } from \"zod\";\n\nimport { OpenAPIHono } from \"@hono/zod-openapi\";\nimport { iotServiceOpenApi } from \"@mebike/shared\";\nimport { Scalar } from \"@scalar/hono-api-reference\";\n\nimport type { CommandPublisher } from \"../publishers\";\nimport type { DeviceManager } from \"../services\";\n\nimport { errorHandler } from \"../middleware\";\nimport { registerCommandRoutes } from \"./routes/commands\";\nimport { registerDeviceRoutes } from \"./routes/devices\";\n\nexport type HttpAppDependencies = {\n  commandPublisher: CommandPublisher;\n  deviceManager: DeviceManager;\n};\n\nexport function createHttpApp({ commandPublisher, deviceManager }: HttpAppDependencies) {\n  const app = new OpenAPIHono({\n    defaultHook: (result, c) => {\n      if (result.success) {\n        return;\n      }\n\n      const issues = result.error.issues.map((issue: ZodIssue) => {\n        const path = issue.path.length ? issue.path.join(\".\") : \"body\";\n        return {\n          path,\n          message: issue.message,\n          code: issue.code,\n          expected: (issue as any).expected,\n          received: (issue as any).received,\n        };\n      });\n\n      return c.json({\n        error: \"Invalid command payload\",\n        details: {\n          code: \"VALIDATION_ERROR\",\n          ...(issues.length ? { issues } : {}),\n        },\n      }, 400);\n    },\n  });\n\n  app.use(\"*\", errorHandler());\n\n  app.doc(\"/docs/openapi.json\", iotServiceOpenApi);\n  app.get(\n    \"/docs\",\n    Scalar({\n      title: \"IoT Service API Reference\",\n      url: \"/docs/openapi.json\",\n      layout: \"modern\",\n    }),\n  );\n\n  registerDeviceRoutes(app, { deviceManager });\n  registerCommandRoutes(app, { commandPublisher, deviceManager });\n\n  return app;\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/http/controllers/command-controller.ts:\n"
      },
      {
        "text": "import { IotService, IotTopics } from \"@mebike/shared\";\n\nimport type { CommandPublisher } from \"../../publishers\";\nimport type { DeviceManager } from \"../../services\";\n\nimport { BusinessLogicError } from \"../../middleware\";\n\ntype CommandAcceptedResponse = IotService.CommandAcceptedResponse;\n\nconst { validateStateTransition, ERROR_CODES } = IotService;\nconst { normalizeMac, topicWithMac, IOT_COMMAND_TOPICS } = IotTopics;\n\ntype Dependencies = {\n  commandPublisher: CommandPublisher;\n  deviceManager: DeviceManager;\n};\n\ntype StateCommandValue = IotTopics.IotStateCommand;\ntype BookingCommandValue = IotTopics.IotBookingCommand;\ntype ReservationCommandValue = IotTopics.IotReservationCommand;\ntype MaintenanceCommandValue = IotTopics.IotMaintenanceCommand;\ntype StatusCommandValue = IotTopics.IotStatusCommand;\n\ntype StateCommandInput = {\n  deviceId: string;\n  state: StateCommandValue;\n};\n\ntype BookingCommandInput = {\n  deviceId: string;\n  command: BookingCommandValue;\n};\n\ntype ReservationCommandInput = {\n  deviceId: string;\n  command: ReservationCommandValue;\n};\n\ntype MaintenanceCommandInput = {\n  deviceId: string;\n  command: MaintenanceCommandValue;\n};\n\ntype StatusCommandInput = {\n  deviceId: string;\n  command?: StatusCommandValue;\n};\n\nexport class CommandController {\n  constructor(private readonly deps: Dependencies) {}\n\n  async sendStateCommand(input: StateCommandInput): Promise<CommandAcceptedResponse> {\n    const normalizedId = this.normalizeDeviceId(input.deviceId);\n\n    const currentState = this.deps.deviceManager.getDeviceState(normalizedId);\n    if (currentState) {\n      if (currentState === input.state) {\n        this.throwDeviceAlreadyInState(normalizedId, currentState, input.state);\n      }\n\n      this.ensureValidTransition(currentState, input.state);\n    }\n\n    await this.deps.commandPublisher.sendStateCommand(input.state, normalizedId);\n\n    return this.createAcceptedResponse(\n      normalizedId,\n      topicWithMac(IOT_COMMAND_TOPICS.state, normalizedId),\n      input.state,\n    );\n  }\n\n  async sendBookingCommand(input: BookingCommandInput): Promise<CommandAcceptedResponse> {\n    const normalizedId = this.normalizeDeviceId(input.deviceId);\n    const currentState = this.getExistingDeviceState(normalizedId);\n\n    const targetState: StateCommandValue = input.command === \"release\" ? \"available\" : \"booked\";\n\n    if (currentState === targetState) {\n      this.throwDeviceAlreadyInState(normalizedId, currentState, targetState);\n    }\n\n    this.ensureValidTransition(currentState, targetState);\n\n    await this.deps.commandPublisher.sendBookingCommand(input.command, normalizedId);\n\n    return this.createAcceptedResponse(\n      normalizedId,\n      topicWithMac(IOT_COMMAND_TOPICS.booking, normalizedId),\n      input.command,\n    );\n  }\n\n  async sendReservationCommand(input: ReservationCommandInput): Promise<CommandAcceptedResponse> {\n    const normalizedId = this.normalizeDeviceId(input.deviceId);\n    const currentState = this.getExistingDeviceState(normalizedId);\n\n    const targetState: StateCommandValue = input.command === \"reserve\" ? \"reserved\" : \"available\";\n\n    if (currentState === targetState) {\n      this.throwDeviceAlreadyInState(normalizedId, currentState, targetState);\n    }\n\n    this.ensureValidTransition(currentState, targetState);\n\n    await this.deps.commandPublisher.sendReservationCommand(input.command, normalizedId);\n\n    return this.createAcceptedResponse(\n      normalizedId,\n      topicWithMac(IOT_COMMAND_TOPICS.reservation, normalizedId),\n      input.command,\n    );\n  }\n\n  async sendMaintenanceCommand(input: MaintenanceCommandInput): Promise<CommandAcceptedResponse> {\n    const normalizedId = this.normalizeDeviceId(input.deviceId);\n    const currentState = this.getExistingDeviceState(normalizedId);\n\n    const targetState: StateCommandValue = input.command === \"start\" ? \"maintained\" : \"available\";\n\n    if (currentState === targetState) {\n      this.throwDeviceAlreadyInState(normalizedId, currentState, targetState);\n    }\n\n    this.ensureValidTransition(currentState, targetState);\n\n    await this.deps.commandPublisher.sendMaintenanceCommand(input.command, normalizedId);\n\n    return this.createAcceptedResponse(\n      normalizedId,\n      topicWithMac(IOT_COMMAND_TOPICS.maintenance, normalizedId),\n      input.command,\n    );\n  }\n\n  async requestStatusCommand(input: StatusCommandInput): Promise<CommandAcceptedResponse> {\n    const normalizedId = this.normalizeDeviceId(input.deviceId);\n    const command: StatusCommandValue = input.command ?? \"request\";\n\n    await this.deps.commandPublisher.requestStatus(normalizedId);\n\n    return this.createAcceptedResponse(\n      normalizedId,\n      topicWithMac(IOT_COMMAND_TOPICS.status, normalizedId),\n      command,\n    );\n  }\n\n  private normalizeDeviceId(deviceId: string): string {\n    const normalized = normalizeMac(deviceId);\n    if (!normalized) {\n      throw new BusinessLogicError(\n        \"Invalid device identifier\",\n        {\n          details: {\n            code: \"INVALID_DEVICE_IDENTIFIER\",\n            deviceId,\n          },\n          status: 400,\n        },\n      );\n    }\n    return normalized;\n  }\n\n  private getExistingDeviceState(deviceId: string): string {\n    const state = this.deps.deviceManager.getDeviceState(deviceId);\n    if (!state) {\n      throw new BusinessLogicError(\n        `Device ${deviceId} not found`,\n        {\n          details: {\n            code: ERROR_CODES.DEVICE_NOT_FOUND,\n            deviceId,\n          },\n          status: 400,\n        },\n      );\n    }\n    return state;\n  }\n\n  private ensureValidTransition(currentState: string, requestedState: string) {\n    const validation = validateStateTransition(currentState, requestedState);\n    if (!validation.valid) {\n      throw new BusinessLogicError(\n        validation.error.message,\n        {\n          details: {\n            code: validation.error.code,\n            ...validation.error.details,\n          },\n          status: 409,\n        },\n      );\n    }\n  }\n\n  private throwDeviceAlreadyInState(\n    deviceId: string,\n    currentState: string,\n    requestedState: string,\n  ): never {\n    throw new BusinessLogicError(\n      `Device ${deviceId} is already in state ${currentState}`,\n      {\n        details: {\n          code: ERROR_CODES.DEVICE_ALREADY_IN_STATE,\n          deviceId,\n          currentState,\n          requestedState,\n        },\n        status: 409,\n      },\n    );\n  }\n\n  private createAcceptedResponse(\n    deviceId: string,\n    topic: string,\n    payload: string,\n  ): CommandAcceptedResponse {\n    return {\n      deviceId,\n      topic,\n      payload,\n    };\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/http/index.ts:\n"
      },
      {
        "text": "export * from \"./app\";\nexport * from \"./server\";"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/http/routes/commands.ts:\n"
      },
      {
        "text": "import type { OpenAPIHono } from \"@hono/zod-openapi\";\nimport type {\n  CommandAcceptedResponse,\n  ErrorResponse,\n} from \"@mebike/shared\";\nimport type { Context } from \"hono\";\n\nimport { iotServiceRoutes } from \"@mebike/shared\";\n\nimport type { CommandPublisher } from \"../../publishers\";\nimport type { DeviceManager } from \"../../services\";\n\nimport { BusinessLogicError } from \"../../middleware\";\nimport { CommandController } from \"../controllers/command-controller\";\n\nexport type RegisterCommandRoutesOptions = {\n  commandPublisher: CommandPublisher;\n  deviceManager: DeviceManager;\n};\n\nexport function registerCommandRoutes(\n  app: OpenAPIHono,\n  { commandPublisher, deviceManager }: RegisterCommandRoutesOptions,\n): void {\n  const controller = new CommandController({ commandPublisher, deviceManager });\n\n  const handleCommandResponse = async (\n    c: Context,\n    handler: () => Promise<CommandAcceptedResponse>,\n  ) => {\n    try {\n      const result = await handler();\n      return c.json<CommandAcceptedResponse, 202>(result, 202);\n    }\n    catch (err) {\n      if (err instanceof BusinessLogicError) {\n        const details = err.details;\n        const status: 400 | 409 = err.status === 409 ? 409 : 400;\n        return c.json<ErrorResponse, typeof status>(\n          {\n            error: err.message,\n            ...(details ? { details } : {}),\n          },\n          status,\n        );\n      }\n      throw err;\n    }\n  };\n\n  app.openapi(iotServiceRoutes.sendStateCommand, async (c) => {\n    const { deviceId } = c.req.valid(\"param\");\n    const { state } = c.req.valid(\"json\");\n    return handleCommandResponse(c, () => controller.sendStateCommand({ deviceId, state }));\n  });\n\n  app.openapi(iotServiceRoutes.sendBookingCommand, async (c) => {\n    const { deviceId } = c.req.valid(\"param\");\n    const { command } = c.req.valid(\"json\");\n    return handleCommandResponse(c, () => controller.sendBookingCommand({ deviceId, command }));\n  });\n\n  app.openapi(iotServiceRoutes.sendReservationCommand, async (c) => {\n    const { deviceId } = c.req.valid(\"param\");\n    const { command } = c.req.valid(\"json\");\n    return handleCommandResponse(c, () => controller.sendReservationCommand({ deviceId, command }));\n  });\n\n  app.openapi(iotServiceRoutes.sendMaintenanceCommand, async (c) => {\n    const { deviceId } = c.req.valid(\"param\");\n    const { command } = c.req.valid(\"json\");\n    return handleCommandResponse(c, () => controller.sendMaintenanceCommand({ deviceId, command }));\n  });\n\n  app.openapi(iotServiceRoutes.requestStatusCommand, async (c) => {\n    const { deviceId } = c.req.valid(\"param\");\n    const body = c.req.valid(\"json\");\n    return handleCommandResponse(c, () => controller.requestStatusCommand({\n      deviceId,\n      command: body?.command,\n    }));\n  });\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/http/routes/devices.ts:\n"
      },
      {
        "text": "import type { OpenAPIHono } from \"@hono/zod-openapi\";\nimport type { DeviceStatus, ErrorResponse } from \"@mebike/shared\";\n\nimport {\n  iotServiceRoutes,\n  normalizeMac,\n} from \"@mebike/shared\";\nimport process from \"node:process\";\n\nimport type { DeviceManager } from \"../../services\";\n\nexport type RegisterDeviceRoutesOptions = {\n  deviceManager: DeviceManager;\n};\n\nexport function registerDeviceRoutes(\n  app: OpenAPIHono,\n  { deviceManager }: RegisterDeviceRoutesOptions,\n): void {\n  app.openapi(iotServiceRoutes.health, (c) => {\n    return c.json({\n      status: \"ok\",\n      uptimeMs: Math.round(process.uptime() * 1000),\n      timestamp: new Date().toISOString(),\n    });\n  });\n\n  app.openapi(iotServiceRoutes.listDevices, (c) => {\n    const items = Array.from(deviceManager.getAllDeviceStates().entries()).map(([\n      deviceId,\n      status,\n    ]) => ({ deviceId, status }));\n\n    return c.json({ items }, 200);\n  });\n\n  app.openapi(iotServiceRoutes.getDevice, (c) => {\n    const { deviceId } = c.req.valid(\"param\");\n    const normalized = normalizeMac(deviceId);\n\n    if (!normalized) {\n      return c.json<ErrorResponse, 400>({\n        error: \"Invalid device identifier\",\n        details: { deviceId },\n      }, 400);\n    }\n\n    const status = deviceManager.getDeviceState(normalized);\n    if (!status) {\n      return c.json<ErrorResponse, 404>({\n        error: \"Device not found\",\n        details: { deviceId: normalized },\n      }, 404);\n    }\n\n    return c.json<DeviceStatus, 200>({ deviceId: normalized, status }, 200);\n  });\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/http/server.ts:\n"
      },
      {
        "text": "import type { OpenAPIHono } from \"@hono/zod-openapi\";\nimport type { AddressInfo } from \"node:net\";\n\nimport { serve } from \"@hono/node-server\";\n\nexport type HttpServer = ReturnType<typeof serve>;\n\nexport type StartHttpServerOptions = {\n  port: number;\n  hostname?: string;\n  logger?: Pick<typeof console, \"info\" | \"error\">;\n};\n\nexport function startHttpServer(\n  app: OpenAPIHono,\n  { port, hostname, logger = console }: StartHttpServerOptions,\n): HttpServer {\n  const server = serve(\n    {\n      fetch: app.fetch,\n      port,\n      hostname,\n    },\n    (info: AddressInfo) => {\n      const resolvedHost = hostname ?? normalizeListeningAddress(info.address);\n      logger.info?.(\n        `HTTP server listening on http://${resolvedHost}:${info.port}`,\n      );\n    },\n  );\n\n  server.on(\"error\", (error) => {\n    logger.error?.(\"HTTP server error:\", error);\n  });\n\n  return server;\n}\n\nfunction normalizeListeningAddress(address: string): string {\n  if (address === \"::\") {\n    return \"localhost\";\n  }\n\n  return address;\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/index.ts:\n"
      },
      {
        "text": "import process from \"node:process\";\n\nimport { bootstrap } from \"./bootstrap\";\nimport { env } from \"./config\";\n\nasync function main() {\n  try {\n    const app = await bootstrap();\n\n    const config = {\n      mqtt: {\n        brokerUrl: env.MQTT_URL,\n        username: env.MQTT_USERNAME,\n        password: env.MQTT_PASSWORD,\n      },\n      http: {\n        port: env.HTTP_PORT,\n        hostname: env.HTTP_HOST,\n      },\n      deviceMac: env.DEVICE_MAC,\n      stateMachine: {\n        stepDelayMs: Number.parseInt(env.STATE_STEP_DELAY_MS, 10),\n        transitionTimeoutMs: Number.parseInt(env.STATE_TIMEOUT_MS, 10),\n      },\n    };\n\n    await app.start(config);\n\n    const shutdown = async () => {\n      console.warn(\"Received shutdown signal, stopping application...\");\n      await app.stop();\n      process.exit(0);\n    };\n\n    process.on(\"SIGINT\", shutdown);\n    process.on(\"SIGTERM\", shutdown);\n  }\n  catch (error) {\n    console.error(\"Application failed to start:\", error);\n    process.exit(1);\n  }\n}\n\nmain();"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/messaging/index.ts:\n"
      },
      {
        "text": "import { IOT_PUBLISH_TOPICS } from \"@mebike/shared\";\n\nimport type { MqttConnection } from \"../connection/types\";\n\nimport { messageHandlers } from \"../handlers\";\n\nexport class MessageRouter {\n  constructor(private connection: MqttConnection) {}\n\n  start(): void {\n    this.connection.onMessage((topic, message) => {\n      this.handleMessage(topic, message.toString());\n    });\n  }\n\n  async subscribeToTopics(deviceMac?: string): Promise<void> {\n    const topics = this.getSubscriptionTopics(deviceMac);\n    await this.connection.subscribe(topics);\n  }\n\n  private handleMessage(topic: string, payload: string): void {\n    const handler = this.findHandlerForTopic(topic);\n    if (handler) {\n      handler(topic, payload);\n    }\n    else {\n      console.warn(`Received on ${topic}: ${payload}`);\n    }\n  }\n\n  private findHandlerForTopic(topic: string): ((topic: string, payload: string) => void) | undefined {\n    if (messageHandlers[topic as keyof typeof messageHandlers]) {\n      return messageHandlers[topic as keyof typeof messageHandlers];\n    }\n\n    for (const [baseTopic, handler] of Object.entries(messageHandlers)) {\n      if (topic === baseTopic || topic.startsWith(`${baseTopic}/`)) {\n        return handler;\n      }\n    }\n\n    return undefined;\n  }\n\n  private getSubscriptionTopics(deviceMac?: string): string[] {\n    const topics = new Set<string>();\n\n    topics.add(IOT_PUBLISH_TOPICS.status);\n    topics.add(IOT_PUBLISH_TOPICS.logs);\n    topics.add(IOT_PUBLISH_TOPICS.bookingStatus);\n    topics.add(IOT_PUBLISH_TOPICS.maintenanceStatus);\n\n    topics.add(`${IOT_PUBLISH_TOPICS.logs}/#`);\n    topics.add(`${IOT_PUBLISH_TOPICS.status}/#`);\n    topics.add(`${IOT_PUBLISH_TOPICS.bookingStatus}/#`);\n    topics.add(`${IOT_PUBLISH_TOPICS.maintenanceStatus}/#`);\n\n    if (deviceMac) {\n      // cu the neu can\n    }\n\n    return Array.from(topics);\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/middleware/error-handler.ts:\n"
      },
      {
        "text": "import type { IotService } from \"@mebike/shared\";\nimport type { MiddlewareHandler } from \"hono\";\n\nimport { env } from \"node:process\";\nimport { z } from \"zod\";\n\ntype ErrorStatus = 400 | 409 | 422 | 500;\n\ntype ErrorResponse = IotService.ErrorResponse;\n\nexport enum ErrorDomain {\n  VALIDATION = \"VALIDATION\",\n  BUSINESS_LOGIC = \"BUSINESS_LOGIC\",\n  INFRASTRUCTURE = \"INFRASTRUCTURE\",\n  UNKNOWN = \"UNKNOWN\",\n}\n\nfunction toErrorResponse(error: string, details?: Record<string, unknown>): ErrorResponse {\n  return details\n    ? { error, details }\n    : { error };\n}\n\nfunction normalizeDetails(details?: unknown): Record<string, unknown> | undefined {\n  if (!details || typeof details !== \"object\" || Array.isArray(details)) {\n    return undefined;\n  }\n  return details as Record<string, unknown>;\n}\n\nexport function errorHandler(): MiddlewareHandler {\n  return async (c, next) => {\n    try {\n      await next();\n    }\n    catch (err) {\n      if (err instanceof z.ZodError || (err instanceof Error && err.name === \"ZodError\")) {\n        const rawIssues = err instanceof z.ZodError\n          ? err.issues\n          : Array.isArray((err as any).issues)\n            ? (err as any).issues as Array<Record<string, unknown>>\n            : [];\n\n        const issues = rawIssues.map((issue) => {\n          const pathValue = (issue as any).path;\n          const pathArray = Array.isArray(pathValue) ? pathValue as Array<string | number> : [];\n          const path = pathArray.length ? pathArray.join(\".\") : \"body\";\n          return {\n            path,\n            message: String((issue as any).message ?? \"Invalid value\"),\n            code: (issue as any).code ? String((issue as any).code) : undefined,\n            expected: (issue as any).expected,\n            received: (issue as any).received,\n          };\n        });\n\n        return c.json<ErrorResponse, 400>(\n          toErrorResponse(\"Invalid command payload\", {\n            code: \"VALIDATION_ERROR\",\n            ...(issues.length ? { issues } : {}),\n          }),\n          400,\n        );\n      }\n\n      if (err instanceof BusinessLogicError) {\n        const details = normalizeDetails(err.details) ?? {};\n        const response: ErrorResponse = toErrorResponse(err.message, {\n          code: (details.code as string | undefined) ?? \"BUSINESS_LOGIC_ERROR\",\n          ...details,\n        });\n\n        const status: ErrorStatus = err.status ?? 400;\n        return c.json(response, status);\n      }\n\n      if (err instanceof InfrastructureError) {\n        const isDevelopment = env.NODE_ENV === \"development\";\n        const errorDetails = normalizeDetails(err.details) ?? {};\n\n        return c.json<ErrorResponse, 500>(\n          toErrorResponse(\n            \"A system error occurred. Please try again later.\",\n            isDevelopment\n              ? {\n                  code: \"INFRASTRUCTURE_ERROR\",\n                  message: err.message,\n                  ...errorDetails,\n                }\n              : { code: \"INFRASTRUCTURE_ERROR\" },\n          ),\n          500,\n        );\n      }\n\n      const error = err instanceof Error ? err : new Error(String(err));\n      const isDevelopment = env.NODE_ENV === \"development\";\n      return c.json<ErrorResponse, 500>(\n        toErrorResponse(\n          error.message || \"An unexpected error occurred\",\n          isDevelopment\n            ? {\n                code: \"INTERNAL_ERROR\",\n                stack: error.stack,\n              }\n            : { code: \"INTERNAL_ERROR\" },\n        ),\n        500,\n      );\n    }\n  };\n}\n\nexport class BusinessLogicError extends Error {\n  constructor(\n    message: string,\n    options?: {\n      details?: Record<string, unknown>;\n      status?: ErrorStatus;\n    },\n  ) {\n    super(message);\n    this.name = \"BusinessLogicError\";\n    this.details = options?.details;\n    this.status = options?.status ?? 400;\n  }\n\n  details?: Record<string, unknown>;\n  status: ErrorStatus;\n}\n\nexport class InfrastructureError extends Error {\n  constructor(message: string, public details?: unknown) {\n    super(message);\n    this.name = \"InfrastructureError\";\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/middleware/index.ts:\n"
      },
      {
        "text": "export * from \"./error-handler\";"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/publishers/commands.ts:\n"
      },
      {
        "text": "import type {\n  IotCommandPayloadByTopic,\n  IotCommandTopic,\n} from \"@mebike/shared\";\n\nimport { topicWithMac } from \"@mebike/shared\";\n\nimport type { MqttConnection } from \"../connection/types\";\n\nimport { InfrastructureError } from \"../middleware\";\n\nexport class CommandPublisher {\n  constructor(private connection: MqttConnection) {}\n\n  async publishCommand<T extends IotCommandTopic>(\n    topic: T,\n    payload: IotCommandPayloadByTopic[T],\n    mac?: string | null,\n  ): Promise<void> {\n    const resolvedTopic = topicWithMac(topic, mac);\n\n    try {\n      await this.connection.publish(resolvedTopic, payload);\n      console.warn(`Command sent to ${resolvedTopic}: ${payload}`);\n    }\n    catch (error) {\n      if (error instanceof InfrastructureError) {\n        throw error;\n      }\n\n      throw new InfrastructureError(\"Failed to publish command to device\", {\n        topic: resolvedTopic,\n        payload,\n        originalError: error instanceof Error ? error.message : String(error),\n      });\n    }\n  }\n\n  async requestStatus(mac?: string | null): Promise<void> {\n    await this.publishCommand(\"esp/commands/status\", \"request\", mac);\n  }\n\n  async sendStateCommand(state: IotCommandPayloadByTopic[\"esp/commands/state\"], mac?: string | null): Promise<void> {\n    await this.publishCommand(\"esp/commands/state\", state, mac);\n  }\n\n  async sendBookingCommand(command: IotCommandPayloadByTopic[\"esp/commands/booking\"], mac?: string | null): Promise<void> {\n    await this.publishCommand(\"esp/commands/booking\", command, mac);\n  }\n\n  async sendReservationCommand(command: IotCommandPayloadByTopic[\"esp/commands/reservation\"], mac?: string | null): Promise<void> {\n    await this.publishCommand(\"esp/commands/reservation\", command, mac);\n  }\n\n  async sendMaintenanceCommand(command: IotCommandPayloadByTopic[\"esp/commands/maintenance\"], mac?: string | null): Promise<void> {\n    await this.publishCommand(\"esp/commands/maintenance\", command, mac);\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/publishers/index.ts:\n"
      },
      {
        "text": "import type { MqttConnection } from \"../connection/types\";\n\nimport { CommandPublisher } from \"./commands\";\n\nexport function createCommandPublisher(connection: MqttConnection): CommandPublisher {\n  return new CommandPublisher(connection);\n}\n\nexport { CommandPublisher };"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/scripts/state-machine-sequence.ts:\n"
      },
      {
        "text": "/* eslint-disable node/prefer-global/process, node/prefer-global/buffer */\nimport type {\n  IotCommandPayloadByTopic,\n  IotCommandTopic,\n  IotStateCommand,\n} from \"@mebike/shared\";\nimport type { IClientSubscribeOptions, MqttClient } from \"mqtt\";\n\nimport {\n  IOT_COMMAND_TOPICS,\n  IOT_PUBLISH_TOPICS,\n  IOT_STATE_LABELS,\n  IotStateCommandSchema,\n  IotStatusMessageSchema,\n  stateIndexToLabel,\n  topicWithMac,\n} from \"@mebike/shared\";\nimport mqtt from \"mqtt\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\n\nimport { env } from \"../config\";\n\nconst FALLBACK_SEQUENCE: IotStateCommand[] = [\n  \"booked\",\n  \"maintained\",\n  \"unavailable\",\n  \"available\",\n];\n\nconst brokerUrlFromEnv = env.MQTT_URL;\nconst usernameFromEnv = env.MQTT_USERNAME;\nconst passwordFromEnv = env.MQTT_PASSWORD;\nconst deviceMacFromEnv = env.DEVICE_MAC || null;\nconst stepDelayMsFromEnv = Number.parseInt(env.STATE_STEP_DELAY_MS, 10);\nconst transitionTimeoutMsFromEnv = Number.parseInt(env.STATE_TIMEOUT_MS, 10);\n\nconst sequenceInput = env.STATE_SEQUENCE;\nconst plannedSequenceFromEnv: IotStateCommand[] = sequenceInput\n  ? parseSequence(sequenceInput)\n  : [...FALLBACK_SEQUENCE];\n\nexport type RunnerLogger = Pick<typeof console, \"warn\" | \"error\">;\n\nexport type StateMachineRunOptions = {\n  brokerUrl?: string;\n  username?: string;\n  password?: string;\n  deviceMac?: string | null;\n  stepDelayMs?: number;\n  transitionTimeoutMs?: number;\n  plannedSequence?: IotStateCommand[];\n  handleSignals?: boolean;\n  client?: MqttClient;\n  createClient?: () => MqttClient;\n  logger?: RunnerLogger;\n};\n\nexport async function runStateMachineSequence(\n  overrides: StateMachineRunOptions = {},\n) {\n  const options = {\n    brokerUrl: overrides.brokerUrl ?? brokerUrlFromEnv,\n    username: overrides.username ?? usernameFromEnv,\n    password: overrides.password ?? passwordFromEnv,\n    deviceMac: overrides.deviceMac ?? deviceMacFromEnv,\n    stepDelayMs: overrides.stepDelayMs ?? stepDelayMsFromEnv,\n    transitionTimeoutMs:\n      overrides.transitionTimeoutMs ?? transitionTimeoutMsFromEnv,\n    plannedSequence: overrides.plannedSequence ?? plannedSequenceFromEnv,\n    handleSignals: overrides.handleSignals ?? true,\n  } satisfies {\n    brokerUrl: string;\n    username?: string;\n    password?: string;\n    deviceMac: string | null;\n    stepDelayMs: number;\n    transitionTimeoutMs: number;\n    plannedSequence: IotStateCommand[];\n    handleSignals: boolean;\n  };\n\n  const logger: RunnerLogger = overrides.logger ?? console;\n\n  const providedClient = overrides.client;\n  const client\n    = providedClient\n      ?? (overrides.createClient?.()\n        ?? createClient(options.brokerUrl, options.username, options.password));\n  const shouldCloseClient = !providedClient;\n\n  const errorHandler = (err: Error) => {\n    logger.error(\"MQTT error:\", err);\n  };\n  client.on(\"error\", errorHandler);\n\n  const detachSigint = options.handleSignals\n    ? attachSigintHandler(client, logger)\n    : undefined;\n\n  try {\n    await once(client, \"connect\");\n    logger.warn(`Connected to MQTT broker at ${options.brokerUrl}`);\n\n    await subscribe(client, [\n      IOT_PUBLISH_TOPICS.status,\n      `${IOT_PUBLISH_TOPICS.status}/#`,\n      ...(options.deviceMac\n        ? [topicWithMac(IOT_PUBLISH_TOPICS.status, options.deviceMac)]\n        : []),\n    ]);\n\n    logger.warn(\"Subscribed to status topics\");\n\n    await publishCommand(\n      client,\n      options.deviceMac,\n      IOT_COMMAND_TOPICS.status,\n      \"request\",\n    );\n    logger.warn(\"Requested current state\");\n\n    const initialState = await waitForAnyState(\n      client,\n      \"Initial state\",\n      10000,\n    ).catch(() => null);\n    logger.warn(\n      initialState\n        ? `Initial state reported as ${initialState}`\n        : \"Initial state could not be determined\",\n    );\n\n    let currentState = initialState;\n    const sequence = buildSequence(currentState, options.plannedSequence);\n    logger.warn(`Planned transitions: ${sequence.join(\" -> \") || \"(none)\"}`);\n\n    for (const targetState of sequence) {\n      const nextState = await driveToState(\n        client,\n        options.deviceMac,\n        targetState,\n        options.transitionTimeoutMs,\n        logger,\n      );\n      currentState = nextState;\n      await delay(options.stepDelayMs);\n    }\n\n    logger.warn(\"Sequence complete\");\n    return currentState ?? null;\n  }\n  catch (error) {\n    logger.error(\"Sequence failed:\", error as Error);\n    throw error;\n  }\n  finally {\n    detachSigint?.();\n    client.removeListener(\"error\", errorHandler);\n    if (shouldCloseClient) {\n      client.end();\n    }\n  }\n}\n\nfunction createClient(url: string, username?: string, password?: string) {\n  return mqtt.connect(url, {\n    username,\n    password,\n  });\n}\n\nfunction attachSigintHandler(client: MqttClient, logger: RunnerLogger) {\n  const handler = () => {\n    logger.warn(\"Received SIGINT, closing connection...\");\n    client.end(true, {}, () => {\n      process.exit(0);\n    });\n  };\n\n  process.on(\"SIGINT\", handler);\n  return () => {\n    process.off(\"SIGINT\", handler);\n  };\n}\n\nasync function driveToState(\n  client: MqttClient,\n  deviceMac: string | null,\n  targetState: IotStateCommand,\n  transitionTimeoutMs: number,\n  logger: RunnerLogger,\n) {\n  logger.warn(`→ Commanding state: ${targetState}`);\n  const awaited = waitForSpecificState(\n    client,\n    targetState,\n    transitionTimeoutMs,\n  );\n  await publishCommand(client, deviceMac, IOT_COMMAND_TOPICS.state, targetState);\n  const reached = await awaited;\n  logger.warn(`← Reached state: ${reached}`);\n  return reached;\n}\n\nexport function parseSequence(input: string): IotStateCommand[] {\n  const entries = input\n    .split(\",\")\n    .map(value => value.trim())\n    .filter(Boolean);\n\n  return entries.map(value => IotStateCommandSchema.parse(value));\n}\n\nasync function publishCommand<T extends IotCommandTopic>(\n  client: MqttClient,\n  deviceMac: string | null,\n  topic: T,\n  payload: IotCommandPayloadByTopic[T],\n) {\n  const resolvedTopic = topicWithMac(topic, deviceMac);\n  await new Promise<void>((resolve, reject) => {\n    client.publish(resolvedTopic, payload, (err) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n  });\n}\n\nfunction waitForSpecificState(\n  client: MqttClient,\n  target: IotStateCommand,\n  timeoutMs: number,\n) {\n  return waitForState(\n    client,\n    state => (state === target ? state : null),\n    timeoutMs,\n    `state ${target}`,\n  );\n}\n\nfunction waitForAnyState(\n  client: MqttClient,\n  label: string,\n  timeoutMs: number,\n) {\n  return waitForState(client, state => state, timeoutMs, label);\n}\n\nfunction waitForState(\n  client: MqttClient,\n  predicate: (state: IotStateCommand) => IotStateCommand | null,\n  timeoutMs: number,\n  label: string,\n) {\n  return new Promise<IotStateCommand | null>((resolve, reject) => {\n    let timer: NodeJS.Timeout;\n    let handler: (topic: string, buffer: Buffer) => void;\n\n    const cleanup = () => {\n      clearTimeout(timer);\n      client.removeListener(\"message\", handler);\n    };\n\n    timer = setTimeout(() => {\n      cleanup();\n      reject(new Error(`Timeout waiting for ${label}`));\n    }, timeoutMs);\n\n    handler = (topic: string, buffer: Buffer) => {\n      if (!matchesTopic(topic, IOT_PUBLISH_TOPICS.status)) {\n        return;\n      }\n\n      const interpreted = interpretStatus(buffer.toString());\n      if (!interpreted) {\n        return;\n      }\n\n      const result = predicate(interpreted as IotStateCommand);\n      if (!result) {\n        return;\n      }\n\n      cleanup();\n      resolve(result);\n    };\n\n    client.on(\"message\", handler);\n  });\n}\n\nexport function interpretStatus(message: string): IotStateCommand | null {\n  const trimmed = message.trim();\n  const parsed = IotStatusMessageSchema.safeParse(trimmed);\n  if (!parsed.success) {\n    return null;\n  }\n\n  if (IOT_STATE_LABELS.includes(parsed.data as IotStateCommand)) {\n    return parsed.data as IotStateCommand;\n  }\n\n  if (trimmed.startsWith(\"State changed to \")) {\n    const index = Number.parseInt(trimmed.replace(\"State changed to \", \"\"), 10);\n    return stateIndexToLabel(index);\n  }\n\n  if (trimmed.startsWith(\"Current state: \")) {\n    const index = Number.parseInt(trimmed.replace(\"Current state: \", \"\"), 10);\n    return stateIndexToLabel(index);\n  }\n\n  return null;\n}\n\nexport function buildSequence(\n  initial: IotStateCommand | null,\n  planned: IotStateCommand[],\n) {\n  if (!planned.length) {\n    return [];\n  }\n\n  const result: IotStateCommand[] = [];\n  let last = initial;\n\n  for (const state of planned) {\n    if (state === last) {\n      continue;\n    }\n    result.push(state);\n    last = state;\n  }\n\n  return result;\n}\n\nexport function matchesTopic(incoming: string, baseTopic: string) {\n  return incoming === baseTopic || incoming.startsWith(`${baseTopic}/`);\n}\n\nfunction subscribe(\n  mqttClient: MqttClient,\n  topics: string[],\n  options?: IClientSubscribeOptions,\n) {\n  const uniqueTopics = Array.from(new Set(topics));\n  return new Promise<void>((resolve, reject) => {\n    mqttClient.subscribe(uniqueTopics, options ?? {}, (err) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    });\n  });\n}\n\nfunction once(emitter: MqttClient, eventName: \"connect\") {\n  return new Promise<void>((resolve, reject) => {\n    let onError: (err: Error) => void;\n    let onEvent: () => void;\n\n    const cleanup = () => {\n      emitter.removeListener(\"error\", onError);\n      emitter.removeListener(eventName, onEvent);\n    };\n\n    onError = (err: Error) => {\n      cleanup();\n      reject(err);\n    };\n    onEvent = () => {\n      cleanup();\n      resolve();\n    };\n\n    emitter.once(eventName, onEvent);\n    emitter.once(\"error\", onError);\n  });\n}\n\nfunction delay(durationMs: number) {\n  return new Promise<void>(resolve => setTimeout(resolve, durationMs));\n}\n\nconst modulePath = fileURLToPath(import.meta.url);\nconst entryPath = process.argv[1] ? path.resolve(process.argv[1]) : null;\n\nif (entryPath && entryPath === modulePath) {\n  runStateMachineSequence().catch(() => {\n    process.exitCode = 1;\n  });\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/services/device-manager.ts:\n"
      },
      {
        "text": "import { eventBus, EVENTS } from \"../events\";\n\nexport class DeviceManager {\n  private deviceStates = new Map<string, string>();\n\n  constructor() {\n    this.setupEventListeners();\n  }\n\n  private setupEventListeners(): void {\n    eventBus.on(EVENTS.DEVICE_STATUS_CHANGED, (data) => {\n      if (data.deviceId) {\n        this.deviceStates.set(data.deviceId, data.status);\n        console.warn(`Device ${data.deviceId} status updated to: ${data.status}`);\n      }\n    });\n\n    eventBus.on(EVENTS.BOOKING_STATUS_UPDATED, (data) => {\n      if (data.deviceId) {\n        console.warn(`Device ${data.deviceId} booking status: ${data.status}`);\n      }\n    });\n\n    eventBus.on(EVENTS.MAINTENANCE_STATUS_UPDATED, (data) => {\n      if (data.deviceId) {\n        console.warn(`Device ${data.deviceId} maintenance status: ${data.status}`);\n      }\n    });\n  }\n\n  getDeviceState(deviceId: string): string | undefined {\n    return this.deviceStates.get(deviceId);\n  }\n\n  getAllDeviceStates(): Map<string, string> {\n    return new Map(this.deviceStates);\n  }\n\n  isDeviceAvailable(deviceId: string): boolean {\n    return this.deviceStates.get(deviceId) === \"available\";\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/services/index.ts:\n"
      },
      {
        "text": "import type { CommandPublisher } from \"../publishers\";\nimport type { StateMachineOptions } from \"./state-machine\";\n\nimport { DeviceManager } from \"./device-manager\";\nimport { StateMachineService } from \"./state-machine\";\n\nexport function createDeviceManager(): DeviceManager {\n  return new DeviceManager();\n}\n\nexport function createStateMachineService(\n  commandPublisher: CommandPublisher,\n  options?: StateMachineOptions,\n): StateMachineService {\n  return new StateMachineService(commandPublisher, options);\n}\n\nexport { DeviceManager, StateMachineService };"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/services/state-machine.ts:\n"
      },
      {
        "text": "import type { IotStateCommand } from \"@mebike/shared\";\n\nimport type { CommandPublisher } from \"../publishers\";\n\nconst FALLBACK_SEQUENCE: IotStateCommand[] = [\n  \"booked\",\n  \"maintained\",\n  \"unavailable\",\n  \"available\",\n];\n\nexport type StateMachineOptions = {\n  sequence?: IotStateCommand[];\n  stepDelayMs?: number;\n  transitionTimeoutMs?: number;\n  deviceMac?: string | null;\n};\n\nexport class StateMachineService {\n  private sequence: IotStateCommand[];\n  private stepDelayMs: number;\n  private transitionTimeoutMs: number;\n  private deviceMac: string | null;\n\n  constructor(\n    private commandPublisher: CommandPublisher,\n    options: StateMachineOptions = {},\n  ) {\n    this.sequence = options.sequence ?? [...FALLBACK_SEQUENCE];\n    this.stepDelayMs = options.stepDelayMs ?? 5000;\n    this.transitionTimeoutMs = options.transitionTimeoutMs ?? 10000;\n    this.deviceMac = options.deviceMac ?? null;\n  }\n\n  async runSequence(): Promise<void> {\n    console.warn(\"Starting state machine sequence...\");\n\n    for (const state of this.sequence) {\n      console.warn(`Transitioning to state: ${state}`);\n\n      await this.commandPublisher.sendStateCommand(state, this.deviceMac);\n\n      await this.delay(this.stepDelayMs);\n\n      await this.delay(this.transitionTimeoutMs);\n    }\n\n    console.warn(\"State machine sequence completed\");\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  setSequence(sequence: IotStateCommand[]): void {\n    this.sequence = [...sequence];\n  }\n\n  getSequence(): IotStateCommand[] {\n    return [...this.sequence];\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/utils/index.ts:\n"
      },
      {
        "text": "export * from \"./topic\";"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot-service/src/utils/topic.ts:\n"
      },
      {
        "text": "/**\n *\n *\n * - \"esp/status/MAC_ADDRESS\" → MAC_ADDRESS at index 2\n * - \"esp/logs/MAC_ADDRESS\" → MAC_ADDRESS at index 2\n * - \"esp/booking/status/MAC_ADDRESS\" → MAC_ADDRESS at index 3\n * - \"esp/maintenance/status/MAC_ADDRESS\" → MAC_ADDRESS at index 3\n */\nexport function extractDeviceId(topic: string): string | undefined {\n  const parts = topic.split(\"/\");\n\n  if (parts.length === 3) {\n    return parts[2];\n  }\n\n  //  \"esp/booking/status/MAC\" or \"esp/maintenance/status/MAC\"\n  if (parts.length === 4) {\n    return parts[3];\n  }\n\n  // \"esp/status\" or \"esp/logs\"\n  return undefined;\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot/src/core/globals.cpp:\n"
      },
      {
        "text": "#include \"globals.h\"\n#include \"LEDStatusManager.h\"\n#include \"mqtt.h\"\n\nDeviceState currentState;\nnamespace Global\n{\n    std::unique_ptr<NetworkManager> networkManager = nullptr;\n    std::unique_ptr<MQTTManager> mqttManager = nullptr;\n    std::unique_ptr<BufferedLogger> bufferedLogger = nullptr;\n    std::unique_ptr<LEDStatusManager> ledStatusManager = nullptr;\n\n    bool setupMQTT(const char *brokerIP, int port, const char *username, const char *pass)\n    {\n        return ::setupMQTT(brokerIP, port, username, pass, \"\");\n    }\n}\n\nconst char *getStateName(DeviceState state)\n{\n    switch (state)\n    {\n    case STATE_INIT:\n        return \"INIT\";\n    case STATE_CONNECTING_WIFI:\n        return \"CONNECTING_WIFI\";\n    case STATE_CONNECTED:\n        return \"CONNECTED\";\n    case STATE_ERROR:\n        return \"ERROR\";\n    case STATE_RESERVED:\n        return \"RESERVED\";\n    case STATE_AVAILABLE:\n        return \"AVAILABLE\";\n    case STATE_BOOKED:\n        return \"BOOKED\";\n    case STATE_BROKEN:\n        return \"BROKEN\";\n    case STATE_MAINTAINED:\n        return \"MAINTAINED\";\n    case STATE_UNAVAILABLE:\n        return \"UNAVAILABLE\";\n    default:\n        return \"UNKNOWN\";\n    }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot/src/core/mqtt.cpp:\n"
      },
      {
        "text": "#include \"mqtt.h\"\n#include <Arduino.h>\n#include <ArduinoLog.h>\n#include \"globals.h\"\n#include \"CommandHandler.h\"\n\nvoid mqttCallback(char *topic, byte *payload, unsigned int length)\n{\n    Log.info(\"Message arrived on topic: %s\\n\", topic);\n    String message;\n    for (unsigned int i = 0; i < length; i++)\n    {\n        message += (char)payload[i];\n    }\n    Log.info(\"Message: %s\\n\", message.c_str());\n\n    CommandHandler::processCommand(topic, message.c_str());\n}\n\nbool setupMQTT(const char *brokerIP, int port, const char *username, const char *pass, const std::string &logTopic)\n{\n    Global::mqttManager.reset(new MQTTManager(Global::networkManager->getWiFiClient(), brokerIP, port, username, pass));\n    Global::mqttManager->setCallback(mqttCallback);\n    if (Global::bufferedLogger)\n    {\n        Global::bufferedLogger->setMQTTManager(Global::mqttManager.get());\n        Global::bufferedLogger->setTopic(Global::getTopics().logTopic);\n    }\n    if (Global::mqttManager->connect())\n    {\n        const auto &topics = Global::getTopics();\n        Global::mqttManager->subscribe(topics.commandStateTopic.c_str());\n        Global::mqttManager->subscribe(topics.commandBookingTopic.c_str());\n        Global::mqttManager->subscribe(topics.commandReservationTopic.c_str());\n        Global::mqttManager->subscribe(topics.commandMaintenanceTopic.c_str());\n        Global::mqttManager->subscribe(topics.commandStatusTopic.c_str());\n        Global::mqttManager->subscribe(topics.commandRootTopic.c_str());\n\n        const char *topic = Global::getTopics().statusTopic.c_str();\n        Global::mqttManager->publish(topic, \"ESP32 online\", true);\n        if (Global::bufferedLogger)\n        {\n            Global::bufferedLogger->log(LogSeverity::Info, LogDestination::Both, \"MQTT connected and status published\");\n        }\n        return true;\n    }\n    return false;\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot/src/core/network.cpp:\n"
      },
      {
        "text": "#include \"network.h\"\n#include <Arduino.h>\n#include <WiFi.h>\n#include <ArduinoLog.h>\n#include \"DeviceUtils.h\"\n\nbool initializeNetwork(const char *ssid, const char *password, NetworkTopics &topics)\n{\n    Log.info(\"Connecting to WiFi...\");\n    WiFi.begin(ssid, password);\n\n    const int maxAttempts = 20;\n    int attempts = 0;\n\n    while (WiFi.status() != WL_CONNECTED && attempts < maxAttempts)\n    {\n        delay(500);\n        attempts++;\n        if (attempts % 4 == 0) // 4000 % 4 = 0 so log every 2 seconds == every 4 attempts\n        {\n            Log.info(\"WiFi connection attempt %d/%d...\\n\", attempts, maxAttempts);\n        }\n    }\n\n    if (WiFi.status() == WL_CONNECTED)\n    {\n        Log.info(\"Connected to WiFi! IP: %s\\n\", WiFi.localIP().toString().c_str());\n        topics.statusTopic = makeTopicWithMac(\"esp/status\");\n        topics.logTopic = makeTopicWithMac(\"esp/logs\");\n        topics.commandStateTopic = makeTopicWithMac(\"esp/commands/state\");\n        topics.commandBookingTopic = makeTopicWithMac(\"esp/commands/booking\");\n        topics.commandReservationTopic = makeTopicWithMac(\"esp/commands/reservation\");\n        topics.commandMaintenanceTopic = makeTopicWithMac(\"esp/commands/maintenance\");\n        topics.commandStatusTopic = makeTopicWithMac(\"esp/commands/status\");\n        topics.commandRootTopic = makeTopicWithMac(\"esp/commands\");\n        topics.maintenanceStatusTopic = makeTopicWithMac(\"esp/maintenance/status\");\n        Log.info(\"Topics set with MAC address\\n\");\n        return true;\n    }\n    else\n    {\n        Log.error(\"WiFi connection failed after %d attempts. Check credentials and network.\\n\", maxAttempts);\n        return false;\n    }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot/src/handlers/CommandHandler.cpp:\n"
      },
      {
        "text": "// Các quy tắc chuyển đổi trạng thái\n//\n// Nếu xe đang ở trạng thái RESERVED, nó chỉ có thể trở thành:\n// - AVAILABLE (nếu việc đặt trước bị hủy).\n// - BOOKED (nếu người dùng nhận xe).\n// Mọi chuyển đổi khác đều bị từ chối.\n//\n// Nếu xe đang ở trạng thái BOOKED (đang được sử dụng), nó chỉ có thể trở thành:\n// - AVAILABLE (khi người dùng trả xe).\n// - BROKEN, MAINTAINED, hoặc UNAVAILABLE (nếu có sự cố được báo cáo hoặc phát hiện).\n// Nó không thể được đặt trước hoặc thuê lại cho đến khi được trả lại.\n//\n// Nếu xe đang ở trạng thái BROKEN, nó chỉ có thể được chuyển sang:\n// - MAINTAINED hoặc UNAVAILABLE.\n// Nó không thể trở thành AVAILABLE hoặc được khách hàng sử dụng cho đến khi đã được bảo trì.\n//\n// Nếu xe đang trong trạng thái MAINTAINED, nó chỉ có thể trở thành:\n// - AVAILABLE (sau khi bảo trì hoàn tất).\n// - UNAVAILABLE.\n// Nó không thể được thuê, đặt trước, hoặc báo hỏng trực tiếp từ trạng thái này.\n//\n// Nếu xe đang ở trạng thái AVAILABLE, nó có thể chuyển sang hầu hết các trạng thái hoạt động khác (RESERVED, BOOKED, BROKEN, v.v.).\n\n#include \"CommandHandler.h\"\n#include <ArduinoLog.h>\n#include <cstring>\n#include \"globals.h\"\n#include \"LEDStatusManager.h\"\n#include \"StateMachine.h\"\n\nstatic bool matchesTopic(const char *incoming, const char *baseTopic, const std::string &deviceTopic)\n{\n    if (strcmp(incoming, baseTopic) == 0)\n    {\n        return true;\n    }\n    return !deviceTopic.empty() && strcmp(incoming, deviceTopic.c_str()) == 0;\n}\n\nstatic const char *statusTopic()\n{\n    return Global::getTopics().statusTopic.c_str();\n}\n\nvoid CommandHandler::processCommand(const char *topic, const char *message)\n{\n    Log.info(\"Processing command from topic %s: %s\\n\", topic, message);\n\n    if (matchesTopic(topic, \"esp/commands/state\", Global::getTopics().commandStateTopic) ||\n        matchesTopic(topic, \"esp/commands\", Global::getTopics().commandRootTopic))\n    {\n        handleStateCommand(message);\n    }\n    else if (matchesTopic(topic, \"esp/commands/booking\", Global::getTopics().commandBookingTopic))\n    {\n        handleBookingCommand(message);\n    }\n    else if (matchesTopic(topic, \"esp/commands/reservation\", Global::getTopics().commandReservationTopic))\n    {\n        handleReservationCommand(message);\n    }\n    else if (matchesTopic(topic, \"esp/commands/maintenance\", Global::getTopics().commandMaintenanceTopic))\n    {\n        handleMaintenanceCommand(message);\n    }\n    else if (matchesTopic(topic, \"esp/commands/status\", Global::getTopics().commandStatusTopic))\n    {\n        handleStatusCommand(message);\n    }\n    else\n    {\n        Log.warning(\"Unknown command topic: %s\\n\", topic);\n    }\n}\n\nvoid CommandHandler::handleStateCommand(const char *command)\n{\n    Log.info(\"Handling state command: %s\\n\", command);\n\n    DeviceState targetState = currentState;\n\n    if (strcmp(command, \"available\") == 0)\n    {\n        targetState = STATE_AVAILABLE;\n    }\n    else if (strcmp(command, \"reserved\") == 0)\n    {\n        targetState = STATE_RESERVED;\n    }\n    else if (strcmp(command, \"booked\") == 0)\n    {\n        targetState = STATE_BOOKED;\n    }\n    else if (strcmp(command, \"broken\") == 0)\n    {\n        targetState = STATE_BROKEN;\n    }\n    else if (strcmp(command, \"maintained\") == 0)\n    {\n        targetState = STATE_MAINTAINED;\n    }\n    else if (strcmp(command, \"unavailable\") == 0)\n    {\n        targetState = STATE_UNAVAILABLE;\n    }\n    else\n    {\n        Log.error(\"Unknown state command: %s\\n\", command);\n        return;\n    }\n\n    if (canTransitionTo(targetState))\n    {\n        changeState(targetState);\n        Log.info(\"State changed to: %s\\n\", getStateName(targetState));\n\n        if (Global::mqttManager)\n        {\n            char statusMsg[50];\n            sprintf(statusMsg, \"State changed to %s\", getStateName(targetState));\n            Global::mqttManager->publish(statusTopic(), statusMsg, false);\n        }\n        Global::logInfoBoth(\"Command state -> %s\", getStateName(targetState));\n    }\n    else\n    {\n        Log.warning(\"Cannot transition to state %s from current state %s\\n\", getStateName(targetState), getStateName(currentState));\n    }\n}\n\nvoid CommandHandler::handleBookingCommand(const char *command)\n{\n    Log.info(\"Handling booking command: %s\\n\", command);\n\n    if (strcmp(command, \"book\") == 0)\n    {\n        if (currentState == STATE_AVAILABLE || currentState == STATE_RESERVED) // nếu có hoặc người dùng muốn giữ chỗ\n        {\n            changeState(STATE_BOOKED);\n            Log.info(\"Device booked successfully\\n\");\n\n            if (Global::mqttManager)\n            {\n                Global::mqttManager->publish(Global::getTopics().commandBookingTopic.c_str(), \"booked\", false);\n            }\n            Global::logInfoMQTT(\"Booking command: book\");\n        }\n        else\n        {\n            Log.warning(\"Cannot book device in current state: %s\\n\", getStateName(currentState));\n        }\n    }\n    else if (strcmp(command, \"claim\") == 0)\n    {\n        if (currentState == STATE_RESERVED)\n        {\n            changeState(STATE_BOOKED);\n            Log.info(\"Device claimed successfully\\n\");\n\n            if (Global::mqttManager)\n            {\n                Global::mqttManager->publish(Global::getTopics().commandBookingTopic.c_str(), \"claimed\", false);\n            }\n            Global::logInfoMQTT(\"Booking command: claim\");\n        }\n        else\n        {\n            Log.warning(\"Cannot claim device in current state: %s\\n\", getStateName(currentState));\n        }\n    }\n    else if (strcmp(command, \"release\") == 0)\n    {\n        if (currentState == STATE_BOOKED)\n        {\n            changeState(STATE_AVAILABLE);\n            Log.info(\"Device released successfully\\n\");\n\n            if (Global::mqttManager)\n            {\n                Global::mqttManager->publish(Global::getTopics().commandBookingTopic.c_str(), \"available\", false);\n            }\n            Global::logInfoMQTT(\"Booking command: release\");\n        }\n        else\n        {\n            Log.warning(\"Cannot release device in current state: %s\\n\", getStateName(currentState));\n        }\n    }\n}\n\nvoid CommandHandler::handleReservationCommand(const char *command)\n{\n    Log.info(\"Handling reservation command: %s\\n\", command);\n\n    if (strcmp(command, \"reserve\") == 0)\n    {\n        if (currentState == STATE_AVAILABLE)\n        {\n            changeState(STATE_RESERVED);\n            Log.info(\"Device reserved successfully\\n\");\n\n            if (Global::mqttManager)\n            {\n                Global::mqttManager->publish(Global::getTopics().commandReservationTopic.c_str(), \"reserved\", false);\n            }\n            Global::logInfoMQTT(\"Reservation command: reserve\");\n        }\n        else\n        {\n            Log.warning(\"Cannot reserve device in current state: %s\\n\", getStateName(currentState));\n        }\n    }\n    else if (strcmp(command, \"cancel\") == 0)\n    {\n        if (currentState == STATE_RESERVED)\n        {\n            changeState(STATE_AVAILABLE);\n            Log.info(\"Reservation cancelled successfully\\n\");\n\n            if (Global::mqttManager)\n            {\n                Global::mqttManager->publish(Global::getTopics().commandReservationTopic.c_str(), \"available\", false);\n            }\n            Global::logInfoMQTT(\"Reservation command: cancel\");\n        }\n        else\n        {\n            Log.warning(\"Cannot cancel reservation in current state: %s\\n\", getStateName(currentState));\n        }\n    }\n}\n\nvoid CommandHandler::handleMaintenanceCommand(const char *command)\n{\n    Log.info(\"Handling maintenance command: %s\\n\", command);\n\n    if (strcmp(command, \"start\") == 0)\n    {\n        if (currentState == STATE_AVAILABLE ||\n            currentState == STATE_UNAVAILABLE ||\n            currentState == STATE_BROKEN ||\n            currentState == STATE_BOOKED)\n        {\n            changeState(STATE_MAINTAINED);\n            Log.info(\"Maintenance mode started\\n\");\n\n            if (Global::mqttManager)\n            {\n                Global::mqttManager->publish(Global::getTopics().maintenanceStatusTopic.c_str(), \"in_progress\", false);\n            }\n            Global::logInfoMQTT(\"Maintenance command: start\");\n        }\n        else\n        {\n            Log.warning(\"Cannot start maintenance in current state: %s\\n\", getStateName(currentState));\n        }\n    }\n    else if (strcmp(command, \"complete\") == 0)\n    {\n        if (currentState == STATE_MAINTAINED)\n        {\n            changeState(STATE_AVAILABLE);\n            Log.info(\"Maintenance completed\\n\");\n\n            if (Global::mqttManager)\n            {\n                Global::mqttManager->publish(Global::getTopics().maintenanceStatusTopic.c_str(), \"completed\", false);\n            }\n            Global::logInfoMQTT(\"Maintenance command: complete\");\n        }\n        else\n        {\n            Log.warning(\"Cannot complete maintenance in current state: %s\\n\", getStateName(currentState));\n        }\n    }\n}\n\nvoid CommandHandler::handleStatusCommand(const char *command)\n{\n    Log.info(\"Handling status command: %s\\n\", command);\n\n    if (strcmp(command, \"request\") == 0)\n    {\n        if (Global::mqttManager)\n        {\n            char statusMsg[100];\n            sprintf(statusMsg, \"Current state: %s\", getStateName(currentState));\n            Global::mqttManager->publish(statusTopic(), statusMsg, false);\n        }\n        Global::logInfoMQTT(\"Status requested -> %s\", getStateName(currentState));\n    }\n}\n\nbool CommandHandler::canTransitionTo(DeviceState newState)\n{\n\n    switch (currentState)\n    {\n    case STATE_RESERVED:\n        return (newState == STATE_AVAILABLE ||\n                newState == STATE_BOOKED);\n\n    case STATE_AVAILABLE:\n        return (newState == STATE_RESERVED ||\n                newState == STATE_BOOKED ||\n                newState == STATE_BROKEN ||\n                newState == STATE_MAINTAINED ||\n                newState == STATE_UNAVAILABLE);\n\n    case STATE_BOOKED:\n        return (newState == STATE_AVAILABLE ||\n                newState == STATE_BROKEN ||\n                newState == STATE_MAINTAINED ||\n                newState == STATE_UNAVAILABLE);\n\n    case STATE_BROKEN:\n        return (newState == STATE_MAINTAINED ||\n                newState == STATE_UNAVAILABLE);\n\n    case STATE_MAINTAINED:\n        return (newState == STATE_AVAILABLE ||\n                newState == STATE_UNAVAILABLE);\n\n    case STATE_UNAVAILABLE:\n        return (newState == STATE_AVAILABLE ||\n                newState == STATE_MAINTAINED);\n\n    case STATE_CONNECTED:\n    case STATE_ERROR:\n\n        return (newState == STATE_AVAILABLE ||\n                newState == STATE_MAINTAINED ||\n                newState == STATE_UNAVAILABLE);\n\n    default:\n        return false;\n    }\n}\n\nvoid CommandHandler::changeState(DeviceState newState)\n{\n    Log.info(\"Changing state from %s to %s\\n\", getStateName(currentState), getStateName(newState));\n    currentState = newState;\n\n    if (Global::ledStatusManager)\n    {\n        Global::ledStatusManager->setStatus(newState);\n    }\n\n    resetStateEntryFlags();\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot/src/main.cpp:\n"
      },
      {
        "text": "#include <Arduino.h>\n#include <WiFi.h>\n#include <PubSubClient.h>\n#include <ArduinoLog.h>\n#include \"Config.h\"\n#include \"globals.h\"\n#include \"StateMachine.h\"\n#include \"NetworkManager.h\"\n#include \"LEDStatusManager.h\"\n\nvoid setup()\n{\n  Serial.begin(74880);\n  Log.begin(LOG_LEVEL_VERBOSE, &Serial);\n\n  Global::ledStatusManager.reset(new LEDStatusManager());\n  Global::ledStatusManager->begin();\n\n  Global::bufferedLogger.reset(new BufferedLogger());\n  Global::bufferedLogger->setTopic(\"esp/logs\"); // temporary\n  Global::logInfoLocal(\"Buffered logger initialized\");\n  delay(5000);\n\n  currentState = STATE_INIT;\n  Global::ledStatusManager->setStatus(currentState);\n\n  AppConfig config = loadConfig();\n  Global::networkManager.reset(new NetworkManager());\n  Global::networkManager->setCredentials(config.wifiSsid, config.wifiPass);\n  if (!Global::networkManager->initialize())\n  {\n    currentState = STATE_ERROR;\n    Global::ledStatusManager->setStatus(currentState);\n    return;\n  }\n  if (!Global::setupMQTT(config.mqttBrokerIP.c_str(), config.mqttPort, config.mqttUsername.c_str(), config.mqttPassword.c_str()))\n  {\n    currentState = STATE_ERROR;\n    Global::ledStatusManager->setStatus(currentState);\n    return;\n  }\n  currentState = STATE_CONNECTED;\n  Global::ledStatusManager->setStatus(currentState);\n}\n\nvoid loop()\n{\n \n  if (Global::ledStatusManager)\n  {\n    Global::ledStatusManager->update();\n  }\n\n  if (Global::bufferedLogger)\n  {\n    Global::bufferedLogger->loop();\n  }\n\n  switch (currentState)\n  {\n  case STATE_INIT:\n    handleInitState();\n    break;\n  case STATE_CONNECTING_WIFI:\n    handleConnectingWifiState();\n    break;\n  case STATE_CONNECTED:\n    handleConnectedState();\n    break;\n  case STATE_ERROR:\n    handleErrorState();\n    break;\n  case STATE_RESERVED:\n    handleReservedState();\n    break;\n  case STATE_AVAILABLE:\n    handleAvailableState();\n    break;\n  case STATE_BOOKED:\n    handleBookedState();\n    break;\n  case STATE_BROKEN:\n    handleBrokenState();\n    break;\n  case STATE_MAINTAINED:\n    handleMaintainedState();\n    break;\n  case STATE_UNAVAILABLE:\n    handleUnavailableState();\n    break;\n  default:\n    handleUnknownState();\n    break;\n  }\n\n  static DeviceState lastLoggedState = STATE_INIT;\n  if (currentState != lastLoggedState)\n  {\n    Log.info(\"State changed to %s (%d)\\n\", getStateName(currentState), currentState);\n    Global::logInfoMQTT(\"State changed to %s (%d)\", getStateName(currentState), currentState);\n\n   \n    if (Global::ledStatusManager)\n    {\n      Global::ledStatusManager->setStatus(currentState);\n    }\n\n    lastLoggedState = currentState;\n  }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot/src/managers/BufferedLogger.cpp:\n"
      },
      {
        "text": "#include \"BufferedLogger.h\"\n\n#include \"MQTTManager.h\"\n#include <ArduinoLog.h>\n#include <cstdarg>\n\nBufferedLogger::BufferedLogger(unsigned long flushIntervalMs, size_t maxBufferedEntries)\n    : _mqttManager(nullptr), _flushInterval(flushIntervalMs), _maxBufferedEntries(maxBufferedEntries), _lastFlush(0)\n{\n}\n// này là CPP Setter giống java nhưng CPP \nvoid BufferedLogger::setMQTTManager(MQTTManager *manager)\n{\n    _mqttManager = manager;\n}\n\nvoid BufferedLogger::setTopic(const std::string &topic)\n{\n    _topic = topic;\n}\n\nvoid BufferedLogger::setFlushInterval(unsigned long intervalMs)\n{\n    _flushInterval = intervalMs;\n}\n\nvoid BufferedLogger::setMaxBufferedEntries(size_t maxEntries)\n{\n    _maxBufferedEntries = maxEntries;\n}\n\nvoid BufferedLogger::log(LogSeverity severity, LogDestination destination, const std::string &message)\n{\n    if (destination == LogDestination::Local || destination == LogDestination::Both)\n    {\n        logToLocal(severity, message);\n    }\n\n    if (destination == LogDestination::MQTT || destination == LogDestination::Both)\n    {\n        BufferedEntry entry{millis(), severity, message};\n        _buffer.push_back(entry);\n        ensureBufferLimit();\n    }\n}\n\nvoid BufferedLogger::log(LogSeverity severity, LogDestination destination, const char *message)\n{\n    if (!message)\n    {\n        return;\n    }\n    log(severity, destination, std::string(message));\n}\n\nvoid BufferedLogger::logf(LogSeverity severity, LogDestination destination, const char *fmt, ...)\n{\n    if (!fmt)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    char stackBuffer[128];\n    va_list argsCopy;\n    va_copy(argsCopy, args);\n    int required = vsnprintf(stackBuffer, sizeof(stackBuffer), fmt, args);\n    va_end(args);\n\n    if (required < 0)\n    {\n        va_end(argsCopy);\n        return;\n    }\n\n    if (static_cast<size_t>(required) < sizeof(stackBuffer))\n    {\n        log(severity, destination, std::string(stackBuffer));\n        va_end(argsCopy);\n        return;\n    }\n\n    std::vector<char> dynamicBuffer(static_cast<size_t>(required) + 1);\n    vsnprintf(dynamicBuffer.data(), dynamicBuffer.size(), fmt, argsCopy);\n    va_end(argsCopy);\n    log(severity, destination, std::string(dynamicBuffer.data()));\n}\n\nvoid BufferedLogger::loop()\n{\n    if (_buffer.empty())\n    {\n        return;\n    }\n\n    unsigned long now = millis();\n    if (_lastFlush == 0)\n    {\n        _lastFlush = now;\n    }\n\n    if ((_flushInterval > 0 && now - _lastFlush >= _flushInterval) || _buffer.size() >= _maxBufferedEntries)\n    {\n        flush();\n    }\n}\n\nvoid BufferedLogger::flush()\n{\n    if (_buffer.empty() || !_mqttManager || _topic.empty())\n    {\n        return;\n    }\n\n    if (!_mqttManager->isConnected())\n    {\n        return;\n    }\n\n    std::vector<BufferedEntry> pending;\n    pending.reserve(_buffer.size());\n\n    for (size_t i = 0; i < _buffer.size(); ++i)\n    {\n        const BufferedEntry &entry = _buffer[i];\n        char timestampBuffer[16];\n        snprintf(timestampBuffer, sizeof(timestampBuffer), \"%lu\", entry.timestamp);\n\n        std::string payload = std::string(timestampBuffer) + \" \" + severityLabel(entry.severity) + \": \" + entry.message;\n\n        if (!_mqttManager->publish(_topic.c_str(), payload.c_str(), false))\n        {\n            Log.warning(\"BufferedLogger failed to publish to %s\\n\", _topic.c_str());\n            pending.insert(pending.end(), _buffer.begin() + i, _buffer.end());\n            break;\n        }\n    }\n\n    if (pending.empty())\n    {\n        _buffer.clear();\n        _lastFlush = millis();\n        Log.verbose(\"BufferedLogger flushed %s\\n\", _topic.c_str());\n    }\n    else\n    {\n        _buffer.swap(pending);\n    }\n}\n\nvoid BufferedLogger::logToLocal(LogSeverity severity, const std::string &message)\n{\n    switch (severity)\n    {\n    case LogSeverity::Verbose:\n        Log.verbose(\"%s\\n\", message.c_str());\n        break;\n    case LogSeverity::Info:\n        Log.notice(\"%s\\n\", message.c_str());\n        break;\n    case LogSeverity::Warning:\n        Log.warning(\"%s\\n\", message.c_str());\n        break;\n    case LogSeverity::Error:\n        Log.error(\"%s\\n\", message.c_str());\n        break;\n    }\n}\n\nvoid BufferedLogger::ensureBufferLimit()\n{\n    if (_maxBufferedEntries == 0)\n    {\n        return;\n    }\n\n    if (_buffer.size() > _maxBufferedEntries)\n    {\n        _buffer.erase(_buffer.begin());\n    }\n}\n\nconst char *BufferedLogger::severityLabel(LogSeverity severity)\n{\n    switch (severity)\n    {\n    case LogSeverity::Verbose:\n        return \"VERBOSE\";\n    case LogSeverity::Info:\n        return \"INFO\";\n    case LogSeverity::Warning:\n        return \"WARNING\";\n    case LogSeverity::Error:\n        return \"ERROR\";\n    default:\n        return \"INFO\";\n    }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot/src/managers/LEDStatusManager.cpp:\n"
      },
      {
        "text": "#include \"LEDStatusManager.h\"\n#include \"globals.h\"\n#include <ArduinoLog.h>\n\nLEDStatusManager::LEDStatusManager()\n    : currentColor(LED_COLOR_OFF),\n      currentPattern(LED_PATTERN_OFF),\n      lastUpdateTime(0),\n      blinkState(false)\n{\n}\n\nvoid LEDStatusManager::begin()\n{\n    ledcSetup(LED_RED_CHANNEL, LED_PWM_FREQ, LED_PWM_RESOLUTION);\n    ledcSetup(LED_YELLOW_CHANNEL, LED_PWM_FREQ, LED_PWM_RESOLUTION);\n    ledcSetup(LED_GREEN_CHANNEL, LED_PWM_FREQ, LED_PWM_RESOLUTION);\n\n    ledcAttachPin(LED_RED_PIN, LED_RED_CHANNEL);\n    ledcAttachPin(LED_YELLOW_PIN, LED_YELLOW_CHANNEL);\n    ledcAttachPin(LED_GREEN_PIN, LED_GREEN_CHANNEL);\n\n    turnOffAll();\n\n    Log.info(\"LED Status Manager initialized (R=%d(source), Y=%d(source), G=%d(sink))\\n\",\n             LED_RED_PIN, LED_YELLOW_PIN, LED_GREEN_PIN);\n}\n\nvoid LEDStatusManager::turnOffAll()\n{\n    ledcWrite(LED_RED_CHANNEL, LED_OFF);\n    ledcWrite(LED_YELLOW_CHANNEL, LED_OFF);\n    ledcWrite(LED_GREEN_CHANNEL, LED_FULL_BRIGHTNESS); // nay nguoc laij sink\n}\n\nvoid LEDStatusManager::setColor(LEDColor color, uint8_t brightness)\n{\n    turnOffAll();\n\n    switch (color)\n    {\n    case LED_COLOR_RED:\n\n        ledcWrite(LED_RED_CHANNEL, brightness);\n        break;\n\n    case LED_COLOR_YELLOW:\n\n        ledcWrite(LED_YELLOW_CHANNEL, brightness);\n        break;\n\n    case LED_COLOR_GREEN:\n\n        ledcWrite(LED_GREEN_CHANNEL, 255 - brightness);\n        break;\n\n    case LED_COLOR_OFF:\n    default:\n\n        break;\n    }\n}\n\nvoid LEDStatusManager::setStatus(int state)\n{\n    DeviceState deviceState = static_cast<DeviceState>(state);\n    LEDConfig config = getConfigForState(deviceState);\n    currentColor = config.color;\n    currentPattern = config.pattern;\n    lastUpdateTime = millis();\n    blinkState = false;\n\n    Log.info(\"LED Status: Color=%d, Pattern=%d for state=%s\\n\",\n             currentColor, currentPattern, getStateName(deviceState));\n}\n\nLEDStatusManager::LEDConfig LEDStatusManager::getConfigForState(int state)\n{\n    DeviceState deviceState = static_cast<DeviceState>(state);\n    LEDConfig config;\n\n    switch (deviceState)\n    {\n    case STATE_AVAILABLE:\n\n        config.color = LED_COLOR_GREEN;\n        config.pattern = LED_PATTERN_SOLID;\n        break;\n\n    case STATE_RESERVED:\n        config.color = LED_COLOR_YELLOW;\n        config.pattern = LED_PATTERN_SLOW_PULSE;\n        break;\n\n    case STATE_BOOKED:\n        config.color = LED_COLOR_YELLOW;\n        config.pattern = LED_PATTERN_SOLID;\n        break;\n\n    case STATE_BROKEN:\n    case STATE_MAINTAINED:\n    case STATE_UNAVAILABLE:\n        config.color = LED_COLOR_RED;\n        config.pattern = LED_PATTERN_SOLID;\n        break;\n\n    case STATE_INIT:\n    case STATE_CONNECTING_WIFI:\n    case STATE_CONNECTED:\n\n        config.color = LED_COLOR_YELLOW;\n        config.pattern = LED_PATTERN_FAST_BLINK;\n        break;\n\n    case STATE_ERROR:\n\n        config.color = LED_COLOR_RED;\n        config.pattern = LED_PATTERN_FAST_BLINK;\n        break;\n\n    default:\n        config.color = LED_COLOR_OFF;\n        config.pattern = LED_PATTERN_OFF;\n        break;\n    }\n\n    return config;\n}\n\nvoid LEDStatusManager::updatePattern()\n{\n    unsigned long currentTime = millis();\n\n    switch (currentPattern)\n    {\n    case LED_PATTERN_SOLID:\n\n        if (currentColor == LED_COLOR_GREEN)\n        {\n            setColor(currentColor, LED_GREEN_DUTY);\n        }\n        else\n        {\n            setColor(currentColor, LED_FULL_BRIGHTNESS);\n        }\n        break;\n\n    case LED_PATTERN_FAST_BLINK:\n        if (currentTime - lastUpdateTime >= LED_FAST_BLINK_INTERVAL)\n        {\n            blinkState = !blinkState;\n            if (blinkState)\n            {\n                if (currentColor == LED_COLOR_GREEN)\n                {\n                    setColor(currentColor, LED_GREEN_DUTY);\n                }\n                else\n                {\n                    setColor(currentColor, LED_FULL_BRIGHTNESS);\n                }\n            }\n            else\n            {\n                turnOffAll();\n            }\n            lastUpdateTime = currentTime;\n        }\n        break;\n\n    case LED_PATTERN_SLOW_PULSE:\n\n    {\n        float phase = (float)((currentTime % LED_SLOW_PULSE_PERIOD)) / LED_SLOW_PULSE_PERIOD;\n        // Sine wave:\n        float intensity = (sin(phase * 2 * PI - PI / 2) + 1.0) / 2.0;\n\n        uint8_t brightness;\n        if (currentColor == LED_COLOR_GREEN)\n        {\n\n            uint8_t minBright = LED_PULSE_MIN_BRIGHTNESS * LED_GREEN_DUTY / LED_FULL_BRIGHTNESS;\n            brightness = (uint8_t)(minBright + intensity * (LED_GREEN_DUTY - minBright));\n        }\n        else\n        {\n            brightness = (uint8_t)(LED_PULSE_MIN_BRIGHTNESS + intensity * (LED_PULSE_MAX_BRIGHTNESS - LED_PULSE_MIN_BRIGHTNESS));\n        }\n\n        setColor(currentColor, brightness);\n    }\n    break;\n\n    case LED_PATTERN_OFF:\n    default:\n        turnOffAll();\n        break;\n    }\n}\n\nvoid LEDStatusManager::update()\n{\n    updatePattern();\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot/src/managers/MQTTManager.cpp:\n"
      },
      {
        "text": "#include \"MQTTManager.h\"\n#include <ArduinoLog.h>\n\nMQTTManager::MQTTManager(WiFiClient &wifiClient, const char *brokerIP, int port, const char *username, const char *password)\n    : _client(wifiClient), _brokerIP(brokerIP), _port(port), _username(username), _password(password)\n{\n    _client.setServer(_brokerIP.c_str(), _port);\n}\n\nbool MQTTManager::connect()\n{\n    if (_client.connect(\"ESP32Client\", _username.c_str(), _password.c_str()))\n    {\n        Log.info(\"Connected to MQTT broker\\n\");\n        return true;\n    }\n    else\n    {\n        Log.error(\"MQTT connection failed, state: %d\\n\", _client.state());\n        return false;\n    }\n}\n\nvoid MQTTManager::loop()\n{\n    _client.loop();\n}\n\nbool MQTTManager::publish(const char *topic, const char *message, bool retained)\n{\n    if (_client.publish(topic, message, retained))\n    {\n        Log.info(\"Published to %s: %s\\n\", topic, message);\n        return true;\n    }\n    else\n    {\n        Log.error(\"Failed to publish to %s\\n\", topic);\n        return false;\n    }\n}\n\nbool MQTTManager::subscribe(const char *topic)\n{\n    if (_client.subscribe(topic))\n    {\n        Log.info(\"Subscribed to %s\\n\", topic);\n        return true;\n    }\n    else\n    {\n        Log.error(\"Failed to subscribe to %s\\n\", topic);\n        return false;\n    }\n}\n\nvoid MQTTManager::setCallback(void (*callback)(char *, byte *, unsigned int))\n{\n    _client.setCallback(callback);\n}\n\nbool MQTTManager::isConnected()\n{\n    return _client.connected();\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot/src/managers/NetworkManager.cpp:\n"
      },
      {
        "text": "#include \"NetworkManager.h\"\n#include \"network.h\"\n\nNetworkManager::NetworkManager() {}\n\nNetworkManager::~NetworkManager() {}\n\nvoid NetworkManager::setCredentials(const std::string &ssid, const std::string &password)\n{\n    ssid_ = ssid;\n    password_ = password;\n}\n\nbool NetworkManager::initialize()\n{\n    return ::initializeNetwork(ssid_.c_str(), password_.c_str(), topics_); \n}\n\nconst NetworkTopics &NetworkManager::getTopics() const\n{\n    return topics_;\n}\n\nWiFiClient &NetworkManager::getWiFiClient()\n{\n    return wifiClient_;\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot/src/state/StateMachine.cpp:\n"
      },
      {
        "text": "#include \"StateMachine.h\"\n#include <Arduino.h>\n#include <WiFi.h>\n#include <ArduinoLog.h>\n#include \"globals.h\"\n\nunsigned long lastRecoveryAttempt = 0;\nint recoveryRetries = 0;\n\nunsigned long lastMqttReconnectAttempt = 0;\nint mqttReconnectRetries = 0;\n\nstatic bool availableStateEntryPublished = false;\nstatic bool bookedStateEntryPublished = false;\nstatic bool maintainedStateEntryPublished = false;\nstatic bool unavailableStateEntryPublished = false;\nstatic bool reservedStateEntryPublished = false;\nstatic bool brokenStateEntryPublished = false;\n\nstatic const char *statusTopic()\n{\n    return Global::getTopics().statusTopic.c_str();\n}\n\nvoid resetStateEntryFlags()\n{\n    availableStateEntryPublished = false;\n    bookedStateEntryPublished = false;\n    maintainedStateEntryPublished = false;\n    unavailableStateEntryPublished = false;\n    reservedStateEntryPublished = false;\n    brokenStateEntryPublished = false;\n}\n\nbool ensureMqttConnected()\n{\n    if (!Global::mqttManager)\n    {\n        return false;\n    }\n\n    if (Global::mqttManager->isConnected())\n    {\n        mqttReconnectRetries = 0;\n        return true;\n    }\n\n    unsigned long now = millis();\n\n    if (now - lastMqttReconnectAttempt < mqttReconnectInterval)\n    {\n        return false;\n    }\n\n    lastMqttReconnectAttempt = now;\n    mqttReconnectRetries++;\n\n    Log.warning(\"MQTT disconnected, attempting reconnection (attempt %d/%d)...\\n\",\n                mqttReconnectRetries, maxMqttReconnectRetries);\n\n    if (Global::mqttManager->connect())\n    {\n        Log.info(\"MQTT reconnected successfully!\\n\");\n\n        const auto &topics = Global::getTopics();\n        Global::mqttManager->subscribe(topics.commandStateTopic.c_str());\n        Global::mqttManager->subscribe(topics.commandBookingTopic.c_str());\n        Global::mqttManager->subscribe(topics.commandReservationTopic.c_str());\n        Global::mqttManager->subscribe(topics.commandMaintenanceTopic.c_str());\n        Global::mqttManager->subscribe(topics.commandStatusTopic.c_str());\n        Global::mqttManager->subscribe(topics.commandRootTopic.c_str());\n\n        mqttReconnectRetries = 0;\n        Global::logInfoBoth(\"MQTT reconnected and resubscribed to topics\");\n        return true;\n    }\n    else\n    {\n        Log.error(\"MQTT reconnection failed (state: %d)\\n\", mqttReconnectRetries);\n\n        if (mqttReconnectRetries >= maxMqttReconnectRetries)\n        {\n            Log.error(\"Max MQTT reconnection attempts reached, entering ERROR state\\n\");\n            currentState = STATE_ERROR;\n            mqttReconnectRetries = 0;\n        }\n        return false;\n    }\n}\n\nvoid handleConnectedState()\n{\n    if (Global::mqttManager)\n        Global::mqttManager->loop();\n\n    if (WiFi.status() != WL_CONNECTED)\n    {\n        currentState = STATE_ERROR;\n        Log.error(\"WiFi lost, entering ERROR state\\n\");\n        recoveryRetries = 0;\n        return;\n    }\n\n    static unsigned long connectedStartTime = 0;\n    if (connectedStartTime == 0)\n    {\n        connectedStartTime = millis();\n    }\n\n    if (millis() - connectedStartTime > 2000)\n    {\n        currentState = STATE_AVAILABLE;\n        Log.info(\"Connection stable, transitioning to AVAILABLE state\\n\");\n        Global::logInfoBoth(\"Status -> available (from CONNECTED)\");\n    }\n}\n\nvoid handleInitState()\n{\n    Log.info(\"Initializing device...\\n\");\n    currentState = STATE_CONNECTING_WIFI;\n}\n\nvoid handleConnectingWifiState()\n{\n    if (WiFi.status() == WL_CONNECTED)\n    {\n        currentState = STATE_CONNECTED;\n        Log.info(\"WiFi connected, transitioning to CONNECTED state\\n\");\n    }\n    else\n    {\n\n        Log.info(\"Attempting WiFi connection...\\n\");\n        WiFi.reconnect();\n    }\n}\n\nvoid handleErrorState()\n{\n    unsigned long now = millis();\n    if (now - lastRecoveryAttempt < recoveryInterval)\n    {\n        return;\n    }\n\n    lastRecoveryAttempt = now;\n\n    if (WiFi.status() != WL_CONNECTED)\n    {\n        recoveryRetries++;\n        Log.info(\"Attempting recovery... (attempt %d/%d)\\n\", recoveryRetries, maxRecoveryRetries);\n        WiFi.reconnect();\n\n        if (WiFi.status() != WL_CONNECTED)\n        {\n            if (recoveryRetries >= maxRecoveryRetries)\n            {\n                Log.error(\"Max recovery attempts reached. Staying in ERROR state.\\n\");\n            }\n            return;\n        }\n\n        Log.info(\"WiFi recovered\\n\");\n        recoveryRetries = 0;\n    }\n\n    if (Global::mqttManager && !Global::mqttManager->isConnected())\n    {\n        Log.info(\"Attempting MQTT reconnection after WiFi recovery...\\n\");\n        if (!ensureMqttConnected())\n        {\n            return;\n        }\n    }\n\n    currentState = STATE_CONNECTED;\n    Log.info(\"Recovered to CONNECTED state\\n\");\n    mqttReconnectRetries = 0;\n}\n\nvoid handleUnknownState()\n{\n    Log.error(\"Unknown state, transitioning to ERROR\\n\");\n    currentState = STATE_ERROR;\n}\n\nvoid handleAvailableState()\n{\n\n    if (Global::mqttManager)\n        Global::mqttManager->loop();\n\n    if (WiFi.status() != WL_CONNECTED)\n    {\n        currentState = STATE_ERROR;\n        Log.error(\"WiFi lost in AVAILABLE state, entering ERROR state\\n\");\n        recoveryRetries = 0;\n        return;\n    }\n\n    ensureMqttConnected();\n\n    static unsigned long lastStatusPublish = 0;\n\n    if (!availableStateEntryPublished)\n    {\n        if (Global::mqttManager && Global::mqttManager->isConnected())\n        {\n            Global::mqttManager->publish(statusTopic(), \"available\", true);\n        }\n        availableStateEntryPublished = true;\n        lastStatusPublish = millis();\n        Global::logInfoBoth(\"Status -> available\");\n    }\n    else if (millis() - lastStatusPublish > 10000)\n    {\n        if (Global::mqttManager && Global::mqttManager->isConnected())\n        {\n            Global::mqttManager->publish(statusTopic(), \"available\", true);\n        }\n        lastStatusPublish = millis();\n        Global::logInfoMQTT(\"Status heartbeat: available\");\n    }\n}\n\nvoid handleBookedState()\n{\n\n    if (Global::mqttManager)\n        Global::mqttManager->loop();\n\n    if (WiFi.status() != WL_CONNECTED)\n    {\n        currentState = STATE_ERROR;\n        Log.error(\"WiFi lost in BOOKED state, entering ERROR state\\n\");\n        recoveryRetries = 0;\n        return;\n    }\n\n    ensureMqttConnected();\n\n    static unsigned long lastStatusPublish = 0;\n\n    if (!bookedStateEntryPublished)\n    {\n        if (Global::mqttManager && Global::mqttManager->isConnected())\n        {\n            Global::mqttManager->publish(statusTopic(), \"booked\", true);\n        }\n        bookedStateEntryPublished = true;\n        lastStatusPublish = millis();\n        Global::logInfoBoth(\"Status -> booked\");\n    }\n    else if (millis() - lastStatusPublish > 10000)\n    {\n        if (Global::mqttManager && Global::mqttManager->isConnected())\n        {\n            Global::mqttManager->publish(statusTopic(), \"booked\", true);\n        }\n        lastStatusPublish = millis();\n        Global::logInfoMQTT(\"Status heartbeat: booked\");\n    }\n}\n\nvoid handleMaintainedState()\n{\n\n    if (Global::mqttManager)\n        Global::mqttManager->loop();\n\n    if (WiFi.status() != WL_CONNECTED)\n    {\n        currentState = STATE_ERROR;\n        Log.error(\"WiFi lost in MAINTAINED state, entering ERROR state\\n\");\n        recoveryRetries = 0;\n        return;\n    }\n\n    ensureMqttConnected();\n\n    static unsigned long lastStatusPublish = 0;\n\n    if (!maintainedStateEntryPublished)\n    {\n        if (Global::mqttManager && Global::mqttManager->isConnected())\n        {\n            Global::mqttManager->publish(statusTopic(), \"maintained\", true);\n        }\n        maintainedStateEntryPublished = true;\n        lastStatusPublish = millis();\n        Global::logInfoBoth(\"Status -> maintained\");\n    }\n    else if (millis() - lastStatusPublish > 10000)\n    {\n        if (Global::mqttManager && Global::mqttManager->isConnected())\n        {\n            Global::mqttManager->publish(statusTopic(), \"maintained\", true);\n        }\n        lastStatusPublish = millis();\n        Global::logInfoMQTT(\"Status heartbeat: maintained\");\n    }\n}\n\nvoid handleUnavailableState()\n{\n\n    if (Global::mqttManager)\n        Global::mqttManager->loop();\n\n    if (WiFi.status() != WL_CONNECTED)\n    {\n        currentState = STATE_ERROR;\n        Log.error(\"WiFi lost in UNAVAILABLE state, entering ERROR state\\n\");\n        recoveryRetries = 0;\n        return;\n    }\n\n    ensureMqttConnected();\n\n    static unsigned long lastStatusPublish = 0;\n\n    if (!unavailableStateEntryPublished)\n    {\n        if (Global::mqttManager && Global::mqttManager->isConnected())\n        {\n            Global::mqttManager->publish(statusTopic(), \"unavailable\", true);\n        }\n        unavailableStateEntryPublished = true;\n        lastStatusPublish = millis();\n        Global::logInfoBoth(\"Status -> unavailable\");\n    }\n    else if (millis() - lastStatusPublish > 10000)\n    {\n        if (Global::mqttManager && Global::mqttManager->isConnected())\n        {\n            Global::mqttManager->publish(statusTopic(), \"unavailable\", true);\n        }\n        lastStatusPublish = millis();\n        Global::logInfoMQTT(\"Status heartbeat: unavailable\");\n    }\n}\n\nvoid handleReservedState()\n{\n    if (Global::mqttManager)\n        Global::mqttManager->loop();\n\n    if (WiFi.status() != WL_CONNECTED)\n    {\n        currentState = STATE_ERROR;\n        Log.error(\"WiFi lost in RESERVED state, entering ERROR state\\n\");\n        recoveryRetries = 0;\n        return;\n    }\n\n    ensureMqttConnected();\n\n    static unsigned long lastStatusPublish = 0;\n\n    if (!reservedStateEntryPublished)\n    {\n        if (Global::mqttManager && Global::mqttManager->isConnected())\n        {\n            Global::mqttManager->publish(statusTopic(), \"reserved\", true);\n        }\n        reservedStateEntryPublished = true;\n        lastStatusPublish = millis();\n        Global::logInfoBoth(\"Status -> reserved\");\n    }\n    else if (millis() - lastStatusPublish > 10000)\n    {\n        if (Global::mqttManager && Global::mqttManager->isConnected())\n        {\n            Global::mqttManager->publish(statusTopic(), \"reserved\", true);\n        }\n        lastStatusPublish = millis();\n        Global::logInfoMQTT(\"Status heartbeat: reserved\");\n    }\n}\n\nvoid handleBrokenState()\n{\n    if (Global::mqttManager)\n        Global::mqttManager->loop();\n\n    if (WiFi.status() != WL_CONNECTED)\n    {\n        currentState = STATE_ERROR;\n        Log.error(\"WiFi lost in BROKEN state, entering ERROR state\\n\");\n        recoveryRetries = 0;\n        return;\n    }\n\n    ensureMqttConnected();\n\n    static unsigned long lastStatusPublish = 0;\n\n    if (!brokenStateEntryPublished)\n    {\n        if (Global::mqttManager && Global::mqttManager->isConnected())\n        {\n            Global::mqttManager->publish(statusTopic(), \"broken\", true);\n        }\n        brokenStateEntryPublished = true;\n        lastStatusPublish = millis();\n        Global::logInfoBoth(\"Status -> broken\");\n    }\n    else if (millis() - lastStatusPublish > 10000)\n    {\n        if (Global::mqttManager && Global::mqttManager->isConnected())\n        {\n            Global::mqttManager->publish(statusTopic(), \"broken\", true); // no eerror checjing truly fired and forgot\n        }\n        lastStatusPublish = millis();\n        Global::logInfoMQTT(\"Status heartbeat: broken\");\n    }\n}"
      },
      {
        "text": "\nContent from @/home/nguyentuanan/Desktop/workspace/MeBike/apps/iot/src/utils/DeviceUtils.cpp:\n"
      },
      {
        "text": "#include \"DeviceUtils.h\"\n\n#include <WiFi.h>\n\nstd::string getMacAddress()\n{\n    String mac = WiFi.macAddress();\n    mac.replace(\":\", \"\");\n    mac.toUpperCase();\n    return std::string(mac.c_str());\n}\n\nstd::string makeTopicWithMac(const std::string &baseTopic)\n{\n    std::string sanitizedBase = baseTopic;\n   \n    std::string mac = getMacAddress();\n    if (mac.empty())\n    {\n        return sanitizedBase;\n    }\n\n    if (!sanitizedBase.empty() && sanitizedBase.back() == '/')\n    {\n        sanitizedBase.pop_back();\n    }\n\n    sanitizedBase.reserve(sanitizedBase.size() + 1 + mac.size());\n    sanitizedBase.push_back('/');\n    sanitizedBase.append(mac);\n    return sanitizedBase;\n}"
      },
      {
        "text": "\n--- End of content ---"
      }
    ]
  },
  {
    "role": "model",
    "parts": [
      {
        "thoughtSignature": "",
        "text": "Of course, I can help with that. Analyzing a large project like this requires a careful and systematic approach. Based on the extensive file contents you've provided and the detailed specifications, I have compiled a comprehensive progress report for each module.\n\nHere is the detailed progress report for the MeBike project:\n\n---\n\n### **MeBike Project - Progress Report**\n\n**Overall Summary:**\n\nThe project is a complex, multi-faceted system with a monorepo architecture, including a backend, frontend, mobile app, and IoT components. The backend is the most mature part of the project, with many core features already implemented, especially for the **Bikes**, **Users**, and **Rentals** modules. The frontend has a solid structure with pages and components for many features, but some parts still rely on mock data, indicating that backend integration is ongoing. The IoT and IoT-Service components seem to be in the early to mid-stages of development, with foundational code in place for communication and state management.\n\n---\n\n### **1. Users Module**\n\n| Role | Feature | Status | Backend Implementation | Frontend Implementation |\n| :--- | :--- | :--- | :--- | :--- |\n| **USER** | Login (Email/Password) | ✅ **Completed** | `users.controllers.ts` -> `loginController` | `app/(auth)/auth/login/page.tsx` |\n| **USER** | Login (Google OAuth) | ❌ **Not Started** | No OAuth routes or strategies found. | No UI for Google login. |\n| **USER** | Register Account | ✅ **Completed** | `users.controllers.ts` -> `registerController` | `app/(auth)/auth/register/page.tsx` |\n| **USER** | Logout | ✅ **Completed** | `users.controllers.ts` -> `logoutController` | Implemented in dashboard layouts. |\n| **USER** | Forgot/Reset Password | ✅ **Completed** | `users.controllers.ts` -> `forgotPasswordController`, `resetPasswordController` | `app/(auth)/auth/forgot-password/page.tsx`, `reset-password/page.tsx` |\n| **USER** | Change Password | ✅ **Completed** | `users.controllers.ts` -> `changePasswordController` | `app/.../profile/change-password/page.tsx` for all roles. |\n| **USER** | View/Update Profile | ✅ **Completed** | `users.controllers.ts` -> `getMeController`, `updateMeController` | `app/.../profile/page.tsx` for all roles. |\n| **USER** | Verify Phone (OTP) | ❌ **Not Started** | No OTP generation or verification logic found for phone numbers. | Registration form has an optional phone field. |\n| **ADMIN** | Manage User List | ❌ **Not Started** | No admin-specific user management routes found. | No admin UI for user list. |\n| **ADMIN** | View User Details | ❌ **Not Started** | No admin-specific user detail routes found. | No admin UI for user details. |\n| **ADMIN** | Ban/Unban User | ❌ **Not Started** | No routes for updating user status by admin. | No admin UI for this action. |\n| **ADMIN** | User Statistics | ❌ **Not Started** | No user reporting or statistics endpoints found. | No admin UI for user stats. |\n| **STAFF** | User Information Lookup | ❌ **Not Started** | No staff-specific user lookup routes found. | No staff UI for this action. |\n\n**Users Module Summary:** Core user authentication and profile management are complete. However, all administrative and staff-level user management features are not yet started. Phone number verification via OTP is a missing feature.\n\n---\n\n### **2. Stations Module**\n\n| Role | Feature | Status | Backend Implementation | Frontend Implementation |\n| :--- | :--- | :--- | :--- | :--- |\n| **USER** | List/View Stations | 🟡 **Partially Implemented** | No dedicated station endpoints (CRUD) found. | `app/station/page.tsx` exists but uses mock data. |\n| **USER** | Find Nearest Station | ❌ **Not Started** | No geolocation-based search logic found. | No UI for this feature. |\n| **USER** | Map & Directions | ❌ **Not Started** | No map-related endpoints. | UI has a placeholder for a map. |\n| **ADMIN** | Manage Stations (CRUD) | ❌ **Not Started** | No endpoints for creating, updating, or deleting stations. | No admin UI for station management. |\n| **ADMIN** | Monitor Station Status | 🟡 **Partially Implemented** | `rentals.controllers.ts` -> `getStationActivityController` provides some stats. | No dedicated real-time monitoring UI. |\n| **ADMIN** | Bike Coordination | ❌ **Not Started** | No logic for bike coordination alerts or actions. | No UI for this feature. |\n| **STAFF** | Manual Return at Station | ✅ **Completed** | `rentals.controllers.ts` -> `endRentalByAdminOrStaffController` | No specific UI, but backend logic exists. |\n| **STAFF** | Move Bikes Between Stations | ✅ **Completed** | `bikes.controllers.ts` -> `adminUpdateBikeController` allows changing `station_id`. | No specific UI, but backend logic exists. |\n\n**Stations Module Summary:** This module is in its early stages. While the frontend has a basic UI for viewing stations, the backend lacks the necessary APIs for managing and retrieving station data. Some related features are implemented within other modules (like `Rentals` and `Bikes`).\n\n---\n\n### **3. Bikes Module**\n\n| Role | Feature | Status | Backend Implementation | Frontend Implementation |\n| :--- | :--- | :--- | :--- | :--- |\n| **USER** | View Bike Info at Station | ✅ **Completed** | `bikes.controllers.ts` -> `getBikesController` filters by station. | `app/staff/bikes/page.tsx` shows a bike list (can be adapted for users). |\n| **USER** | Rent Bike (QR Scan) | ✅ **Completed** | Logic is in `rentals.controllers.ts`. | Frontend would handle QR scan and call the API. |\n| **USER** | Report Broken Bike | ✅ **Completed** | `bikes.controllers.ts` -> `reportBrokenBikeController`. | No specific UI found, but backend is ready. |\n| **USER** | Rate Bike | ❌ **Not Started** | No rating-related routes or database schemas found. | No UI for rating. |\n| **ADMIN** | Manage Bikes (CRUD) | ✅ **Completed** | `bikes.controllers.ts` has `create`, `adminUpdate`, and `delete` controllers. | `app/staff/bikes/page.tsx` provides a management interface. |\n| **ADMIN** | Track Bike Activity/Stats | ✅ **Completed** | `getRentalsByBikeIdController` and `getBikeStatsByIdController` exist. | No specific UI for individual bike stats. |\n| **STAFF** | Manual Return | ✅ **Completed** | Part of the `rentals` module. | No specific UI, but backend logic exists. |\n| **STAFF** | Check & Maintain Bike | ✅ **Completed** | `adminUpdateBikeController` allows status changes. | The bike list UI can be used for this. |\n\n**Bikes Module Summary:** This is one of the most complete modules. The backend supports almost all specified features for users, admins, and staff. The main missing piece is the ability for users to rate bikes.\n\n---\n\n### **4. Rentals & Reservations Module**\n\n| Role | Feature | Status | Backend Implementation | Frontend Implementation |\n| :--- | :--- | :--- | :--- | :--- |\n| **USER** | Create/End Rental | ✅ **Completed** | `rentals.controllers.ts` -> `createRentalSessionController`, `endRentalSessionController`. | No specific UI found, but hooks exist (`useCreateBikeMutation`). |\n| **USER** | View Rental History | ✅ **Completed** | `rentals.controllers.ts` -> `getMyRentalsController`. | `app/user/booking-history/page.tsx` is a placeholder. |\n| **USER** | Reserve Bike | 🟡 **Partially Implemented** | `rentals.controllers.ts` has a `getReservationsStatisticController`. `reservation.schema.ts` exists. Full CRUD logic is unclear. | No UI for creating reservations. |\n| **ADMIN** | Manage All Rentals | ✅ **Completed** | `rentals.controllers.ts` -> `getAllRentalsController`, `updateDetailRentalController`. | `app/staff/rentals/page.tsx` provides a management interface. |\n| **ADMIN** | Rental Statistics | ✅ **Completed** | `getRentalRevenueController`, `getStationActivityController`, `getReservationsStatisticController`. | No dedicated stats dashboard found. |\n| **STAFF** | Manual End Rental | ✅ **Completed** | `rentals.controllers.ts` -> `endRentalByAdminOrStaffController`. | No specific UI, but backend logic exists. |\n\n**Rentals & Reservations Module Summary:** The core rental process (create, end, view history) is well-implemented on the backend. Reservation functionality is partially in place but needs full CRUD implementation. The frontend has a management table for staff but needs pages for users to view their history and create reservations.\n\n---\n\n### **5. Payments, Wallets & Refunds Module**\n\n| Role | Feature | Status | Backend Implementation | Frontend Implementation |\n| :--- | :--- | :--- | :--- | :--- |\n| **USER** | Pay for Rental | 🟡 **Partially Implemented** | `payment.schemas.ts` exists, but no controller to create payments. Assumes wallet is used. | No payment UI found. |\n| **USER** | Manage Wallet | ✅ **Completed** | `wallet.controllers.ts` handles balance, history, and withdrawal requests. | No UI for wallet management. |\n| **USER** | View Payment History | ✅ **Completed** | `wallet.controllers.ts` -> `getUserTransactionWalletController`. | No UI for payment history. |\n| **USER** | Request Refund | ✅ **Completed** | `wallet.controllers.ts` -> `refundController`. | No UI for requesting refunds. |\n| **ADMIN** | Manage Transactions | ✅ **Completed** | `wallet.controllers.ts` allows balance adjustments. | No admin UI for transaction management. |\n| **ADMIN** | Process Refunds | ✅ **Completed** | `wallet.controllers.ts` -> `updateRefundController`. | No admin UI for processing refunds. |\n| **ADMIN** | Process Withdrawals | ✅ **Completed** | `wallet.controllers.ts` -> `updateWithdrawStatusController`. | No admin UI for processing withdrawals. |\n\n**Payments Module Summary:** The backend has strong support for a user wallet system, including deposits, withdrawals, and refunds. However, the direct payment processing for a rental session (e.g., via VNPay, Momo) is not explicitly implemented. The frontend is missing UIs for all payment-related features.\n\n---\n\n### **6. Reports & Ratings Module**\n\n| Role | Feature | Status | Backend Implementation | Frontend Implementation |\n| :--- | :--- | :--- | :--- | :--- |\n| **USER** | Report Broken Bike/Station | ✅ **Completed** | `reports.controllers.ts` -> `createReportController`. | No UI for creating reports. |\n| **USER** | Send SOS | ✅ **Completed** | `createReportController` handles SOS types with location data. | No UI for sending SOS. |\n| **USER** | View Report Status | ✅ **Completed** | `reports.controllers.ts` -> `getAllUserReportController`. | No UI for viewing report status. |\n| **USER** | Rate Bike/Service | ❌ **Not Started** | No rating routes, controllers, or database schemas found. | No UI for ratings. |\n| **ADMIN** | Manage All Reports | ✅ **Completed** | `reports.controllers.ts` -> `getAllReportController`, `updateReportStatusController`. | No admin UI for report management. |\n| **ADMIN** | Manage Ratings | ❌ **Not Started** | No rating management features found. | No admin UI for ratings. |\n\n**Reports & Ratings Module Summary:** The reporting system is well-implemented on the backend, covering various report types including SOS. The entire rating system, however, is not yet started. The frontend lacks UI for both reporting and rating features.\n\n---\n\n### **7. Suppliers Module**\n\n| Role | Feature | Status | Backend Implementation | Frontend Implementation |\n| :--- | :--- | :--- | :--- | :--- |\n| **ADMIN** | Manage Suppliers (CRUD) | ✅ **Completed** | `suppliers.controllers.ts` has full CRUD functionality. | No admin UI for supplier management. |\n| **ADMIN** | Manage Contracts | 🟡 **Partially Implemented** | Supplier schema includes `contract_fee`, but no full contract management. | No UI for contract management. |\n| **ADMIN** | Track Bikes by Supplier | ✅ **Completed** | `supplier.services.ts` has `getAllSupplierBikeStats`. | No UI for these stats. |\n| **ADMIN** | Link Bike to Supplier | ✅ **Completed** | `bikes.controllers.ts` handles `supplier_id` on create/update. | No UI for this action. |\n\n**Suppliers Module Summary:** The backend has strong support for managing suppliers and tracking their associated bikes. The frontend currently lacks any UI for these administrative features.\n\n---\n\n### **8. IoT & IoT-Service Module**\n\n| Feature | Status | Implementation Details |\n| :--- | :--- | :--- |\n| **Device State Machine** | ✅ **Completed** | `apps/iot/src/handlers/CommandHandler.cpp` defines clear state transition rules (e.g., `AVAILABLE` -> `BOOKED`). The device can change states based on commands. |\n| **MQTT Communication** | ✅ **Completed** | Both `iot-service` and `iot` have MQTT managers (`MqttConnectionManager`, `MQTTManager.cpp`) to connect, publish, and subscribe to topics. |\n| **Command Handling (IoT Device)** | ✅ **Completed** | `CommandHandler.cpp` processes commands for state, booking, reservation, and maintenance received from the `iot-service`. |\n| **Command Publishing (IoT Service)** | ✅ **Completed** | `apps/iot-service/src/publishers/commands.ts` can send commands to devices. The service exposes HTTP endpoints to trigger these commands. |\n| **Device Discovery & Status** | 🟡 **Partially Implemented** | `DeviceDiscovery` and `DeviceManager` in the `iot-service` track device status changes, but the system appears to rely on devices publishing their status rather than active discovery. |\n| **Hardware Integration (LED)** | ✅ **Completed** | `apps/iot/src/managers/LEDStatusManager.cpp` manages the device's LED to reflect its current state (e.g., solid green for `AVAILABLE`, blinking yellow for `RESERVED`). |\n\n**IoT Module Summary:** The foundational IoT communication and state management are well-established. The `iot-service` can send commands, and the `iot` device can receive and act on them, including providing visual feedback via an LED. The system is robust enough to handle the core logic of bike locking/unlocking and status changes."
      }
    ]
  }
]