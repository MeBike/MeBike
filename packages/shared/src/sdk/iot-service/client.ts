/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * IoT Service API
 * HTTP contract for publishing IoT commands and querying device state.
 * OpenAPI spec version: 1.0.0
 */
import type {
  DeviceId,
  ErrorResponse,
  GetV1Devices200,
  GetV1DevicesDeviceId200,
  GetV1Health200,
  PostV1DevicesDeviceIdCommandsBooking202,
  PostV1DevicesDeviceIdCommandsBookingBody,
  PostV1DevicesDeviceIdCommandsMaintenance202,
  PostV1DevicesDeviceIdCommandsMaintenanceBody,
  PostV1DevicesDeviceIdCommandsReservation202,
  PostV1DevicesDeviceIdCommandsReservationBody,
  PostV1DevicesDeviceIdCommandsState202,
  PostV1DevicesDeviceIdCommandsStateBody,
  PostV1DevicesDeviceIdCommandsStatus202,
  PostV1DevicesDeviceIdCommandsStatusBody,
} from "./schemas";

import { httpClient, mergeHeaders } from "../http-client";

/**
 * Check the health of the IoT service and retrieve uptime information.
 * @summary Service heartbeat
 */
export type getV1HealthResponse200 = {
  data: GetV1Health200;
  status: 200;
};

export type getV1HealthResponseSuccess = (getV1HealthResponse200) & {
  headers: Headers;
};
;

export type getV1HealthResponse = (getV1HealthResponseSuccess);

export function getGetV1HealthUrl() {
  return "/v1/health";
}

export async function getV1Health(options?: RequestInit): Promise<getV1HealthResponse> {
  return httpClient<getV1HealthResponse>(getGetV1HealthUrl(), {
    ...options,
    method: "GET",

  });
}

/**
 * Return the current status of all devices tracked by the service.
 * @summary List devices
 */
export type getV1DevicesResponse200 = {
  data: GetV1Devices200;
  status: 200;
};

export type getV1DevicesResponse500 = {
  data: ErrorResponse;
  status: 500;
};

export type getV1DevicesResponseSuccess = (getV1DevicesResponse200) & {
  headers: Headers;
};
export type getV1DevicesResponseError = (getV1DevicesResponse500) & {
  headers: Headers;
};

export type getV1DevicesResponse = (getV1DevicesResponseSuccess | getV1DevicesResponseError);

export function getGetV1DevicesUrl() {
  return "/v1/devices";
}

export async function getV1Devices(options?: RequestInit): Promise<getV1DevicesResponse> {
  return httpClient<getV1DevicesResponse>(getGetV1DevicesUrl(), {
    ...options,
    method: "GET",

  });
}

/**
 * Return the latest known status for a specific device.
 * @summary Get a device status
 */
export type getV1DevicesDeviceIdResponse200 = {
  data: GetV1DevicesDeviceId200;
  status: 200;
};

export type getV1DevicesDeviceIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getV1DevicesDeviceIdResponse404 = {
  data: ErrorResponse;
  status: 404;
};

export type getV1DevicesDeviceIdResponse500 = {
  data: ErrorResponse;
  status: 500;
};

export type getV1DevicesDeviceIdResponseSuccess = (getV1DevicesDeviceIdResponse200) & {
  headers: Headers;
};
export type getV1DevicesDeviceIdResponseError = (getV1DevicesDeviceIdResponse400 | getV1DevicesDeviceIdResponse404 | getV1DevicesDeviceIdResponse500) & {
  headers: Headers;
};

export type getV1DevicesDeviceIdResponse = (getV1DevicesDeviceIdResponseSuccess | getV1DevicesDeviceIdResponseError);

export function getGetV1DevicesDeviceIdUrl(deviceId: DeviceId) {
  return `/v1/devices/${deviceId}`;
}

export async function getV1DevicesDeviceId(deviceId: DeviceId, options?: RequestInit): Promise<getV1DevicesDeviceIdResponse> {
  return httpClient<getV1DevicesDeviceIdResponse>(getGetV1DevicesDeviceIdUrl(deviceId), {
    ...options,
    method: "GET",

  });
}

/**
 * **Low-level state manipulation** for administrative purposes. Directly changes device state if transition is allowed by the state machine. Use workflow commands (booking, reservation, maintenance) for user-facing operations. Available states: available, reserved, booked, broken, maintained, unavailable.
 * @summary Send a state command
 */
export type postV1DevicesDeviceIdCommandsStateResponse202 = {
  data: PostV1DevicesDeviceIdCommandsState202;
  status: 202;
};

export type postV1DevicesDeviceIdCommandsStateResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type postV1DevicesDeviceIdCommandsStateResponse409 = {
  data: ErrorResponse;
  status: 409;
};

export type postV1DevicesDeviceIdCommandsStateResponse500 = {
  data: ErrorResponse;
  status: 500;
};

export type postV1DevicesDeviceIdCommandsStateResponseSuccess = (postV1DevicesDeviceIdCommandsStateResponse202) & {
  headers: Headers;
};
export type postV1DevicesDeviceIdCommandsStateResponseError = (postV1DevicesDeviceIdCommandsStateResponse400 | postV1DevicesDeviceIdCommandsStateResponse409 | postV1DevicesDeviceIdCommandsStateResponse500) & {
  headers: Headers;
};

export type postV1DevicesDeviceIdCommandsStateResponse = (postV1DevicesDeviceIdCommandsStateResponseSuccess | postV1DevicesDeviceIdCommandsStateResponseError);

export function getPostV1DevicesDeviceIdCommandsStateUrl(deviceId: DeviceId) {
  return `/v1/devices/${deviceId}/commands/state`;
}

export async function postV1DevicesDeviceIdCommandsState(deviceId: DeviceId, postV1DevicesDeviceIdCommandsStateBody: PostV1DevicesDeviceIdCommandsStateBody, options?: RequestInit): Promise<postV1DevicesDeviceIdCommandsStateResponse> {
  return httpClient<postV1DevicesDeviceIdCommandsStateResponse>(getPostV1DevicesDeviceIdCommandsStateUrl(deviceId), {
    ...options,
    method: "POST",
    headers: mergeHeaders({ "Content-Type": "application/json" }, options?.headers),
    body: JSON.stringify(
      postV1DevicesDeviceIdCommandsStateBody,
    ),
  });
}

/**
 * **User-facing booking workflow.** Commands: `book` (start using bike), `claim` (activate reservation), `release` (finish ride). Includes business logic and additional status publishing beyond simple state changes.
 * @summary Send a booking command
 */
export type postV1DevicesDeviceIdCommandsBookingResponse202 = {
  data: PostV1DevicesDeviceIdCommandsBooking202;
  status: 202;
};

export type postV1DevicesDeviceIdCommandsBookingResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type postV1DevicesDeviceIdCommandsBookingResponse409 = {
  data: ErrorResponse;
  status: 409;
};

export type postV1DevicesDeviceIdCommandsBookingResponse500 = {
  data: ErrorResponse;
  status: 500;
};

export type postV1DevicesDeviceIdCommandsBookingResponseSuccess = (postV1DevicesDeviceIdCommandsBookingResponse202) & {
  headers: Headers;
};
export type postV1DevicesDeviceIdCommandsBookingResponseError = (postV1DevicesDeviceIdCommandsBookingResponse400 | postV1DevicesDeviceIdCommandsBookingResponse409 | postV1DevicesDeviceIdCommandsBookingResponse500) & {
  headers: Headers;
};

export type postV1DevicesDeviceIdCommandsBookingResponse = (postV1DevicesDeviceIdCommandsBookingResponseSuccess | postV1DevicesDeviceIdCommandsBookingResponseError);

export function getPostV1DevicesDeviceIdCommandsBookingUrl(deviceId: DeviceId) {
  return `/v1/devices/${deviceId}/commands/booking`;
}

export async function postV1DevicesDeviceIdCommandsBooking(deviceId: DeviceId, postV1DevicesDeviceIdCommandsBookingBody: PostV1DevicesDeviceIdCommandsBookingBody, options?: RequestInit): Promise<postV1DevicesDeviceIdCommandsBookingResponse> {
  return httpClient<postV1DevicesDeviceIdCommandsBookingResponse>(getPostV1DevicesDeviceIdCommandsBookingUrl(deviceId), {
    ...options,
    method: "POST",
    headers: mergeHeaders({ "Content-Type": "application/json" }, options?.headers),
    body: JSON.stringify(
      postV1DevicesDeviceIdCommandsBookingBody,
    ),
  });
}

/**
 * **Reservation workflow.** Commands: `reserve` (hold bike for 5-15 min), `cancel` (cancel before claiming). Typically used before booking when user wants to ensure bike availability.
 * @summary Send a reservation command
 */
export type postV1DevicesDeviceIdCommandsReservationResponse202 = {
  data: PostV1DevicesDeviceIdCommandsReservation202;
  status: 202;
};

export type postV1DevicesDeviceIdCommandsReservationResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type postV1DevicesDeviceIdCommandsReservationResponse409 = {
  data: ErrorResponse;
  status: 409;
};

export type postV1DevicesDeviceIdCommandsReservationResponse500 = {
  data: ErrorResponse;
  status: 500;
};

export type postV1DevicesDeviceIdCommandsReservationResponseSuccess = (postV1DevicesDeviceIdCommandsReservationResponse202) & {
  headers: Headers;
};
export type postV1DevicesDeviceIdCommandsReservationResponseError = (postV1DevicesDeviceIdCommandsReservationResponse400 | postV1DevicesDeviceIdCommandsReservationResponse409 | postV1DevicesDeviceIdCommandsReservationResponse500) & {
  headers: Headers;
};

export type postV1DevicesDeviceIdCommandsReservationResponse = (postV1DevicesDeviceIdCommandsReservationResponseSuccess | postV1DevicesDeviceIdCommandsReservationResponseError);

export function getPostV1DevicesDeviceIdCommandsReservationUrl(deviceId: DeviceId) {
  return `/v1/devices/${deviceId}/commands/reservation`;
}

export async function postV1DevicesDeviceIdCommandsReservation(deviceId: DeviceId, postV1DevicesDeviceIdCommandsReservationBody: PostV1DevicesDeviceIdCommandsReservationBody, options?: RequestInit): Promise<postV1DevicesDeviceIdCommandsReservationResponse> {
  return httpClient<postV1DevicesDeviceIdCommandsReservationResponse>(getPostV1DevicesDeviceIdCommandsReservationUrl(deviceId), {
    ...options,
    method: "POST",
    headers: mergeHeaders({ "Content-Type": "application/json" }, options?.headers),
    body: JSON.stringify(
      postV1DevicesDeviceIdCommandsReservationBody,
    ),
  });
}

/**
 * **Maintenance workflow.** Commands: `start` (begin maintenance), `complete` (return to service). Typically used by admins or automated systems to mark devices for servicing.
 * @summary Send a maintenance command
 */
export type postV1DevicesDeviceIdCommandsMaintenanceResponse202 = {
  data: PostV1DevicesDeviceIdCommandsMaintenance202;
  status: 202;
};

export type postV1DevicesDeviceIdCommandsMaintenanceResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type postV1DevicesDeviceIdCommandsMaintenanceResponse409 = {
  data: ErrorResponse;
  status: 409;
};

export type postV1DevicesDeviceIdCommandsMaintenanceResponse500 = {
  data: ErrorResponse;
  status: 500;
};

export type postV1DevicesDeviceIdCommandsMaintenanceResponseSuccess = (postV1DevicesDeviceIdCommandsMaintenanceResponse202) & {
  headers: Headers;
};
export type postV1DevicesDeviceIdCommandsMaintenanceResponseError = (postV1DevicesDeviceIdCommandsMaintenanceResponse400 | postV1DevicesDeviceIdCommandsMaintenanceResponse409 | postV1DevicesDeviceIdCommandsMaintenanceResponse500) & {
  headers: Headers;
};

export type postV1DevicesDeviceIdCommandsMaintenanceResponse = (postV1DevicesDeviceIdCommandsMaintenanceResponseSuccess | postV1DevicesDeviceIdCommandsMaintenanceResponseError);

export function getPostV1DevicesDeviceIdCommandsMaintenanceUrl(deviceId: DeviceId) {
  return `/v1/devices/${deviceId}/commands/maintenance`;
}

export async function postV1DevicesDeviceIdCommandsMaintenance(deviceId: DeviceId, postV1DevicesDeviceIdCommandsMaintenanceBody: PostV1DevicesDeviceIdCommandsMaintenanceBody, options?: RequestInit): Promise<postV1DevicesDeviceIdCommandsMaintenanceResponse> {
  return httpClient<postV1DevicesDeviceIdCommandsMaintenanceResponse>(getPostV1DevicesDeviceIdCommandsMaintenanceUrl(deviceId), {
    ...options,
    method: "POST",
    headers: mergeHeaders({ "Content-Type": "application/json" }, options?.headers),
    body: JSON.stringify(
      postV1DevicesDeviceIdCommandsMaintenanceBody,
    ),
  });
}

/**
 * Ask a device to publish its current status to MQTT.
 * @summary Request a status update
 */
export type postV1DevicesDeviceIdCommandsStatusResponse202 = {
  data: PostV1DevicesDeviceIdCommandsStatus202;
  status: 202;
};

export type postV1DevicesDeviceIdCommandsStatusResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type postV1DevicesDeviceIdCommandsStatusResponse409 = {
  data: ErrorResponse;
  status: 409;
};

export type postV1DevicesDeviceIdCommandsStatusResponse500 = {
  data: ErrorResponse;
  status: 500;
};

export type postV1DevicesDeviceIdCommandsStatusResponseSuccess = (postV1DevicesDeviceIdCommandsStatusResponse202) & {
  headers: Headers;
};
export type postV1DevicesDeviceIdCommandsStatusResponseError = (postV1DevicesDeviceIdCommandsStatusResponse400 | postV1DevicesDeviceIdCommandsStatusResponse409 | postV1DevicesDeviceIdCommandsStatusResponse500) & {
  headers: Headers;
};

export type postV1DevicesDeviceIdCommandsStatusResponse = (postV1DevicesDeviceIdCommandsStatusResponseSuccess | postV1DevicesDeviceIdCommandsStatusResponseError);

export function getPostV1DevicesDeviceIdCommandsStatusUrl(deviceId: DeviceId) {
  return `/v1/devices/${deviceId}/commands/status`;
}

export async function postV1DevicesDeviceIdCommandsStatus(deviceId: DeviceId, postV1DevicesDeviceIdCommandsStatusBody?: PostV1DevicesDeviceIdCommandsStatusBody, options?: RequestInit): Promise<postV1DevicesDeviceIdCommandsStatusResponse> {
  return httpClient<postV1DevicesDeviceIdCommandsStatusResponse>(getPostV1DevicesDeviceIdCommandsStatusUrl(deviceId), {
    ...options,
    method: "POST",
    headers: mergeHeaders({ "Content-Type": "application/json" }, options?.headers),
    body: JSON.stringify(
      postV1DevicesDeviceIdCommandsStatusBody,
    ),
  });
}
