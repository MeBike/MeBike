# ===================================================================
# Users API
# ===================================================================
/users/register:
  post:
    tags: [Users]
    summary: Register a new user
    description: Creates a new user account, sends a verification email, and returns access/refresh tokens.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/RegisterReqBody.yaml'
    responses:
      '201':
        description: Registration successful.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/RegisterSuccessResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'

/users/login:
  post:
    tags: [Users]
    summary: Log in a user
    description: Authenticates a user with email and password, returning access and refresh tokens.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/LoginReqBody.yaml'
    responses:
      '200':
        description: Login successful.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/LoginSuccessResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'

/users/logout:
  post:
    tags: [Users]
    summary: Logout a user
    description: Invalidates the provided refresh token, effectively logging the user out. Requires a valid access token for authentication.
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/LogoutReqBody.yaml'
    responses:
      '200':
        $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'

/users/forgot-password:
  post:
    tags: [Users]
    summary: Request a password reset
    description: Sends a forgot password token to the user's email if the email exists.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/ForgotPasswordReqBody.yaml'
    responses:
      '200':
        $ref: '../components/schemas/MessageResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'

/users/verify-forgot-password:
  post:
    tags: [Users]
    summary: Verify forgot password token
    description: Checks if the provided forgot password token is valid.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/VerifyForgotPasswordTokenReqBody.yaml'
    responses:
      '200':
        $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'

/users/reset-password:
  post:
    tags: [Users]
    summary: "Reset user password with OTP"
    description: "Sets a new password for the user using a valid email and OTP."
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/ResetPasswordReqBody.yaml'
    responses:
      '200':
        $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'

/users/verify-email:
  post:
    tags: [Users]
    summary: Verify user email
    description: "Verifies a user's email with the provided OTP."
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/VerifyEmailReqBody.yaml'
    responses:
      '200':
        description: Email verification status. Can be a success message or a new set of tokens.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '../components/schemas/LoginSuccessResponse.yaml'
                - $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'

/users/resend-verify-email:
  post:
    tags: [Users]
    summary: Resend email verification token
    description: Resends a new email verification token to the authenticated user's email.
    security:
      - BearerAuth: []
    responses:
      '200':
        $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: Forbidden (user is banned or already verified).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'

/users/change-password:
  put:
    tags: [Users]
    summary: Change user password
    description: Allows an authenticated and verified user to change their password by providing the old and new password.
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/ChangePasswordReqBody.yaml'
    responses:
      '200':
        $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        description: Unauthorized (invalid access token or old password does not match).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: Forbidden (user is not verified).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'

/users/me:
  get:
    tags: [Users]
    summary: Get current user's profile
    description: Retrieves the profile information of the currently authenticated user.
    security:
      - BearerAuth: []
    responses:
      '200':
        description: Successfully retrieved user profile.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/GetMeSuccessResponse.yaml'
      '401': 
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'
  patch:
    tags: [Users]
    summary: Update current user's profile
    description: Partially updates the profile information of the authenticated user. Only include the fields to be changed.
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/UpdateMeReqBody.yaml'
    responses:
      '200':
        description: Profile updated successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/GetMeSuccessResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'

/users/refresh-token:
  post:
    tags: [Users]
    summary: Refresh access token
    description: Issues a new access token and refresh token in exchange for a valid refresh token.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/RefreshTokenReqBody.yaml'
    responses:
      '200':
        description: Tokens refreshed successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/RefreshTokenSuccessResponse.yaml'
      '401':
        description: Unauthorized (refresh token is invalid, used, or non-existent).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'

/users/manage-users/get-all:
  get:
    tags: [Users]
    summary: Get all users (Admin/Staff only)
    description: Retrieves a paginated list of all users. This endpoint is accessible only by Admin and Staff.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      - name: role
        in: query
        required: false
        description: Filter users by role.
        schema:
          $ref: '../components/schemas/User.yaml#/properties/role' 
      - name: verify
        in: query
        required: false
        description: Filter users by verification status.
        schema:
          $ref: '../components/schemas/User.yaml#/properties/verify' 
    responses:
      '200':
        description: A paginated list of users retrieved successfully.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/User.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: Forbidden. User does not have Admin or Staff rights.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        description: Validation error (e.g., invalid role or verify status).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorValidationResponse.yaml'

/users/manage-users/search:
  get:
    tags: [Users]
    summary: Search users by email or phone (Admin/Staff only)
    description: Searches for users by matching email or phone number. Requires Admin or Staff privileges.
    security:
      - BearerAuth: []
    parameters:
      - name: q
        in: query
        required: true
        description: "The search query (full or partial email or phone number)."
        schema:
          type: string
          example: "09123456"
    responses:
      '200':
        description: Search successful. Returns a list of matching users.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Search users successfully"
                data:
                  type: array
                  items:
                    $ref: '../components/schemas/User.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: Forbidden. User does not have Admin or Staff rights.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        description: User from token not found.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        description: Validation error (e.g., search query 'q' is missing).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorValidationResponse.yaml'

/users/manage-users/{_id}:
  get:
    tags: [Users]
    summary: Get user detail by ID (Admin/Staff only)
    description: Retrieves the full profile information of a specific user by their ID. Requires Admin or Staff privileges.
    security:
      - BearerAuth: []
    parameters:
      - name: _id
        in: path
        required: true
        description: The ID of the user to retrieve.
        schema:
          type: string
          format: mongoId
          example: "60c72b2f9b1d8e001f8e8e8e"
    responses:
      '200':
        description: User detail retrieved successfully.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Lấy thông tin chi tiết người dùng thành công"
                result:
                  $ref: '../components/schemas/User.yaml'
      '401':
        description: Unauthorized (Invalid access token).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: Forbidden (User does not have Admin or Staff rights).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        description: User not found (either the user from the token or the user specified by _id).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
  patch:
    tags: [Users]
    summary: Update user by ID (Admin/Staff only)
    description: |
      Partially updates a user's profile. Requires Admin or Staff privileges.
      - Only fields included in the request body will be updated.
      - **Important**: If the 'email' field is changed, the user's 'verify' status will be automatically reset to 'UNVERIFIED' and a new verification OTP will be sent to the new email.
    security:
      - BearerAuth: []
    parameters:
      - name: _id
        in: path
        required: true
        description: The ID of the user to update.
        schema:
          type: string
          format: mongoId
          example: "60c72b2f9b1d8e001f8e8e8e"
    requestBody:
      description: A JSON object containing the fields to update. All fields are optional.
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/UpdateUserReqBody.yaml'
    responses:
      '200':
        description: User updated successfully.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Cập nhật thông tin người dùng thành công"
                result:
                  $ref: '../components/schemas/User.yaml'
      '401':
        description: Unauthorized (Invalid access token).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: Forbidden (User does not have Admin or Staff rights).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        description: User not found (either the user from the token or the user specified by _id).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        description: "Validation error (e.g., email/username/phone/nfc already exists, invalid format)."
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorValidationResponse.yaml'

/users/manage-users/admin-reset-password/{_id}:
  post:
    tags: [Users]
    summary: Reset a user's password (Admin only)
    description: "Allows an Admin to forcibly set a new password for any user. This action is irreversible."
    security:
      - BearerAuth: []
    parameters:
      - name: _id
        in: path
        required: true
        description: "The ID of the user whose password will be reset."
        schema:
          type: string
          format: mongoId
          example: "60c72b2f9b1d8e001f8e8e8e"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/AdminResetPasswordReqBody.yaml'
    responses:
      '200':
        description: "Password reset successfully."
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Đặt lại mật khẩu thành công"
      '401':
        description: "Unauthorized (Invalid access token)."
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: "Forbidden (User is not an Admin)."
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        description: "User not found."
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        description: "Validation error (e.g., passwords do not match, password not strong enough)."
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorValidationResponse.yaml'

/users/manage-users/stats:
  get:
    tags: [Users]
    summary: Get user statistics (Admin/Staff only)
    description: "Retrieves statistics about the user base (total, verified, unverified, banned). Requires Admin or Staff privileges."
    security:
      - BeararAuth: []
    responses:
      '200':
        description: "User statistics retrieved successfully."
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Lấy thống kê người dùng thành công"
                result:
                  $ref: '../components/schemas/UserStats.yaml'
      '401':
        description: "Unauthorized (Invalid access token)."
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: "Forbidden (User does not have Admin or Staff rights)."
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        description: "User not found (user from token does not exist)."
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'

/users/manage-users/stats/active-users:
  get:
    tags: [Users]
    summary: Get active user statistics (Admin/Staff only)
    description: |
      Retrieves a timeseries of active user counts, grouped by day or month.
      Active users are defined as users who have had token activity (login/refresh).
      Requires Admin or Staff privileges.
    security:
      - BearerAuth: []
    parameters:
      - name: groupBy
        in: query
        required: true
        description: "Group the statistics by 'day' or 'month'."
        schema:
          type: string
          enum: [day, month]
          example: "day"
      - name: startDate
        in: query
        required: true
        description: "The start date of the period (YYYY-MM-DD)."
        schema:
          type: string
          format: date
          example: "2025-10-20"
      - name: endDate
        in: query
        required: true
        description: "The end date of the period (YYYY-MM-DD). Must be after or the same as startDate."
        schema:
          type: string
          format: date
          example: "2025-10-23"
    responses:
      '200':
        description: "Active user statistics retrieved successfully."
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Lấy thống kê người dùng hoạt động thành công"
                result:
                  type: array
                  items:
                    $ref: '../components/schemas/ActiveUserStatItem.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        description: "Validation error (e.g., missing params, invalid groupBy, endDate before startDate)."
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorValidationResponse.yaml'

# ===================================================================
# Bikes API
# ===================================================================
/bikes:
  get:
    tags: [Bikes]
    summary: Get a list of bikes
    description: |
      Retrieves a paginated list of bikes. Filter bikes by status, chip_id, station_id, and supplier_id.
    # security:
    #   - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      - name: station_id
        in: query
        description: Filter bikes by station ID.
        schema:
          type: string
          format: mongoId
      - name: supplier_id
        in: query
        description: Filter bikes by supplier ID.
        schema:
          type: string
          format: mongoId
      - name: status
        in: query
        description: "Filter bikes by status. (Admin/Staff only for non-available statuses)"
        schema:
          $ref: '../components/schemas/BikeStatus.yaml'
      - name: chip_id
        in: query
        description: Filter bikes by chip ID.
        required: false
        schema: {
          type: string,
          example: "CHIP123456"
        }
    responses:
      '200':
        description: A paginated list of bikes.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Bike.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
  post:
    tags: [Bikes]
    summary: Create a new bike (Admin only)
    description: Adds a new bike to the system. Requires admin privileges.
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/CreateBikeReqBody.yaml'
    responses:
      '201':
        description: Bike created successfully.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Create bike successfully"
                result:
                  $ref: '../components/schemas/Bike.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'

/bikes/stats:
  get:
    tags: [Bikes]
    summary: Get overall bike statistics (Admin only)
    security:
      - BearerAuth: []
    responses:
      '200':
        description: Statistics retrieved successfully.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '500':
        $ref: '../components/schemas/ErrorServerResponse.yaml'

/bikes/{_id}:
  get:
    tags: [Bikes]
    summary: Get bike by ID
    security:
      - BearerAuth: []
    parameters:
      - name: _id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Bike details retrieved successfully.
        content:
          application/json:
            schema:
              type: object
              properties:
                message: 
                  type: string
                result:
                  $ref: '../components/schemas/Bike.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
  delete:
    tags: [Bikes]
    summary: Delete a bike (Admin only)
    security:
      - BearerAuth: []
    parameters:
      - name: _id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
        
/bikes/report-broken/{_id}:
  patch:
    tags: [Bikes]
    summary: Report a broken bike
    description: Allows a user to report a bike they are currently renting as broken.
    security:
      - BearerAuth: []
    parameters:
      - name: _id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Bike reported successfully.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: Forbidden, user is not renting this bike.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'

/bikes/admin-update/{_id}:
  patch:
    tags: [Bikes]
    summary: Update bike details (Admin/Staff only)
    security:
      - BearerAuth: []
    parameters:
      - name: _id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/UpdateBikeReqBody.yaml'
    responses:
      '200':
        description: Bike updated successfully.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'

/bikes/{_id}/rentals:
  get:
    tags: [Bikes]
    summary: Get rental history for a bike (Admin/Staff only)
    security:
      - BearerAuth: []
    parameters:
      - name: _id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
    responses:
      '200':
        description: A paginated list of rentals for the bike.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/bikes/{_id}/stats:
  get:
    tags: [Bikes]
    summary: Get statistics for a specific bike (Admin only)
    security:
      - BearerAuth: []
    parameters:
      - name: _id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Statistics for the bike.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

# ===================================================================
# Suppliers API (ADMIN ONLY)
# ===================================================================
/suppliers:
  get:
    tags: [Suppliers]
    summary: Get all suppliers (Admin only)
    description: Retrieves a paginated list of all suppliers. Requires admin privileges.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
    responses:
      '200':
        description: A paginated list of suppliers.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Supplier.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

  post:
    tags: [Suppliers]
    summary: Create a new supplier (Admin only)
    description: Adds a new supplier to the system. Requires admin privileges.
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/CreateSupplierReqBody.yaml'
    responses:
      '201':
        description: Supplier created successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'

/suppliers/stats:
  get:
    tags: [Suppliers]
    summary: Get bike statistics for all suppliers (Admin only)
    description: Retrieves statistics about the number of bikes associated with each supplier. Requires admin privileges.
    security:
      - BearerAuth: []
    responses:
      '200':
        description: Statistics retrieved successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/suppliers/{id}:
  get:
    tags: [Suppliers]
    summary: Get supplier by ID (Admin only)
    description: Retrieves detailed information for a specific supplier by their ID. Requires admin privileges.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the supplier to retrieve.
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Supplier details retrieved successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/Supplier.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
  
  put:
    tags: [Suppliers]
    summary: Update a supplier (Admin only)
    description: Updates the information of an existing supplier. Requires admin privileges.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the supplier to update.
        schema:
          type: string
          format: mongoId
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/UpdateSupplierReqBody.yaml'
    responses:
      '200':
        description: Supplier updated successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
        
  patch:
    tags: [Suppliers]
    summary: Change supplier status (Admin only)
    description: Changes the status of a supplier (e.g., ACTIVE, INACTIVE). Requires admin privileges.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the supplier whose status is to be changed.
        schema:
          type: string
          format: mongoId
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/ChangeSupplierStatusReqBody.yaml'
    responses:
      '200':
        description: Supplier status changed successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'

/suppliers/{id}/stats:
  get:
    tags: [Suppliers]
    summary: Get bike statistics for a specific supplier (Admin only)
    description: Retrieves statistics about the number of bikes for a specific supplier by their ID. Requires admin privileges.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the supplier to get statistics for.
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Statistics retrieved successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

# ===================================================================
# Rentals API
# ===================================================================
/rentals:
  post:
    tags: [Rentals]
    summary: Create a new rental session
    description: Allows a user to start a new rental session by providing a bike ID.
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/CreateRentalReqBody.yaml'
    responses:
      '200':
        description: Rental session created successfully.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  $ref: '../components/schemas/MessageResponse.yaml#/properties/message'
                result:
                  $ref: '../components/schemas/Rental.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '400':
        description: Bad Request (e.g., bike not available, station not found).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
  get:
    tags: [Rentals]
    summary: Get all rental sessions (Admin/Staff only)
    description: Retrieves a paginated list of all rental sessions.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      - name: start_station
        in: query
        schema:
          type: string
          format: mongoId
      - name: end_station
        in: query
        schema:
          type: string
          format: mongoId
      - name: status
        in: query
        schema:
          $ref: '../components/schemas/RentalStatus.yaml'
    responses:
      '200':
        description: A paginated list of rentals.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Rental.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/rentals/stats/revenue:
  get:
    tags: [Rentals]
    summary: Get rental revenue statistics (Admin only)
    security:
      - BearerAuth: []
    parameters:
      - name: from
        in: query
        schema:
          type: string
          format: date
      - name: to
        in: query
        schema:
          type: string
          format: date
      - name: groupBy
        in: query
        schema:
          type: string
          enum: ["DAY", "MONTH", "YEAR"]
    responses:
      '200':
        description: Revenue statistics retrieved successfully.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/rentals/stats/station-activity:
  get:
    tags: [Rentals]
    summary: Get station activity statistics (Admin only)
    security:
      - BearerAuth: []
    # ... (add from, to, stationId parameters similarly)
    responses:
      '200':
        description: Station activity statistics retrieved successfully.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/rentals/stats/reservations:
  get:
    tags: [Rentals]
    summary: Get reservation statistics (Admin only)
    security:
      - BearerAuth: []
    # ... (add from, to, groupBy parameters similarly)
    responses:
      '200':
        description: Reservation statistics retrieved successfully.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/rentals/me:
  get:
    tags: [Rentals]
    summary: Get my rental history
    description: Retrieves the authenticated user's paginated rental history.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      # ... (add other filters if available for users)
    responses:
      '200':
        description: A paginated list of the user's rentals.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Rental.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/rentals/me/current:
  get:
    tags: [Rentals]
    summary: Get my current rental session
    security:
      - BearerAuth: []
    responses:
      '200':
        description: Details of the current active rental session.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/rentals/me/{id}:
  get:
    tags: [Rentals]
    summary: Get details of my specific rental
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Detailed information about the rental session.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: Forbidden (trying to access another user's rental).
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/rentals/me/{id}/end:
  put:
    tags: [Rentals]
    summary: End my rental session
    description: Allows a user to end their own currently active rental session.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Rental session ended successfully.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: Forbidden (not the user's rental).
      '404':
        description: Not Found (rental is not currently active).

/rentals/{id}:
  get:
    tags: [Rentals]
    summary: Get rental details by ID (Admin only)
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Detailed rental information.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
  put:
    tags: [Rentals]
    summary: Update rental details (Admin only)
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/UpdateRentalReqBody.yaml'
    responses:
      '200':
        description: Rental updated successfully.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'

/rentals/{id}/end:
  put:
    tags: [Rentals]
    summary: End a rental session (Admin/Staff only)
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/EndRentalByAdminOrStaffReqBody.yaml'
    responses:
      '200':
        description: Rental session ended successfully.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'

/rentals/{id}/cancel:
  post:
    tags: [Rentals]
    summary: Cancel a rental session (Admin/Staff only)
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/CancelRentalReqBody.yaml'
    responses:
      '200':
        description: Rental session cancelled successfully.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '400':
        description: Bad Request (e.g., rental cannot be cancelled in its current state).

# ===================================================================
# Reservations API
# ===================================================================
/reservations:
  post:
    tags: [Reservations]
    summary: Create a new reservation
    description: Allows a user to create a reservation for a bike.
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/CreateReservationReqBody.yaml'
    responses:
      '201':
        description: Reservation created successfully.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '400':
        description: Bad Request (e.g., bike not available, user already has reservation).
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
  get:
    tags: [Reservations]
    summary: Get all reservations (Admin/Staff only)
    description: Retrieves a paginated list of all reservations.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      - name: status
        in: query
        schema:
          $ref: '../components/schemas/ReservationStatus.yaml'
    responses:
      '200':
        description: A paginated list of reservations.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Reservation.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/reservations/me:
  get:
    tags: [Reservations]
    summary: Get my reservations
    description: Retrieves a paginated list of the authenticated user's reservations.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
    responses:
      '200':
        description: A paginated list of the user's reservations.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Reservation.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/reservations/me/{id}:
  get:
    tags: [Reservations]
    summary: Get my reservation details
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Reservation details.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: Forbidden (not the user's reservation).
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/reservations/{id}:
  get:
    tags: [Reservations]
    summary: Get reservation details (Admin/Staff only)
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Reservation details.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/reservations/{id}/cancel:
  post:
    tags: [Reservations]
    summary: Cancel my reservation
    description: Allows a user to cancel their own reservation.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/CancelReservationReqBody.yaml'
    responses:
      '200':
        description: Reservation cancelled successfully.
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: Forbidden (not the user's reservation).
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

# ===================================================================
# Reports API
# ===================================================================
/reports:
  get:
    tags: [Reports]
    summary: Get my reports
    description: Retrieves a paginated list of reports created by the currently authenticated user.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      - name: status
        in: query
        description: Filter reports by status.
        schema:
          $ref: '../components/schemas/ReportStatus.yaml'
    responses:
      '200':
        description: A paginated list of user's reports.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Report.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
  post:
    tags: [Reports]
    summary: Create a new report
    description: Submits a new report. For reports involving files, use `multipart/form-data`.
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '../components/schemas/CreateReportReqBody.yaml'
    responses:
      '201':
        description: Report created successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'

/reports/manage-reports:
  get:
    tags: [Reports]
    summary: Get all reports (Admin only)
    description: Retrieves a paginated list of all reports in the system. Requires admin privileges.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      - name: type
        in: query
        description: Filter reports by type.
        schema:
          $ref: '../components/schemas/ReportType.yaml'
      - name: userID
        in: query
        description: Filter reports by user ID.
        schema:
          type: string
          format: mongoId
      - name: date
        in: query
        description: Filter reports by a specific date (YYYY-MM-DD).
        schema:
          type: string
          format: date
    responses:
      '200':
        description: A paginated list of all reports.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Report.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/reports/{reportID}:
  get:
    tags: [Reports]
    summary: Get report by ID
    description: Retrieves detailed information for a specific report by its ID.
    security:
      - BearerAuth: []
    parameters:
      - name: reportID
        in: path
        required: true
        description: The ID of the report to retrieve.
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Report details retrieved successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/Report.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
  put:
    tags: [Reports]
    summary: Update a report (Admin/Staff)
    description: Updates the status, assignee, or priority of a report. Requires admin/staff privileges.
    security:
      - BearerAuth: []
    parameters:
      - name: reportID
        in: path
        required: true
        description: The ID of the report to update.
        schema:
          type: string
          format: mongoId
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/UpdateReportReqBody.yaml'
    responses:
      '200':
        description: Report updated successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'

# ===================================================================
# Wallets API
# ===================================================================
/wallets:
  get:
    tags: [Wallets]
    summary: Get my wallet info
    description: Retrieves information about the currently authenticated user's wallet.
    security:
      - BearerAuth: []
    responses:
      '200':
        description: Wallet information retrieved successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/Wallet.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/wallets/transaction:
  get:
    tags: [Wallets]
    summary: Get my transaction history
    description: Retrieves a paginated list of transactions for the authenticated user's wallet.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      - name: type
        in: query
        description: Filter transactions by type.
        schema:
          $ref: '../components/schemas/TransactionType.yaml'
    responses:
      '200':
        description: A paginated list of transactions.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Transaction.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/wallets/transaction/{id}:
  get:
    tags: [Wallets]
    summary: Get transaction details
    description: Retrieves details of a specific transaction for the authenticated user.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Transaction details retrieved successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/Transaction.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/wallets/increase:
  put:
    tags: [Wallets]
    summary: Increase wallet balance (Admin only)
    description: Increases the balance of a user's wallet. Requires admin privileges.
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/IncreaseBalanceReqBody.yaml'
    responses:
      '200':
        $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'

/wallets/decrease:
  put:
    tags: [Wallets]
    summary: Decrease wallet balance (Admin only)
    description: Decreases the balance of a user's wallet. Requires admin privileges.
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/DecreaseBalanceReqBody.yaml'
    responses:
      '200':
        $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'

/wallets/{id}:
  patch:
    tags: [Wallets]
    summary: Change wallet status (Admin only)
    description: Changes the status of a user's wallet (e.g., Active, Frozen). Requires admin privileges.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/UpdateWalletStatusReqBody.yaml'
    responses:
      '200':
        $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'

# ===================================================================
# Refunds API
# ===================================================================
/refunds:
  post:
    tags: [Refunds]
    summary: Create a new refund request
    description: Allows an authenticated user to submit a refund request for a specific transaction.
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/CreateRefundReqBody.yaml'
    responses:
      '201':
        $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        description: Transaction not found.
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
  get:
    tags: [Refunds]
    summary: Get my refund requests
    description: Retrieves a paginated list of refund requests for the currently authenticated user.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      - name: status
        in: query
        schema:
          $ref: '../components/schemas/RefundStatus.yaml'
    responses:
      '200':
        description: A paginated list of the user's refund requests.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Refund.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/refunds/manage-refunds:
  get:
    tags: [Refunds]
    summary: Get all refund requests (Admin only)
    description: Retrieves a paginated list of all refund requests. Requires admin privileges.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      - name: status
        in: query
        schema:
          $ref: '../components/schemas/RefundStatus.yaml'
    responses:
      '200':
        description: A paginated list of all refund requests.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Refund.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/refunds/{id}:
  get:
    tags: [Refunds]
    summary: Get refund request details
    description: Retrieves details of a specific refund request. Admins can view any request, users can only view their own.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: '../components/schemas/Refund.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
  put:
    tags: [Refunds]
    summary: Update refund status (Admin only)
    description: Allows an admin to approve, reject, or complete a refund request.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/UpdateRefundStatusReqBody.yaml'
    responses:
      '200':
        $ref: '../components/schemas/MessageResponse.yaml'
      '400':
        description: Bad request (e.g., invalid status transition).
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'

# ===================================================================
# Withdrawals API
# ===================================================================
/withdraws:
  post:
    tags: [Withdrawals]
    summary: Create a withdrawal request
    description: Allows an authenticated user to submit a request to withdraw funds from their wallet.
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/CreateWithdrawalReqBody.yaml'
    responses:
      '201':
        $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
  get:
    tags: [Withdrawals]
    summary: Get my withdrawal requests
    description: Retrieves a paginated list of the authenticated user's withdrawal requests.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      - name: status
        in: query
        schema:
          $ref: '../components/schemas/WithdrawalStatus.yaml'
    responses:
      '200':
        description: A paginated list of withdrawal requests.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Withdrawal.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/withdraws/manage-withdrawal:
  get:
    tags: [Withdrawals]
    summary: Get all withdrawal requests (Admin only)
    description: Retrieves a paginated list of all withdrawal requests in the system.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      - name: status
        in: query
        schema:
          $ref: '../components/schemas/WithdrawalStatus.yaml'
    responses:
      '200':
        description: A paginated list of all withdrawal requests.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Withdrawal.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/withdraws/{id}:
  get:
    tags: [Withdrawals]
    summary: Get withdrawal request details
    description: Retrieves details of a specific withdrawal request. Admins can view any request, users can only view their own.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: '../components/schemas/Withdrawal.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
  put:
    tags: [Withdrawals]
    summary: Update withdrawal status (Admin only)
    description: Allows an admin to approve, reject, or complete a withdrawal request.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: mongoId
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/UpdateWithdrawalStatusReqBody.yaml'
    responses:
      '200':
        $ref: '../components/schemas/MessageResponse.yaml'
      '400':
        description: Bad request (e.g., invalid status transition).
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'

# ===================================================================
# Stations API
# ===================================================================
/stations:
  get:
    tags: [Stations]
    summary: Get all stations
    description: Retrieves a paginated list of all bike stations. This is a public endpoint.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      - name: name
        in: query
        required: false
        description: Filter stations by name (case-insensitive, partial match).
        schema:
          type: string
          example: "Vincom"
      - name: address
        in: query
        required: false
        description: Filter stations by address (case-insensitive, partial match).
        schema:
          type: string
          example: "Xa lộ Hà Nội"
      - name: latitude
        in: query
        required: false
        description: Filter stations by latitude.
        schema:
          type: number
          format: double
          example: 10.8015
      - name: longitude
        in: query
        required: false
        description: Filter stations by longitude.
        schema:
          type: number
          format: double
          example: 106.7423
      - name: capacity
        in: query
        required: false
        description: Filter stations by capacity (exact match).
        schema:
          type: integer
          example: 20
    responses:
      '200':
        description: A paginated list of stations.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Station.yaml'
  post:
    tags: [Stations]
    summary: Create a new station (Admin only)
    description: Adds a new bike station to the system. Requires admin privileges.
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/CreateStationReqBody.yaml'
    responses:
      '201':
        description: Station created successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'

/stations/{id}:
  get:
    tags: [Stations]
    summary: Get station by ID
    description: Retrieves detailed information for a specific station by its ID.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the station to retrieve.
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Station details retrieved successfully.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                result:
                  $ref: '../components/schemas/Station.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
  put:
    tags: [Stations]
    summary: Update a station (Admin only)
    description: Updates the information of an existing station. Requires admin privileges.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the station to update.
        schema:
          type: string
          format: mongoId
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/UpdateStationReqBody.yaml'
    responses:
      '200':
        description: Station updated successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
  delete:
    tags: [Stations]
    summary: Delete a station (Admin only)
    description: Deletes a station from the system. Requires admin privileges.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the station to delete.
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Station deleted successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/MessageResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/stations/nearby:
  get:
    tags: [Stations]
    summary: Find nearby stations
    description: Finds and returns a list of stations near a given geographical coordinate.
    parameters:
      - name: latitude
        in: query
        required: true
        description: The latitude of the location to search from.
        schema:
          type: number
          format: double
          example: 10.8015
      - name: longitude
        in: query
        required: true
        description: The longitude of the location to search from.
        schema:
          type: number
          format: double
          example: 106.7423
      - name: maxDistance
        in: query
        required: false
        description: "Maximum distance in meters. (Default: 1000m)"
        schema:
          type: integer
          minimum: 1
          default: 20000
          example: 5000
    responses:
      '200':
        description: A list of nearby stations.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '../components/schemas/Station.yaml'
      '422':
        description: Validation error (e.g., latitude/longitude is not numeric or is missing).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorValidationResponse.yaml'

/stations/{id}/rentals:
  get:
    tags: [Stations]
    summary: Get rentals by station (Admin/Staff only)
    description: |
      Retrieves a paginated list of rentals associated with a specific station. 
      - Requires Admin or Staff privileges.
      - Can be used to filter by status (e.g., 'ĐANG THUÊ').
      - **Special Feature**: If `status` is set to 'ĐÃ ĐẶT TRƯỚC', you can use `expired_within` to find reservations expiring soon.
    security:
      - BearerAuth: []
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the station to check.
        schema:
          type: string
          format: mongoId
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
      - name: status
        in: query
        required: false
        description: Filter rentals by status.
        schema:
          $ref: '../components/schemas/RentalStatus.yaml'
      - name: expired_within
        in: query
        required: false
        description: "Only used if status='ĐÃ ĐẶT TRƯỚC'. Finds reservations expiring within this many minutes. (Default: 60)"
        schema:
          type: integer
          default: 60
          example: 30
    responses:
      '200':
        description: A paginated list of rentals for the station, with populated bike info.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        # Đây là schema response tùy chỉnh dựa trên $project của bạn
                        type: object
                        properties:
                          _id:
                            type: string
                            format: mongoId
                          user_id:
                            type: string
                            format: mongoId
                          bike:
                            $ref: '../components/schemas/Bike.yaml'
                          status:
                            $ref: '../components/schemas/RentalStatus.yaml'
                          timeRemainingMinutes:
                            type: integer
                            description: "Minutes remaining until the reservation expires (only for 'ĐÃ ĐẶT TRƯỚC' status)."
                            example: 15
                          start_station:
                            type: string
                            format: mongoId
                          end_station:
                            type: string
                            format: mongoId
                          start_time:
                            type: string
                            format: date-time
                          end_time:
                            type: string
                            format: date-time
                          duration:
                            type: integer
                          total_price:
                            type: number
                            format: double
                          created_at:
                            type: string
                            format: date-time
                          updated_at:
                            type: string
                            format: date-time
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: Forbidden (User does not have Admin or Staff rights).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        description: Station not found.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'

# ===================================================================
# Ratings API
# ===================================================================
/ratings:
  get:
    tags: [Ratings]
    summary: Get my ratings
    description: Retrieves a paginated list of ratings submitted by the currently authenticated user.
    security:
      - BearerAuth: []
    parameters:
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
    responses:
      '200':
        description: A paginated list of the user's ratings.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Rating.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/ratings/{rentalId}:
  post:
    tags: [Ratings]
    summary: Create a new rating for a rental
    description: Allows a user to submit a rating (score and comment) for a completed rental session.
    security:
      - BearerAuth: []
    parameters:
      - name: rentalId
        in: path
        required: true
        description: The ID of the rental session to be rated.
        schema:
          type: string
          format: mongoId
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../components/schemas/CreateRatingReqBody.yaml'
    responses:
      '201':
        description: Rating created successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/MessageResponse.yaml'
      '400':
        description: Bad Request (e.g., rental already rated, rental not completed).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '403':
        description: Forbidden (user did not rent this bike).
        content:
          application/json:
            schema:
              $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '422':
        $ref: '../components/schemas/ErrorValidationResponse.yaml'
  get:
    tags: [Ratings]
    summary: Get rating by rental ID
    description: Retrieves the rating associated with a specific rental ID.
    security:
      - BearerAuth: []
    parameters:
      - name: rentalId
        in: path
        required: true
        description: The ID of the rental session.
        schema:
          type: string
          format: mongoId
    responses:
      '200':
        description: Rating details retrieved successfully.
        content:
          application/json:
            schema:
              $ref: '../components/schemas/Rating.yaml'
      '401':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'

/ratings/bike/{bikeId}:
  get:
    tags: [Ratings]
    summary: Get ratings by bike ID
    description: Retrieves a paginated list of all ratings for a specific bike. (Public endpoint)
    parameters:
      - name: bikeId
        in: path
        required: true
        description: The ID of the bike.
        schema:
          type: string
          format: mongoId
      - $ref: '../parameters/all-parameters.yaml#/PageQuery'
      - $ref: '../parameters/all-parameters.yaml#/LimitQuery'
    responses:
      '200':
        description: A paginated list of ratings for the bike.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../components/schemas/PaginatedResponse.yaml'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '../components/schemas/Rating.yaml'
      '404':
        $ref: '../components/schemas/ErrorStatusResponse.yaml'